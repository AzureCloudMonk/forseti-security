full_name,type_name,parent_type_name,name,type,policy_update_counter,display_name,email,data
organization/660570133860/project/cicd-prod/instance/1091289885807976584/,instance/1091289885807976584,project/cicd-prod,1091289885807976584,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-08T10:50:15.801-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-prod-east-default-pool-5adc0ee7-r2ax", "type": "PERSISTENT"}], "id": "1091289885807976584", "kind": "compute#instance", "labelFingerprint": "UkEjw7weYjQ=", "labels": {"gke-redditmobile-prod-east-1325891c-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "dK-rpqn48TU=", "items": [{"key": "cluster-name", "value": "redditmobile-prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNekNDQWh1Z0F3SUJBZ0lRSXV5VUZ6bXFwTVZpai9lWGw1VGZYVEFOQmdrcWhraUc5dzBCQVFzRkFEQkQKTVVFd1B3WURWUVFERERoMWN5MWxZWE4wTVMxaUxUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxdwpjbTlrTFdWaGMzUkFNVFEzTnpFMU9ERTRPREFlRncweE5qRXdNakl4TnpRek1EaGFGdzB5TVRFd01qRXhOelF6Ck1EaGFNRU14UVRBL0JnTlZCQU1NT0hWekxXVmhjM1F4TFdJdE1qVTJNakU1TkRNMk9UUXRjbVZrWkdsMGJXOWkKYVd4bExYQnliMlF0WldGemRFQXhORGMzTVRVNE1UZzRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUF4RW9lRlZsS2VGVnRyUStVQ3NJY01kbDQzTjlUaGNZcU10YU0zNkxYN3Voajd5OUFOTndpCnlSemdTcnVQK0E2YlZDQmpHa3E5V25pcVYydEw0dFBwQXc0QWozNHp2QmVvWUJDVE5EU2dLKzhHUU51bEtoangKcS9jdlJwMThaWWpnbTcyRTBXQUJHN0RZNUR1dDRxazlEYmIvSTBPQUpVOU9xYkp2OE84d3RPY1UzM0VUd0xnbwpGL09RWEZWYWJzaUMyY1pnVkxGTWlkT09aYmljN2NrcncrRmgzeWFYek1FOG5KK3NQNm00WnJtZ3lmL0MxVnFtCm9EVldZaWYwWU9PUFNJaEVXQ3VDS050RFE4ODdPY21rWmlOZXZqNms1YzRHK3U0R1VubkE0NCtXQWY5eGVubXcKMkErRlhQMkYzMVZqL3dwR3kvUng2bGNTR1RjQlFGNCt2UUlEQVFBQm95TXdJVEFPQmdOVkhROEJBZjhFQkFNQwpBZ1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBV2hzd054OW8wU1phClZCbHlUUm5CR1VyT3M2SkFmM1RQaGplZS9JZi9UWWJuNGdTV2EwbFNGOHo1ajQvMnpLQWVrbmcyNGxGeWZwdngKZDhYVWYvUVRKd0U4RzZrcXcrVmJlZ2Y1WEdiS2ExUmNTN1ZWV250Z3ZlODY5MVk4cnh4SjJudUpkVC83Y2dGUwpIdU1USGZ3OWJVRFg2TkFmZGkrcTlQSFVrMytoZUZ6eW13LythdENLQVZpUVpBNnNEUGhESlk0Vm5jcjdQNGorCmlYK1pWTW5jUjFibUp5NGE0eDhhWFdYcTZaalY5Z2pGL1VpUGlDVHpaRzhuNDhNYzFDd1lRL0k0NTVLeCsvS1IKNmpQODAxNlBLZ1p4TzI5TXNpakdaNU5vRDlpQzlVTWQzeXBXT0lpV0dCSG43V2w0aXBlajdtRUJVT0Rma3lucgpzZWxacTh2M2h3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:01+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-east-1325891c\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: VxapZpZNKAFLBBTKxwwXjFfd-yQeeACylgRYq3yS4GI=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQUw5RkRMYmZhUFV0VU5mVVZ6U1ZKUGN3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxbFlYTjBRREUwTnpjeE5UZ3hPRGd3SGhjTk1UWXhNREl5TVRjME16QTRXaGNOTWpFeE1ESXhNVGMwCk16QTRXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlZ3F0bgowdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFBhU2FnCjVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eXduYmkKd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1N3pmQgprclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3NEVS9hCjVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFtTWxsL2N3MmFDUUN4TDlENTVLMitQRENPNkJaNnAwQnQ2Rkk0S2duQk9yeDQ5YWpJa2lTCjI4ajNjc09MbmdzaDk4a1ZjOFpaRFVmcmd1RHo1ams0ejRvWW9IU3NlYmdlclN2Q2tPTThrR1ZGQURaUWxCd1QKVGhEbjFRNUhoY1JvUXdWU2lNQ2swTDVtMHZjTG5YVklWT2gwNnN0R3NQdkRpSlQybjRCVk85MGZmME9uK3JmWAplUkJaQXR2SGUwZ3QvSUtjaFI5eERITXJvNEEvdTh6TVhKM2kxeGl4aDR6MndOV21Rd1dKbzBDUHBFUGtDQXEzCmxOT3Z4MndsVHEzaWZiRFJsd1MxOEZIMmF1R0xzRjloUW9oR2hDWlhTY0JldEZCMnB5R25WWklTdE5RR0o0S3cKYm5RRjE2TThQNEtFdnlWVVE3aER0dGNCZHdueFZHd0xOZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlCmdxdG4wdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFAKYVNhZzVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eQp3bmJpd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1Cjd6ZkJrclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3MKRFUvYTVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJBb0lCQVFDb3k5YldrUFUzckEvRwpLZzNwQ0YxUkkrWWFPdGJJSDBldC9RZTRNSU83d2JLZzBzTjNWNW5TNk9GdkxSSTNmTkViSklSdE4xNkRCTjNjCjYyU0ZNMGlhUHo5TmQ1SVJNbytyQytkbXM3VVpYTlJkV09xcTRqTDhOelg1V05UOEtMUDJqbXZGMHFGc3RzbjIKY0l6UzdUYzN2dVAxdENMTzFUcTlEdDhTdGZRSFVWN0ZOdVFVdjhmUWFCSDVpRG92NnpSWlM2SUdrVUtTNWsvOQo1KzdjNXpIL0c5amxkZjdPVnhmQTFBVVU4N2F2Z0JHTTlYNzVmTVVpNE5CajdFNFRXZThaNmtmTjl2aWo5R3dHCjVsMFN6djlFemdBa05pWU9UcWNCZElJZ25KSlROVjhmb2pXK2RLYUVXeUtCUkxTRHRIZUNQMk1vSEtyS3FmOW8KWGJoK2IvRkZBb0dCQU9uQk5uYkhnZGU5aXR6allxekhiU3BqVFhraFpRdjlEUTZJRWhrUkZqdHhDZEtpY3krcgo3VjA3ejZLMmZRUkxpUGxZWDh5dTFud1QxYmM4aWo1eWVCV3gzeFhrOHR6Y05wRkdSamVWdkhaTjZKTGlwd3U4Ck5LWVN2RkJMK1JORDRHRmk5R1RTcURQYnRKbVRmTHhpeGFnSnltREVDN3VVN0NBWjA2ME1oYVF2QW9HQkFQN3UKc2ZCQ3F2czZEbWdEaGF0Z2FrUThoWHBNaE1idDdjNHhWKzdxaFJrYXc5RTg4QUs5dXgzQUh0RnJaR2s4U080VAp0Qjk4bmdWcnRGTGZKOStqL29jOWdpT0Q1SmpTS0FGeE1zSzNwcHA4akJRT3k3elExV3lGRmlxTXY4bmRib0M3CmNaVXFWMklLMGxxVHQ3Ni9YUFZSb0JtTktGK2dMUmpmY05tNkFreDdBb0dBRDJNU2pMc1JSdnhKR2NVMkI1MlIKQ0F0RlhFWGdldXVMWW50K2hYdmtkTUU2SGsxbk82b2JrOW1PRDIzbnlOS1lENkhMbkpPZHRza3Zka0piNzBSbAp0emZnTVhiQ3Jkc3BGR01GMkQ3WkN3aVIyS2xteVpUMytqNmRlc09sZjZrbUtnTHpoM2QrYnZ0MVplNlpkV1VqCkVhNmpUYjlaN2wwZE5mZTlRVlRqcnkwQ2dZQkZvUlJndHhUVVFXc2w1YkJndXBqTHdtd0NsMXU4cWNmR0Jad3EKMlVzNUxDSkh5QWtWOXBSZzc5UjdCb1lLYURqVExmYUlreFRtRGlEV2NiVUdWRmgwdjh3SHYwSjBxeEhhTXZ6VwpTaXJyRHhHRGVQY1V2MFZMdXAzdlNUb28vSjN0ODBSMnBYWHdoVndtK1NtNm83SFVIMU5ISjFMYnEzZ2x6d0dYCnRrSmllUUtCZ0Z6MjhGSXVBaEFJeFlVeE1wbnhEeS93WHErTURiSXB4VkRJa0J0Mm5mMFA5K1dtVjZDVE1pMFQKNHlQd3FtWVpYcE9KU05ZdDQ1MlcvQzZ1a3RmNFBKMmtrNm03WVVWZC9pa0M0VWZ2UGZyVUpDVlp2VlZSNDZGRApHbStqWVhmREdmanNFOXRwTFpkTUN1MDNBVTgyeVAwYkN1NlI2OUZiQjNtTTdOQVBXdyt4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.40.126\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-east-default-pool-5adc0ee7"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-prod-east-default-pool-5adc0ee7-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-east-default-pool-5adc0ee7-r2ax", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.210.151", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "RvpVjbuS9gc=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-prod-east-default-pool-5adc0ee7-r2ax", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "UkEjw7weYjQ=", "items": ["gke-redditmobile-prod-east-1325891c-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/policyscanner-demo/instance/1159891152121649261/,instance/1159891152121649261,project/policyscanner-demo,1159891152121649261,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-14T12:41:55.278-07:00", "deletionProtection": false, "description": "GAE managed VM for module: default, version: 20161228t180613", "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/goog-vmruntime-images/global/licenses/appengine-vmruntime"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/disks/gae-default-20161228t180613-y6qk-0hzb", "type": "PERSISTENT"}], "id": "1159891152121649261", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/machineTypes/g1-small", "metadata": {"fingerprint": "7VzUiyz0o_w=", "items": [{"key": "gcm-replica", "value": "gae-default-20161228t180613-y6qk"}, {"key": "gcm-pool", "value": "gae-default-20161228t180613"}, {"key": "gcm-command-0", "value": "/usr/share/vm_runtime/vm_runtime_init.sh start"}, {"key": "startup-script", "value": "mkdir -p \"/gagent/metaOutput/\"\nwriteToSerialPort() {\nlocal timestamp=$1\nlocal message=$2\necho \"gcm-StatusUpdate:TIME=$timestamp;STATUS=$message\" > /dev/console\n}\nreport() {\nlocal message=$1\nlocal timestamp=\"`date +%s`000\"\nlocal log=\"/gagent/startup.log\"\necho \"$timestamp - $message\" >> $log\nwriteToSerialPort $timestamp \"$message\"\n}\nexitCode=112358\nreport \"STARTUP_SCRIPT_STARTED\"\nheartbeat() {\nwhile :\ndo\necho \"gcm-Heartbeat:`date +%s`000\" > /dev/console\nsleep 30\ndone\n}\nheartbeat &\ncurl -H \"Metadata-Flavor: Google\" \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcm-command-0\" > /gagent/0.sh\nchmod +x /gagent/0.sh\nreport \"AGENT_RUNNING_COMMAND;INVOCATION_ID=0\"\nwhile :\ndo\n/gagent/0.sh\nexitCode=$?\nbreak;\ndone < /dev/null 1>> /gagent/metaOutput/stdout.0.txt 2>> /gagent/metaOutput/stderr.0.txt\necho \"$exitCode\" > /gagent/metaOutput/exitcode.0.txt\nif [ \"$exitCode\" == 0 ]\nthen\nreport \"COMMAND_SUCCEEDED;INVOCATION_ID=0\"\nelse\nreport \"COMMAND_FAILED;INVOCATION_ID=0\"\nexit $exitCode\nfi\ncommandsSucceeded() {\nlocal timestamp=\"`date +%s`000\"\nwhile :\ndo\nwriteToSerialPort $timestamp ALL_COMMANDS_SUCCEEDED\nsleep 30\ndone\n}\ncommandsSucceeded &\nhealthCheck0() {\nlocal unhealthyCount=0\nwhile :\ndo\nsleep 5\nlocal status=$(curl -s -w \"%{http_code}\" -o /dev/null --max-time 4 -H \"Host: 127.0.0.1\" 'http://localhost:8080/_ah/health')\nif [ \"$status\" == 200 ]\nthen\nunhealthyCount=0\nelse\n(( unhealthyCount += 1 ))\nif [ \"$unhealthyCount\" -ge 60 ]\nthen\nreport \"HEALTH_CHECK_UNHEALTHY;STATUS_MESSAGE=0\"\nfi\nfi\ndone\n}\nhealthCheck0 &"}, {"key": "gae_publish_ports", "value": ""}, {"key": "gae_agent_bucket", "value": ""}, {"key": "gae_agent_bucket_path", "value": ""}, {"key": "gae_allow_ssh", "value": "false"}, {"key": "gae_app_bucket", "value": "vm-config-internal.policyscanner-demo.appspot.com"}, {"key": "gae_app_fullname", "value": "policyscanner-demo_20161228t180613-398083669684454786"}, {"key": "gae_app_zip_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.zip"}, {"key": "gae_app_env_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.env"}, {"key": "gae_app_nginx_conf_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.conf"}, {"key": "gae_backend_instance", "value": "1"}, {"key": "gae_backend_minor_version", "value": "398083669684454786"}, {"key": "gae_backend_name", "value": "default"}, {"key": "gae_backend_version", "value": "20161228t180613"}, {"key": "gae_dockerfile_appendix", "value": ""}, {"key": "gae_enable_app_engine_apis", "value": "true"}, {"key": "gae_environment", "value": ""}, {"key": "gae_has_docker_image", "value": "true"}, {"key": "gae_free_disk_space_threshold_mb", "value": "1024"}, {"key": "gae_full_app_container", "value": "us.gcr.io/policyscanner-demo/appengine/default.20161228t180613@sha256:b48abad1caa549dd03070e53d1124f9474ac20472c7f61ee14d653d0a2ae2a5e"}, {"key": "gae_module_yaml_path", "value": "app.yaml"}, {"key": "gae_nginx_config", "value": ""}, {"key": "gae_no_appserver_affinity", "value": "false"}, {"key": "gae_partition", "value": "s"}, {"key": "gae_project", "value": "policyscanner-demo"}, {"key": "gae_run_http_unlock", "value": "true"}, {"key": "gae_server_software", "value": "Google App Engine/1.9.68"}, {"key": "gae_unlocked", "value": "false"}, {"key": "gae_vm_runtime", "value": "java"}, {"key": "google-container-manifest", "value": "kind: Pod\nmetadata:\n  name: managed-vm-pod\nspec:\n  dnsPolicy: Default\n  restartPolicy: Always\nversion: v1beta2\n"}, {"key": "shutdown-script", "value": "/usr/share/vm_runtime/vm_shutdown.sh"}, {"key": "gae_use_container_watchdog", "value": "true"}, {"key": "gae_api_verifier_image_name", "value": "gcr.io/google_appengine/api-verifier"}, {"key": "gae_use_api_verifier", "value": "true"}, {"key": "gae_fluentd_image_name", "value": "gcr.io/google_appengine/fluentd-logger"}, {"key": "gae_cloud_logging", "value": "true"}, {"key": "gae_nginx_proxy_image_name", "value": "gcr.io/google_appengine/nginx-proxy"}, {"key": "gae_health_check_interval_sec", "value": "5"}, {"key": "gae_mvm_agent_image_name", "value": "gcr.io/google_appengine/mvm-agent"}, {"key": "gae_use_nginx_proxy", "value": "true"}, {"key": "gae_health_check_timeout_sec", "value": "4"}, {"key": "gae_memcache_proxy_image_name", "value": "gcr.io/google_appengine/memcache-proxy"}, {"key": "gae_use_memcache_proxy", "value": "true"}, {"key": "gae_use_endpoints_api_management", "value": "false"}, {"key": "gae_iap_watcher_image_name", "value": "gcr.io/google_appengine/iap-watcher"}], "kind": "compute#metadata"}, "name": "gae-default-20161228t180613-y6qk", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External_NAT", "natIP": "104.198.221.62", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "enh38g8n3sQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": false, "onHostMaintenance": "TERMINATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/instances/gae-default-20161228t180613-y6qk", "serviceAccounts": [{"email": "policyscanner-demo@appspot.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/appengine.apis", "https://www.googleapis.com/auth/devstorage.full_control"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b"}"
organization/660570133860/project/cicd-prod/instance/1162618168629239989/,instance/1162618168629239989,project/cicd-prod,1162618168629239989,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-08T10:50:02.707-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-prod-west-default-pool-481e7251-s1ah", "type": "PERSISTENT"}], "id": "1162618168629239989", "kind": "compute#instance", "labelFingerprint": "ZiCwJhcirGU=", "labels": {"gke-redditmobile-prod-west-3470febb-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "U4UDtSVhH6s=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURORENDQWh5Z0F3SUJBZ0lSQU85bEVwekFSMTFPNWJwekVIa1pLMWd3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qUTVXaGNOTWpFeE1ESXhNVGMwCk1qUTVXakJETVVFd1B3WURWUVFERERoMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXYKWW1sc1pTMXdjbTlrTFhkbGMzUkFNVFEzTnpFMU9ERTJPVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTVllMVZlRHU4eElhYkNvUi8zcUdxT2lldEoxajFlN1Q3aFFNU0VFQUw0OGRFWUZmM2dRClR4SmNGanhIWWcxTmRhSXkwUkdEQXFNVGZyTDRUdTlaL1cvc0Y4V3h2K29kMHdDQThsSmUwbVNJSjl1NDI0UysKMEQ0TFJJZ09OWmd4QUF2SFJTTE9DVTljVktOcW80S1FoL212WjBuYXdhVHQ4VnN2VzdWTHEwYXZmZXZVeGdqdwpETkRHUTJqbGZHN05seXF6WnN4eFZMNmNQU3NEWUlSS3g5TlpnbkdDMEZPZUdTOFMwM1NDazZyMkxXOXBqM0hkCk1DTk9ReEUweldKRkUxZTkzOXVVSE5MWlFHL09ieTF5RmFjb2ZpZjZXRkxPUHYwUWdIMXNHdmxZV096RGV4QWkKYkExKy8xN0VJUzJQb1JLWTVhdFgrS1FOSCtnVnFQenVBZ01DQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRRApBZ0lFTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdhMlJ0TkV1cGxFCkF3RFBlTkZ0ZlZhTmlkd1NLWGxkajNya2tIdFRIQUUyZ2dSVHFlVXJVQXZ3WVJDUlFtUnZ5T1dvaUhjdmpEMXUKVE1tTUhhdkZEQ3JlOTdIY21OUEdlTUtjeDhPQ0xBdDdSSXgycndTUmdJV2crWWE0UXpJVEtESUUrRmJZVGNyZApJVFozZGtDbDhibWdPMjhCWHh0eE16cWpTUUZsR0tCNklGTW9vUEE3ankwYWlBdW9xMWFRYmV1bVB0VkVESzhvCjdQSnR1anErSVR5NG9lYzhHblV1bnhPekdITEZoZytxQ25wN0sycWIrUHZ6TzlRZklsYytHVFV4WUpQRTRWZmIKWk43UDUzQlQ1d3pWTGhXYUt3aktVbFBHV3ZETXZTUys5QzlSb25GRmhXRU9QSzFzWkhtSzBtWTVVN0FqSUZlTgpmWDF1NEhmVlR6dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.56.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.59.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:42:43+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-west-3470febb\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: i9C4TB2r4rrZJ4jHOt8J340y25DJmBVG5rHUrZZfaIk=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQVBBSlJxdkZFME9KSmx6TWxpVkFySkF3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qVXhXaGNOTWpFeE1ESXhNVGMwCk1qVXhXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJMHVXSgp3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMycVNJClpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNkhxNVcKL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3bzBVVgpwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEJrSDd3Cnc2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFyOEZDRHhyMEcxY3hOQ091dDVnblhZKytmMUFvTFF5UWRZR3BpUEMwWXdaOFpqU1J2TW9nClczTEx6bnlqZ0FnTGRXOUpTZHFoYW40cE9nWG9DbzBvcG5WbTRoaVd6dVUwb3FUQUo1eE0rendwVGozYUU2cnAKUnpmYkVMWVpPbnEzMXoxRW01Wkl1N21MbzBEYjNWam5odG11bHhJUWZQUjZ5SDcvOTYxYmRmWExWeVB0TGxuUwpvbTRIblQ2V3VCNE1yODhMaSs5QjdOQjVLMkd4dVZpM0Q2UlUyTnIzRDhNUGVxRHRMell1MTAweWdldEQxMzhaClkzckhObklSNVh2aENyb3B2QzNLTDI3VTRVdGdEMFBKTENzRHFhaHZPUnZKS3RkZGgzV3pUenh5RHV1b2FGV3EKVHJKZEVtVlEyZ1NPZnV2QlFsNjhNdFpJY1NtczBlVHRFdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJCjB1V0p3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMKMnFTSVpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNgpIcTVXL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3Cm8wVVZwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEIKa0g3d3c2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJBb0lCQVFDbGx6Q3p1NUszeDZoaQpBUi9BcStROUtvajlPbDdaeGpyWFRsM1docDVQMGdjeDR3UU8wY2RqOG9kSWdEUjBPMXFUNStNKzFOVVh5RHFoCkNQOUdwY3h4dkh0aVJ4YnBQaC8yRkJic0YwdFlsQTRna2k5RjNOQitGU211ZkM4cVVqNGFiYXEyZG9iLzlOa1YKZ2dZcnNFRWJza0dFOVdkdFVEdENrVnNkbnlnS2tyMHJtajFXem16V01jenFvMEU3TDZyWTlhWWJURkI0Ky9jcApxM293bjhlZVh4cXVGcjlOVGNiY2p5Nzl4V1JwOE9mZ0IzTzI2M3laRjhxRzVWTEpTYytlQ0crRGJmUjRWZXgzCmRmcTBxTnVqQmRZSllvKytneVlocVdtZVM2cFpvdW1mK3JUclFnaUZxWjlXT1l4aHRPRDFMM2tPaXVBQWZEQVEKSzhJU2JnM1pBb0dCQU5PUzZ6d1g4ZFJ2bWNUZ2ttamx4MlpBSE9PR1h2Zm5rQUMrM0pyOW9sVUpqblhqbnBzQgpUS0JueUxibkRVbk9NYVVsS0w1R2crSGd2dS9FMWZmdnp0d2lZTStwTDNtbEhBSkh3NmFqUFltd3hZYnprZlNGCjFza1NPMzB6SlZPYjFSeHdPblNsTDRYcmQ4bHhuSXN5OGFtZDVsZ3M2anRobHhCQ0JkcFhPTGNMQW9HQkFOM3YKb1ZpcnJPUkloNFh0OVJKd3FsYjhPMklSM09mL1NsSld4ZnVYUk41Um9wMTE4V3RMYkhQbmFNZUxlc05tenNuZwpOUUFCSC83OWUzanA1bDJtSGtXMTNRMVRacXl1ekRXMVFIdTBYVit5UTd5U0pGYVRUeFNqQ1lxV29CcXNhVWpCCmRsMkZjL2lnYnFrODRoM3NIYkV4NWxvY1hyS1JKZE02VHpNMmJraWpBb0dBV1BDa0Rxa0tNZ0dRSktFN0t2bWQKTHpDNGREVWlheGhmQXRFNUw3WjdyVC9OTVdXMFlQalUyNEdGY000RVdnaGgra2g2cmpJNmNwUGw4Q2xRd1YrQQpHQzRqZ0doZzJzUTcyQUdQRDlnRG9JUTlKUlB6UVZXYUN3Q3RIVjZJekhMdnpYcW9PQ3pRbzMxdTU3SG8ydU5aCmo3SWZDT1lvdVRtM0pWQjc0V05WSmkwQ2dZQVNxbnpmZ0ZEaVFsZGpwRWZnYlNsbWQ0Qm5GeW1GT2F0K2tWM0YKYzB1UGh6NHVFQ1ZsNk1vT1ZZQXlpRUNpL3BxVjBBMmxHbk1lZHlOVFlCakg5NWpFTkMrTFYyQmpWYkJITkI5ZwpTQ015VVVQeE1EbHVMcVdRRHNaV3FhUjltZEtoRStSb3FUaS95SDZHTFdDM000eXJ3bzZsTlkyaFp5UFBTREF4CkZucmdFUUtCZ0dnT2RFeENVUGNUVEIxWHQ4NDlaeWQ1ajJheHA2UWRnRXg5emIyM1MyMUV3WFZXNGY4bWdMb2kKTHBocjljZWZOVUZGOXBwWlF2WUxLaUR0bkNxUlBFeDUwekhTRXZvR3ZlWHpDSjkvMHo1bXU1ZVljdTVURC9ZegpKOThIYWk0V1JLbUs4aFZWdzJJUTVzUkc1OTB6WEkvWVdiUWZxbXBNTDgxTEFKaUhEcU1sCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.102.233\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.59.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-west-default-pool-481e7251"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-prod-west-default-pool-481e7251-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-west-default-pool-481e7251-s1ah", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.232.69", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "n3UotA-o54k=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-prod-west-default-pool-481e7251-s1ah", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "ZiCwJhcirGU=", "items": ["gke-redditmobile-prod-west-3470febb-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/james-harding-wt/instance/1164044432748504651/,instance/1164044432748504651,project/james-harding-wt,1164044432748504651,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-20T14:35:17.360-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/zones/us-central1-c/disks/forseti-security-20171120162357-vm", "type": "PERSISTENT"}], "id": "1164044432748504651", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "XQXDGdtxsRw=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=james-harding-wt:us-central1:forseti-security-20171120162357=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.7 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://james-harding-wt-data-162357/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://james-harding-wt-data-162357/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171120162357-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.192.48.150", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "e3qY6Yz_5X8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/zones/us-central1-c/instances/forseti-security-20171120162357-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-162357@james-harding-wt.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/james-harding-wt/zones/us-central1-c"}"
organization/660570133860/project/cicd-canary/instance/1164828912852016001/,instance/1164828912852016001,project/cicd-canary,1164828912852016001,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-10-22T10:44:14.594-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/disks/gke-redditmobile-canary-west-default-pool-348ddeff-tshs", "type": "PERSISTENT"}], "id": "1164828912852016001", "kind": "compute#instance", "labelFingerprint": "X2sEFXf0JF4=", "labels": {"gke-redditmobile-canary-west-09543119-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "wgfD0cVoOhU=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPVENDQWlHZ0F3SUJBZ0lRQXZMa1ZONlh5NTM3SWt5em4yd214VEFOQmdrcWhraUc5dzBCQVFzRkFEQkcKTVVRd1FnWURWUVFERER0MWN5MTNaWE4wTVMxaExUazRNVFkwTXpJMU9ERXpNQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM056RTFPREkwTkRBZUZ3MHhOakV3TWpJeE56UTBNRFJhRncweU1URXdNakV4Ck56UTBNRFJhTUVZeFJEQkNCZ05WQkFNTU8zVnpMWGRsYzNReExXRXRPVGd4TmpRek1qVTRNVE13TFhKbFpHUnAKZEcxdlltbHNaUzFqWVc1aGNua3RkMlZ6ZEVBeE5EYzNNVFU0TWpRME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQXE4MEZxY2xsQ0F1bG5LeWNyTnhreVpXWXllTitacFpDUjNlcWcrdWsxUmphCkRiZHFyOGZSTG1IYnVJQkViTHYrZFRDbC9TS1F2NmFacXgwVTdMYzFRanVMZ05Cd1VuVGxvTFE4azNKT09LU0YKOVBCN3duMU42UWZOMFFmd2ZmcW9vbjFtd2pqaWc1c1gzdGIrYWZZcjlJcGc2K1hXTDlnblFKa2Jack9sL3BzeApxSC9KcVFROU53WHZVbUhEYTl0T0pMMFVMRnRrenR0aFluVC9wZjc5R3ExSCsxeDBPcCtXY1BFK0FMcHNCNEhmCnB6OW4xSHZEZ2krZnpxc2o1SlR0UlpMeHZvd0FFV1dhcGN4Si9OZlFDS1RicXM2eDlJMlBkVFhWTlRFeFVubWcKTTJPc3R4a25yOTk3dUlHNDNkWTV2dzlQbWIzWW55WS9tZHY2U055bElRSURBUUFCb3lNd0lUQU9CZ05WSFE4QgpBZjhFQkFNQ0FnUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFDSTIyCnBTZXQ0bllqcDJjVTFmVU9HM3UwNmNWblBPNFlRWi9EbnM5OGV2S1JJdEE2Vzg4aW9DTzZvZy9JWHJoanEya3UKaU0wV0VTY1hNMnRWc0VmS2xmRS9OdmdSZUFRdFdvbDU2OTdMeDBwMFp5MFUxY1Y4c1J3NFdnYndqcTNwTFI3MQoxU3B1dWxXT3ROMGUwV0FvakVUZ2IwbmRwZGZWMERYNWFiajRleGZRNmMvQUpwa3plRTBSSXhIN1FKUko4ZW1LClAyUXAxZFdoRjF2MUxCbVVGTVFzV1lGMGhCOFdpZE5mUityYkcwQnBRN3E2b3F3Y3dTc2wwaWpHSkk0K1dMMnUKeFNGdFNpcGxLdkN5MktzL3VMQUxBYmE4MVBGNURkTkdOSzByWHFKVFNqRUNSSWpIWDNRcnZ5TEJXRE1NVE5XNwpJTHFjZVB3OXhuUUlQQXZ2OVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:58+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-west-09543119\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: MM239J49yDvwHB-eOn0OL2h-KPtUOPCI05ZMFzr7Pfg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lRWSt2eGNEeWNTZGRZQm5zY3VWNHpQREFOQmdrcWhraUc5dzBCQVFzRkFEQkcKTVVRd1FnWURWUVFERER0MWN5MTNaWE4wTVMxaExUazRNVFkwTXpJMU9ERXpNQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM056RTFPREkwTkRBZUZ3MHhOakV3TWpJeE56UTBNRFZhRncweU1URXdNakV4Ck56UTBNRFZhTUJJeEVEQU9CZ05WQkFNVEIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFETXNvdit2QXdCbXhCRDV6QnhMNlhNNnNCajNtalZCU3JqMkhTT3paTVNZWGw0aDlEYwpvZjRuY0hJWlR4ZTlFZmQzMXpSTkMxdkRCY1A4aEMxV3dGblpVdENSWHlTUC9KdkUrUk5FYVZ3Y0lTT0UzRWxVCllGcTBmZmg5a05COTBkUzIrUUFhNitlS3pJSFAvajk3ZWMzOUFaWC8wR2sxSk5xRzI4a25jRHU1cUloTjlkcXQKa0l0dW5KQmdBMU9uc3BRR1lNaDNDSDVmbmFZbWhwb2VKMENiaXBUdHRFUEVqWkFUMmJmMCtoYVZHT3o5V002NApYTm81ZzJua0NlYzJ1b3hyOUcxV0VjRENnTndIckI0T2diVXdlWlRMOWhoNnNLRnprRExUMEtRZnAwZXJnZHc2CjRkTmlCUjZYa0tvR0RVWk85M1V4SEI5M2dONmlhalBGSnJvMUFnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUUKQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJ6N0JmcGR4eW9KR1hyaUxRMWpDdVBKaFNnSVRYWmRoS1h0M1g1cmduUXpsb05EK09EClVBWEczZk8yVzVac2JZTTJYbFFCaHFNWmIxMUpUeVRUbWU0V2owa0g3NjNwWUdqelQ1R3ZtN2lZNzF1S2NjWXAKa3EyVk9BUWN2Ty8vU1Blek5MNG9neVFua2dRbGN4czh6VVFjQXVjSlVQd2pKemJxT1hzL1JWTGFOdFdZTlpvNApSa1M4aEIzaHVnV3R2QjJ2cG9aOEE2QnQxU2pPQmY1YmhhK2FqZ0tvVnVsR3N2UjVoZmdSYmNPemFLWlhYV29PClZReWgrbzlNTWNCM1c0Nm4wWnhwdWlUT0g4bnpFZTh3L0k1Mjg2aXhOSkgvdWNpNklZU3BSeXh6TEN0SDl0VzcKTVNyQ01MUXE3MDEzQldNL3VWOGs1LytYZ3RLc2UxL2VLSVFtCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBekxLTC9yd01BWnNRUStjd2NTK2x6T3JBWTk1bzFRVXE0OWgwanMyVEVtRjVlSWZRCjNLSCtKM0J5R1U4WHZSSDNkOWMwVFF0Ynd3WEQvSVF0VnNCWjJWTFFrVjhrai95YnhQa1RSR2xjSENFamhOeEoKVkdCYXRIMzRmWkRRZmRIVXR2a0FHdXZuaXN5QnovNC9lM25OL1FHVi85QnBOU1RhaHR2SkozQTd1YWlJVGZYYQpyWkNMYnB5UVlBTlRwN0tVQm1ESWR3aCtYNTJtSm9hYUhpZEFtNHFVN2JSRHhJMlFFOW0zOVBvV2xSanMvVmpPCnVGemFPWU5wNUFubk5ycU1hL1J0VmhIQXdvRGNCNndlRG9HMU1IbVV5L1lZZXJDaGM1QXkwOUNrSDZkSHE0SGMKT3VIVFlnVWVsNUNxQmcxR1R2ZDFNUndmZDREZW9tb3p4U2E2TlFJREFRQUJBb0lCQVFDbUVIUGl4VXc0UVVTQQowaDVLdFEwZG9aVlRjQ3c4SldVV1U1UzhCYXM3VGpqdHY4R0NQU21qZFdZYmdqOFA5SE4vbGVlb1dYNm9TUlVtCjExU3cvSHZvQTNlUmVFNkJRYjVkbm5RekhBYk9DMVIxaFFFNG9yTHptdjd0WDM3RmxHV3R5M1I2WXNnRm9zUHQKcWFaMjFlcDNSOElaTjBzakFqTUhGV2VyeHpHcys4anVzbDVWSWRSdFpETEJmeURGTHU5dzhmVDJGYTBTMVo5dwpDZUVuZk5zZUl0ZForZVpwQ0tjRmxuQmppNnZhdFNTOE1xNlJ4MXRISHZOaTk4bDIrVjk4S0h5MWc3eXJqSUlpCjBXODJyQWJGU3pLZ1VjZTNSZUoxdjVzdlZpRHZjVUZ0OHJMSUlwU2o3Nmhvb3RyK0NRcUJ0cUpTMGx0R2FOSTUKWVV4NGh5d0JBb0dCQU5iMDdWL0xKa2s5eE1DNWNtK2MzdTZyVWpjMndwRXRMbFN0Skp1QlBVTVEwLzBTWWQxSQpYY3hmWm9lS2w2SzJaQmhoTXREbVZHaCtXVDBNYlpYSjh1L2xmYUtZUGlzbEZKdVo1NVNBS0JsWkdteThxQThiCit1aHNpbDhZL1FSR0h5T3pSL2VHY2lXM1ZBU0YzbnZqQ0I2Q051WEh0K2t0VGIyUkIzU09jaEJsQW9HQkFQUEkKSlU2TkRpYXhFalN5dXFLSjNYd1FQdGVnTmxsNC9VbzBpdEhGRDVLaTFoTmRndTdVWm9udkttK0tFUWFGYWQvWgo1ZGZsVjFpZnNJNnNHMTlNUVhTclozN2VMaitrbnN6ZnNPSDFKSXFVQjhHZXB5Ry9aN1p0M0JGSjlWMjVQZktyCkt0NEcvdnh5TTUrSmwxcHVDVm42TXhqMUhnbnpSN3ZueEk3YzhCMlJBb0dBWkhvMGd2U0l2dSthaXFPa3REdFYKa2FhUFZiUEpHdWROb3RNVUs0UXJ5SytUQjlhUjNFZTVZSkN2Y21mOEhWaTRUUlVTRmNlMGFPdTJkdXphUkl3VApmTU4vQ0lPMWU2Rm5rcHhNUFlQeU9uY0YvUkhxVkxXMWdQTkxjc3hSYUxBR1dqK3hRaWljTHJrVkV0QW9nU3hNClhVWnN0dGUyUmM2aGFoemlxVDcwWG1rQ2dZRUFxUkVXWm5yRzVLaUxFc2NkVHBwRVk4VTBnQUJaa1FXcXpDclMKVjViT0xRa0haSmpHdEhIVHh6ZDUrNjhLRGJhNjdZZEZzc3dZSHB0cExCbEtSbll4TXdPb25FRGtYRGtEOU52eAo1Vk5KQzE2TVhvaDBLcUIvQWZNQTIzQ3FYVnlhRE5FT3dycWhYbHlwVnF4cXJrbC83TW5yWkJTaXg0M1VJd29pCnRGMmZuVEVDZ1lFQWs1MFRDekxab3B0REdDeGNrUk1ESE04djJoVTlhRHBYWU0vN05OZ0xZR1hIQjVNVWNCN0QKdHYwNmNPTzk2RkgrTjR1N3lsZ3dOdjdlSU1oaXltUWkxNDl4TmNTRElDeWdXY094NU9pU3krUHlwVDdkckxOMgpoSjNlRno0TG1BdUNPdktwNld4emhqYTU5ZVJMQlhBc2tlaTBBdVpsNUsvL1YxNDh2bWxrNjJNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.6.35\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/981643258130/global/instanceTemplates/gke-redditmobile-canary-west-default-pool-348ddeff"}, {"key": "created-by", "value": "projects/981643258130/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-canary-west-default-pool-348ddeff-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary-west-default-pool-348ddeff-tshs", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.199.121.134", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "1Iej4_2zrcY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-canary/global/networks/default", "networkIP": "10.138.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-canary/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/instances/gke-redditmobile-canary-west-default-pool-348ddeff-tshs", "serviceAccounts": [{"email": "981643258130-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "X2sEFXf0JF4=", "items": ["gke-redditmobile-canary-west-09543119-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a"}"
organization/660570133860/project/pso-cicd8/instance/1185328959257204496/,instance/1185328959257204496,project/pso-cicd8,1185328959257204496,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-18T21:58:23.299-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-canary-west-default-pool-496ebc1d-skhx", "type": "PERSISTENT"}], "id": "1185328959257204496", "kind": "compute#instance", "labelFingerprint": "cireh9PCZXs=", "labels": {"gke-canary-west-69bb2963-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "taq0rcmX5S8=", "items": [{"key": "cluster-name", "value": "canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQUtjYjdIK2h3VlBvRUJGalJsZVFZQm93RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE1sb1hEVEl4TVRFeE9EQTFOVGd4TWxvd09ERTJNRFFHCkExVUVBd3d0ZFhNdGQyVnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdGQyVnpkRUF4TkRjNU5UTTEKTURreU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdHJ6N1daQ1cyQk42QmFjTQo0NXV6bGJOOWc5T0o1d3FKSWZKeDVoZ1RPQ3FCWW9tdmJVTWdGQ1JXUXFMcUlobXRyMzIzSktFdHBaTjc1dk9aCkVQMzZ4VzZ5NzFGam9GM1BsMThMcmtzNEEza1F5ejU1VkVYbnFPWm9ET0NHVS8wTEI0Ulh6ZEhaZU05VzdJWlAKM3lLeGVKcHNkMXBWRGgyNjhXdGhiS3dUMWRYenFBTWtjVHVrTW1EQmtsL3VoY3g0VHpxVjlRcWhKM1JTaUpMaApEY3lpem4vYkpYU0swNmpaYUtoL21zV2pSQ1FkMFplbkVKWWFyOVRJQ3Vkbms4eXo0YUZxWHAwOVkyb1c3SGlDCmQ3cmlPMTR0RnVLUllCNUU2WEtucHVVZzdadVVuVmtESFdSS0tONEp5aXU5N0tEZmJuZ2M1cGk5SzM0bFNJN1kKNGxaWFB3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFOMnlpZmIxM0VpMisydFRoWEkvWWtPelBERE5DeCtEVVNLWUxpVTRGCnVuUE5ZMVEvMCtwWUxPQW1DNysrekxmS1U3a2xuT2VCWUxiUHlmdW8wQzl3QjI4SFVQWVZkb2hKY241bExVU0MKYVFaRm9qTTgrYzAzN2ZuNVlCTFoyelBJSWhmKy9vaVhkbis2TDR0aHR1YUVVdmtBZm54Nkx2MUt1Ryt2dWJIcQpQZjJoZ1Vob3VrRnFWN3M5OVcvN1ZjT0djRWYybkxQdisvSTNqWjlJSkFrUm8vaFFtUHlWeHgzVUQ4LzlTUlV6CmhYc21NdTRPQUxVMnJ0aVRLejlhaDV3TEN4Q0dNTEhRRFFkbWRJUC94MG51ZmkrOU4rc0R6M1hSYSt6c3F2VGIKQmVVN21sajJleE9RZnAvM2dKbGVPRk5mT3BsNW1FT1FKK2hBbzZmdWs4TVBFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.44.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.47.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:02+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-west-69bb2963\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: qj61a229MxXzLhQ5LDHaDFU_rc8q7AcI41OGzPI1MyE=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZLZ0F3SUJBZ0lSQUxZb1dwWmord3VLdS9VVFV6WnM0b0F3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE0xb1hEVEl4TVRFeE9EQTFOVGd4TTFvd0VqRVFNQTRHCkExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPQzYKUktnZU5YeGZJYzQ1MjZUMjBzWWF6YkdwNU9JM0FIWjFyTlZsQnQ3YUE3OFFmQ1JOTzdBVGtkb25BMDRHZjlMdgpZb2RsamhxMVBTcVN3WWFyV1lrNHdOL205R1kxQ0RpS1NSQkQ0cERhcWJTK0VsK09JYlVudmo4c1gxMHh0ODFQCkZ1SWtOdW5iNGtpb2tJTXZSTU9IS3VKMktOa0VyVW5tb3EzREZoa3BPT09ET3VUQTVzNW9OQlp0bjhFa0JWU3kKRE5BV1A0SWs4WEladSt1RDRyekNodUhLVlNLV3dwdW5ERFNZMkZ5b3BXQXhCQkJERVZ4YkJpbWlidFVURG00VgppVGdKVXMvbnUyK0trYXN4a0haTUV4N1RxZVJ5ekRieFBkU1lkbXRkS0hjSG5JRFd4WWhWR3dkYkRzanZMcjJSClQ5cm9CSDRNdmErKzZaTlhPNDBDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUE5dgpDT0d2V0IxMWZPMmc5aTFLK0srMHh2SWNtUUlRTFY5NUZZd2dVcDJNOGdSZTEvWGdqVE1CbkNpNFFRU216M3ZsCmd3Y1RseUJLY0Vxc3ZoZFZ2S1VWVmJ4YUtsRlV0ZXJFUTlDc1JwMjlZbjJtQk9NUFBpRGFVd3cyUU9GUkwvYTEKNEVES2JwREFWbGt3UFVqaXd4Z3ZmWFV6SVVZb254RE0raGw1ZkxhdURTNnhETXhIbVgvZ3dOSlYwVWJqMFVYZApwVXJqR0hxN2V2Q2lCTTRaM3hFWjNjQ0hmb0Z6WVNWS0RiWVBMQ2tVQ2hvdmhQMU55SVRBL2FuYUgxQzk5K0ZLCnpKaW5DNXo2UVZSUUJLUlcweCtHV0F3UUNkSWEzVEdMU2RJYVN1YzZXT1E1UzFFdTlGdjFDQ2kvME5oM3JHOWgKWFlVNTN0bnJRQWppM3RQUkQ0cz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNExwRXFCNDFmRjhoempuYnBQYlN4aHJOc2FuazRqY0FkbldzMVdVRzN0b0R2eEI4CkpFMDdzQk9SMmljRFRnWi8wdTlpaDJXT0dyVTlLcExCaHF0WmlUakEzK2IwWmpVSU9JcEpFRVBpa05xcHRMNFMKWDQ0aHRTZStQeXhmWFRHM3pVOFc0aVEyNmR2aVNLaVFneTlFdzRjcTRuWW8yUVN0U2VhaXJjTVdHU2s0NDRNNgo1TURtem1nMEZtMmZ3U1FGVkxJTTBCWS9naVR4Y2htNzY0UGl2TUtHNGNwVklwYkNtNmNNTkpqWVhLaWxZREVFCkVFTVJYRnNHS2FKdTFSTU9iaFdKT0FsU3orZTdiNHFScXpHUWRrd1RIdE9wNUhMTU52RTkxSmgyYTEwb2R3ZWMKZ05iRmlGVWJCMXNPeU84dXZaRlAydWdFZmd5OXI3N3BrMWM3alFJREFRQUJBb0lCQVFDRzJKNXI5cnlIWlpvbQpZZWRmWkUveldaQUZ4SGs0R0dMcHNoREVkM3VZNjE4R0hnRXYwencybW5lUlhJbUtIekpDUXl4dkxFd0owS2prClMrMWVQcUZhU3JqSllZOVRhUTBHeUV1eE85ck9xcmJjWXBVcHkyS0VqbFdGR0w0Y2NNSG1xMGVDNk5JZW43ZDMKZTlaRE1YRGtsczN2MTVFSkw5by9sdW9VdEJRbGdjdWtiZkRnRjhQQUhsV1JWT1BzTmdnT0puNEl1cDdaWnJOMgp5WlVJaEJ3UU9iZk5uQXpOanI4SFVtYzBUSlBWTjd2cDdpWmFvcm91d2U1UkFabDlLNWNvQk8vaDBEMkl4Z3hyCjNZMEVSWnhrUXdqR2lHaUdTcnQ4ZkJtajFmQ3hQMkVxQWV6UUlibGg5SzNyNWFhMHZwMWpvMDZMY3h0NzY0TlAKQVFUZ003aGhBb0dCQU9WOWJDYllFcGk4ZjN0RDI3YklndVRIOFlpdTFiMGNWZThnbEFzQnNia2NwNS80QUNxVgprcXZLNDY0eHNuclYwMlBFdnZ6UkhCOGU4VTNHTlQvT3ZYblFuODhJRnFtSUVVNzkwN2JvVXcwSlRleElsT2FECmRtN0RadG5PbGwyQUNIeUxUL25OQ1ZNNUhOZzF4TXJUYlNHL201eVFJNG1MalAzY2s0cFVrbWFaQW9HQkFQcXcKQXlMN29KMmlWN2VPSjZrN2liajFFMHRTenFlZTh0UEFFb0FZWjQ5YVMzcDArbFIydmdBT2ZKMWQvbUVid3dQSwp0T0JMQ2VHRStaMFVlQkpLcis5bmJ4blU2YzQ2L3hIaTNMckpOS2tVWHhIMmJiNlRsM3U0Z2poVWFtVVFWUkRrCmdQcmd3WTVoekdtK2JtYldFNHVNWjJNalIrOGw0WjN4dVh1aUd2a1ZBb0dCQU1RR09sZUR3WDdOcEdiNk03Y1IKMXh6czNSZlBuNnNGaFRIWk5odWd1dHBQNjY3cys5ZGtKQUN5TVlFZDJrS3FXd0toa0RJTHZHV28zSjErYlFXdgo1cEVpN3g2ODNmNjV4MjhkeWJZM0JKbmlGTGw3MWhTQXZxMG1JN2h3aW1nYmNTUlJLMk5KREdvV0l0bGNORmk3CitFQVhseWhJeHRJNmJaaDZ6VndmbVY0aEFvR0JBTENNZ3prQTg2WHdya3dVYm5RdC9SbG9aL1UxVlZzUmd6eUQKMmNPaTdGUTJLRkFPMERucUFuZXh2Q3RzQmZuSC9uak9Lc0tIdG1iQUtyZG9zZ05YM0Q0RG4yZ1czYTZqTi80Vgp3cFE5bmJ1eUlCNWJhZ0M4bXdQRDl0bkxBYjg1V0Y5MFBpM3hXZjkzZXVuQjlxaXYvY1hhMVBrcDRNQlk4bU0wCjJRZHNMQWpkQW9HQWRXcXcweHNrbnh1Vk9yajhjSTJSclNWcnc5c3VieUYvQXpoR3g2UEFnd2taakc0MGVNVTcKZlZCL203bXIrOHREYmF6V0Jxa3hwUWxBUkk4Q3VGeVduSjJ0cUZaVlE0a1B3bzRkem1aRW8xSE51MzN3czM0Zgp0YUJhalFiMWh0czVlZTYxcXIwYWNVd2I5RDE2VUJmM0VNc2Y0ZndwRG1tSHRsa1lHdjNIYTRrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.229.72\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.47.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-west-default-pool-496ebc1d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-canary-west-default-pool-496ebc1d-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-west-default-pool-496ebc1d-skhx", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.234.66", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "oqzZm2-d2SA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.6", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-canary-west-default-pool-496ebc1d-skhx", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cireh9PCZXs=", "items": ["gke-canary-west-69bb2963-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd8/instance/1339889323114650414/,instance/1339889323114650414,project/pso-cicd8,1339889323114650414,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:29.407-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-prod-west-default-pool-75f1642f-t4kv", "type": "PERSISTENT"}], "id": "1339889323114650414", "kind": "compute#instance", "labelFingerprint": "h2CDrYm_xXo=", "labels": {"gke-prod-west-9cf5507e-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "u9PNIVkqDmM=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRR0xRNHZ3ZUNlWmVWZmtwc2JYeGZXREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdGQyVnpkRUF4TkRjNQpOVE0xTVRFMU1CNFhEVEUyTVRFeE9UQTFOVGd6TlZvWERUSXhNVEV4T0RBMU5UZ3pOVm93TmpFME1ESUdBMVVFCkF3d3JkWE10ZDJWemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMWGRsYzNSQU1UUTNPVFV6TlRFeE5UQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOeUFJR1lkMTEva1RaVWt4WnBqd2JlZwpvWmgrQ0hVRjZ2NTAxV3dXRHIzY2FHV3pEYmRvOXN4WWxtSmpvZk5ReTdPNDNXMXlqQWRpT0xSY3NjTjF0Y2ZpCjNBTkFuZGxiVUNMbHdXTDkrTTRUNjF2UlFqSUQ5MmtkRHpTMjJiV0dOWk5zemNWa01aSDhGSU41L2I1aFFnV3EKTGFIT0cyVkxEaUxKUjNyby9obnh3YkhFNEN4Vm5VZnpQTnJqU0hKcHdhV0hzVEROUVF4bG1FdmE2WEdndXRUMAp4ajhLQURiUTEvdDhQZlJrdEIrOVhXOTJ3VytQRktucDhHTHNsMHNmM08vUGFCMkNWS2pwMHVISktlV0YrUUVuCnczTkMwMVNWUXJRbWl4NllkdHdaeDRhNkhKUFYrZ3RKNTF6REV2R0VqenVCNDVvZWtxOW9ZR0krVlRrNDJhc0MKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUFaYVJFSytFMFlIcU92dTlpWmZWNXo3cUhkaEFXTzNCZm41UWdtWFlOT2xlVHMvCkRROUMvdDJxdWYxOWk4aVZ3ajNoVzQyRm1PL000cVJVOWxqZWlmTm1Tei9UQUYxZTlHb1lxVU4xWTBUTFJFQ0gKVGtUUnc0MW9SRXdMYU1KajAwODhaZ0ovaGRlZ1ZKTkpZbDdIeU9Jc0FMK3JyR1JsYms4NkdId1hYdHQxRzdDdwpVZEhCVXFJMU1ENHQ2V01TNG5zbDdVRmxXV0pXYURoRHlqdlVoK1gxUWg3Y1YzYUpPRnJqcXFIQnZiY0hEQUpOCkV3ZDBBVUxoYkVQQnRqeVRNZWl1cFMvMDNpTy9YRzA0RC9NZUlMcURlQWpZaDFvNGsxVFNWVm4yRllXcUN1MHoKblludTZMaXhUTFVpUDdOOUhuYWdGemp2cm9rR3R2YXQxaVFxeXBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.120.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.123.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:18+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-west-9cf5507e\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: Z_vlAxXbJ1RWwVZ4bimoPobeEpu9OxYV5V8hLL6SLxU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQWZDZ0F3SUJBZ0lSQU1nNThMWVo0UUc0ZlNzekFEQ1NHZ2t3RFFZSktvWklodmNOQVFFTEJRQXcKTmpFME1ESUdBMVVFQXd3cmRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTF3Y205a0xYZGxjM1JBTVRRMwpPVFV6TlRFeE5UQWVGdzB4TmpFeE1Ua3dOVFU0TXpaYUZ3MHlNVEV4TVRnd05UVTRNelphTUJJeEVEQU9CZ05WCkJBTVRCMnQxWW1Wc1pYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDWmc0bzQKUVZUM2JCRkVsQUl4cSt5ZGVlcGgvbUVhWWFjaVFZZWkrZ3FZZllweUpJWCtQODd1eUl5d0lJUmo5dnVnUGZVbQovbFNjTkk5QWptdVY1bEMwQ1QwSUY4OEMydDB5dTFjd3VrWjYvb0ZPUmErN2ZkZ0xYbG8rc2cvMDZGODdUdFhICmlhY3Fibk9vOFJPdVRpZGlZTitrR0Z2djFvamh4T09qcU5yUHByWEVjY1FZTDEzelFsYTNDSWZhcXY1c3B4Q3oKdk9OTDBpdWJZWHJBRVFqQ2lkalpvaUJWcW9weTVaY1dNL3FKLzVqYm1DMndZZTI0NGorTG1JZzUxWDkrZjgvRwpVTURrSktuc3I0TjNHNzhBaFhETGF1UnpaNXhEdEJmWWFFaExSMjVYV2JpczhRd25lNTVraDBYWkQ0eGZVaVdDCk91N2FIYTJLMFQ3Uzl4Yy9BZ01CQUFHak5UQXpNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURPQW44VwpabUtMREZsaVlocTZJeDVuSUhSWjg4dDRKQzBZM0RKRlUvZUtVSEltYTE2NXp1WDI4Y004SXl6L2ZwbmQ2cmVwCi94WlFxU3Q5elQ5VlcydHhCcHpFenRJWXBOYUR2LzdMT09OdXFJM0pJc0pIVm5USU9iZTlTNFlOd2VBZWhrQW8KV21SbXliWk1xdkc5WVNhSE5lczFIMU1Kb04zV3lkNHBmT3hCaW4zS1RBeDUvUzNYdzRWbGlMTmVCYjI2djdvNgpoL2hRcDFJbHUyblEwdFZFQWlxR2lpMmpyU1Yvajc5THBPMUVLZ21BOUk3OXZUZXBKUGVuRkJKbElFdHVMd2NyCklYYktGbTBkWitBcERBOURPcTdhZXE5OUN2RGc0MVhwMjFiZ0tRajdodWNrWHA0T3NXV0xXWG9kckJhMG9TY2gKd3dzS0lYbk5pUUk0V2lYWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbVlPS09FRlU5MndSUkpRQ01hdnNuWG5xWWY1aEdtR25Ja0dIb3ZvS21IMktjaVNGCi9qL083c2lNc0NDRVkvYjdvRDMxSnY1VW5EU1BRSTVybGVaUXRBazlDQmZQQXRyZE1ydFhNTHBHZXY2QlRrV3YKdTMzWUMxNWFQcklQOU9oZk8wN1Z4NG1uS201enFQRVRyazRuWW1EZnBCaGI3OWFJNGNUam82amF6NmExeEhIRQpHQzlkODBKV3R3aUgycXIrYktjUXM3empTOUlybTJGNndCRUl3b25ZMmFJZ1ZhcUtjdVdYRmpQNmlmK1kyNWd0CnNHSHR1T0kvaTVpSU9kVi9mbi9QeGxEQTVDU3A3SytEZHh1L0FJVnd5MnJrYzJlY1E3UVgyR2hJUzBkdVYxbTQKclBFTUozdWVaSWRGMlErTVgxSWxnanJ1MmgydGl0RSswdmNYUHdJREFRQUJBb0lCQUNobmI1eW96VlVsczFISwpadDF0ODZQcTc1NkZGa2VjUmlJRS8wOE00bmNLSzhNcEM3OUVTaEdjNVRLQ0RIWkhEaWs1eFdsUzdUQUR3V1JyClY3T25YN3hTNWlaWUpkc0pnY2lWZURoUi9yVG1nVi81aFd3aWpoZEg2UmF4UlBQZnFSanlBZUEzd2JDd1MyNisKck1CbXY0VHNIRkNUUExkZVRyNmxWSWpCcTMyVmFjMUN3Zi9Nc3l6TkZDZDJVc2xGMFl1TC9KV055UkE1MTJRYgpzL1Nzb1dZN0tsYXdWY08vMldBVHJEN0tuQXdpWWNnb3Rzb0R4QnVTbmc3SGpxRUxXZHhSZGpwc1M3SnlTWXZGCmgxaVhSc1A3Wkc4ZU43b3Q4bWlyUHlzbkxSS1NnWE9nK3AvQXFCVFEzdmJ6QkdTY0thQnd6eDVzUThsZXptemgKMVFXT055a0NnWUVBeGNkZDVpRDVzUDJWQXFLaFVTdzMxMlNxaTdUY2FTbUY5VFN3bVdHaWFLd0FlYkYrY2xJegpjV24xR2VTeDc0VVZCQU9jYmlnNlVtdkFGaDFIeitDR0dNVWtXSHBkNFhtT3VqTHpybkNLOHVSZmVaTitOYWhTCmYxRG56SVcvMGQ1R1RJUUNTdFo0U3picmJJSVZpTkw0N2l3T2l4OVE0NXVYZXJJdEVKd1VxUU1DZ1lFQXhyUmMKY0JZUnloWURScUFWYnY3dzJPcFBlekUycXNFZUMrVmdSb21SUjIxbEtqd0FoMHA4dkZZZE95L0dFRkpIUkhnaApTRzd1VFZIQTBvTjRWemV4MFBiSC9rdk9zQUIwYkxDSDZqOUQrUVF0VWlUMlhKaHl4TWY0Z21EeCs5YllVVnhXCklsUVpybzhacU5kalA0QWJQcmRnU0lSK3BlMVkrdE1Pbi9CSHZoVUNnWUJiUXdpNEpTVXluNEMvNjQxbXFISEkKQ1dLTS90THFEOGdKZ3R1dW14ZlhGdTlOT0RMeHk2NkRPZkpvbFZmcC8wM1lRVlpRbW0xM0ZOTlpJUCsvRTRxdApLV01CRk0zM09pRTdHRUhMajVEK1RaVWt3NE5zZlJROFBYZ0lydnI1ZTRpU3pDTkdwenB3OHBHbHkwem1pdnRrCjQ1MStZdC92ZHg5cDlZZkg3MDIxUXdLQmdCQ1J6N2VGRDV5emN6aDdkdTRYa2t2MFZnWm0xekVzQTI1b2hUdTgKa3dIS3pJbldFUkUzRSttOG9KbGo1WGRNOVNadmdnOEJPUnYzZWtYVHNzQkxJNmZTUEdFblB5Z01FYWxTbXpMYwpiYldoTklwS0RNVXg3VGdkbU1wK2ZROU1IaVBDdUdnS2JVM1NId2ltVlY5aE5tUm5kRDczMVh2T3JBSFdnYnl5Cms3ajFBb0dBZTVWNWM0OUZZV1A2bldLZmk5NmQ3NGwrMmk1c0JlOUtsSVBCUlYwYkxPSHIrRittRFpwRnlxQmIKY1JzbVJPN05pdlBDRVhmY0tYVko2L3IzN3d1NURyTmx1Kys1cmJaSm4zTmpEd0swRUwrSVQ5L2tMaVo1WHhiawpGdmdtMGpNU2FVWE9IVmhaUTBCaWgxZzVlSWtqWWhoVHZZM1d4Z1g5cGwvdEx3Ni9tQWc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.232.221\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.123.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-west-default-pool-75f1642f"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-prod-west-default-pool-75f1642f-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-west-default-pool-75f1642f-t4kv", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.11.86", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "anoTjTq93PQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.26", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-prod-west-default-pool-75f1642f-t4kv", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "h2CDrYm_xXo=", "items": ["gke-prod-west-9cf5507e-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd1/instance/1468865533155775826/,instance/1468865533155775826,project/pso-cicd1,1468865533155775826,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:18:21.566-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/zones/us-west1-b/disks/deploygce-v001-7eao", "type": "PERSISTENT"}], "id": "1468865533155775826", "kind": "compute#instance", "labelFingerprint": "k1a6Q_pWxD0=", "labels": {"deploygce-1479280063410": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "bvJaveC67Fc=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"UTILIZATION\",\"capacityScaler\":0.53,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":null,\"maxUtilization\":0.8}"}, {"key": "instance-template", "value": "projects/949312956399/global/instanceTemplates/deploygce-v001-1479286847109"}, {"key": "created-by", "value": "projects/949312956399/zones/us-west1-b/instanceGroupManagers/deploygce-v001"}], "kind": "compute#metadata"}, "name": "deploygce-v001-7eao", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.199.122.164", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "RysfSPx5GoA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/zones/us-west1-b/instances/deploygce-v001-7eao", "serviceAccounts": [{"email": "949312956399-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "k1a6Q_pWxD0=", "items": ["deploygce-1479280063410"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd1/zones/us-west1-b"}"
organization/660570133860/project/steady-circuit-182208/instance/1483904520068591107/,instance/1483904520068591107,project/steady-circuit-182208,1483904520068591107,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-10-16T17:38:04.811-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/disks/forseti-security-20171016172836-vm", "type": "PERSISTENT"}], "id": "1483904520068591107", "kind": "compute#instance", "labelFingerprint": "So8CViVirkw=", "labels": {"version": "1_1_6_pre"}, "machineType": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "a1wvgt3Fsns=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=steady-circuit-182208:us-central1:forseti-security-20171016172836=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.6 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://steady-circuit-182208-data-172836/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://steady-circuit-182208-data-172836/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171016172836-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "OJh55e6Csns=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/global/networks/default", "networkIP": "10.128.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/instances/forseti-security-20171016172836-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-172836@steady-circuit-182208.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c"}"
organization/660570133860/project/policyscanner-carise/instance/1550169006388898008/,instance/1550169006388898008,project/policyscanner-carise,1550169006388898008,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-05-05T12:44:56.615-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-8-jessie"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/disks/www1", "type": "PERSISTENT"}], "id": "1550169006388898008", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "IHdc5E0qETI=", "items": [{"key": "startup-script", "value": "#! /bin/bash\n      sudo apt-get update\n      sudo apt-get install apache2 -y\n      sudo service apache2 restart\n      echo '<!doctype html><html><body><h1>www1</h1></body></html>' | tee /var/www/html/index.html\n      EOF"}], "kind": "compute#metadata"}, "name": "www1", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.160.186", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Gu782v14eDU=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/global/networks/default", "networkIP": "10.128.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/instances/www1", "serviceAccounts": [{"email": "534416047782-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/servicecontrol"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "9GVlO4gPawg=", "items": ["network-lb-tag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b"}"
organization/660570133860/project/henry-rc2ddd2/instance/1572473982683741331/,instance/1572473982683741331,project/henry-rc2ddd2,1572473982683741331,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T23:30:21.543-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/disks/forseti-server-vm-2025", "type": "PERSISTENT"}], "id": "1572473982683741331", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "OZ3BO6-JhtA=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"henry-rc2ddd2:us-central1:forseti-server-2025\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-2025@henry-rc2ddd2.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\nchown ubuntu:root $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-2025/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-2025/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-2025\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"20 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-2025", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.90.131", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Axf7MqlFA84=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/instances/forseti-server-vm-2025", "serviceAccounts": [{"email": "forseti-server-gcp-2025@henry-rc2ddd2.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c"}"
organization/660570133860/project/release-testing-1-1-11bbb/instance/1751876196861881137/,instance/1751876196861881137,project/release-testing-1-1-11bbb,1751876196861881137,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-06T08:44:30.829-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/disks/forseti-server-vm-3520", "type": "PERSISTENT"}], "id": "1751876196861881137", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "iSzdcBiHc2U=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"release-testing-1-1-11bbb:us-central1:forseti-server-3520\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-3520@release-testing-1-1-11bbb.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\nchown ubuntu:root $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-3520/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-3520/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-3520\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"33 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-3520", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.6.64", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "FVFOWNBZnek=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/instances/forseti-server-vm-3520", "serviceAccounts": [{"email": "forseti-server-gcp-3520@release-testing-1-1-11bbb.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c"}"
organization/660570133860/project/steady-circuit-182208/instance/1928505799248053289/,instance/1928505799248053289,project/steady-circuit-182208,1928505799248053289,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-10-09T11:07:03.344-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "instance-1", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/disks/instance-1", "type": "PERSISTENT"}], "id": "1928505799248053289", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/machineTypes/n1-standard-1", "metadata": {"fingerprint": "7E3dJnOhqHk=", "kind": "compute#metadata"}, "name": "instance-1", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "QNtc4XkReDE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/instances/instance-1", "serviceAccounts": [{"email": "443692541869-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c"}"
organization/660570133860/project/forseti20-marten/instance/1938651547030380082/,instance/1938651547030380082,project/forseti20-marten,1938651547030380082,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-16T17:27:10.517-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/disks/forseti-client-vm-0830", "type": "PERSISTENT"}], "id": "1938651547030380082", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/machineTypes/f1-micro", "metadata": {"fingerprint": "D-srIut9qbA=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc1 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-0830/configs/client/forseti_conf_client.yaml\n\n\nsudo echo \"export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-0830/configs/client/forseti_conf_client.yaml\n\" >> $USER_HOME/.bashrc\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-0830", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.27.184", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "2acTkS_48Rs=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/instances/forseti-client-vm-0830", "serviceAccounts": [{"email": "forseti-client-gcp-0830@forseti20-marten.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/201181450132758664/,instance/201181450132758664,project/cicd-prod,201181450132758664,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-08T10:50:15.810-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-prod-east-default-pool-5adc0ee7-pgq5", "type": "PERSISTENT"}], "id": "201181450132758664", "kind": "compute#instance", "labelFingerprint": "UkEjw7weYjQ=", "labels": {"gke-redditmobile-prod-east-1325891c-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "dK-rpqn48TU=", "items": [{"key": "cluster-name", "value": "redditmobile-prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNekNDQWh1Z0F3SUJBZ0lRSXV5VUZ6bXFwTVZpai9lWGw1VGZYVEFOQmdrcWhraUc5dzBCQVFzRkFEQkQKTVVFd1B3WURWUVFERERoMWN5MWxZWE4wTVMxaUxUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxdwpjbTlrTFdWaGMzUkFNVFEzTnpFMU9ERTRPREFlRncweE5qRXdNakl4TnpRek1EaGFGdzB5TVRFd01qRXhOelF6Ck1EaGFNRU14UVRBL0JnTlZCQU1NT0hWekxXVmhjM1F4TFdJdE1qVTJNakU1TkRNMk9UUXRjbVZrWkdsMGJXOWkKYVd4bExYQnliMlF0WldGemRFQXhORGMzTVRVNE1UZzRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUF4RW9lRlZsS2VGVnRyUStVQ3NJY01kbDQzTjlUaGNZcU10YU0zNkxYN3Voajd5OUFOTndpCnlSemdTcnVQK0E2YlZDQmpHa3E5V25pcVYydEw0dFBwQXc0QWozNHp2QmVvWUJDVE5EU2dLKzhHUU51bEtoangKcS9jdlJwMThaWWpnbTcyRTBXQUJHN0RZNUR1dDRxazlEYmIvSTBPQUpVOU9xYkp2OE84d3RPY1UzM0VUd0xnbwpGL09RWEZWYWJzaUMyY1pnVkxGTWlkT09aYmljN2NrcncrRmgzeWFYek1FOG5KK3NQNm00WnJtZ3lmL0MxVnFtCm9EVldZaWYwWU9PUFNJaEVXQ3VDS050RFE4ODdPY21rWmlOZXZqNms1YzRHK3U0R1VubkE0NCtXQWY5eGVubXcKMkErRlhQMkYzMVZqL3dwR3kvUng2bGNTR1RjQlFGNCt2UUlEQVFBQm95TXdJVEFPQmdOVkhROEJBZjhFQkFNQwpBZ1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBV2hzd054OW8wU1phClZCbHlUUm5CR1VyT3M2SkFmM1RQaGplZS9JZi9UWWJuNGdTV2EwbFNGOHo1ajQvMnpLQWVrbmcyNGxGeWZwdngKZDhYVWYvUVRKd0U4RzZrcXcrVmJlZ2Y1WEdiS2ExUmNTN1ZWV250Z3ZlODY5MVk4cnh4SjJudUpkVC83Y2dGUwpIdU1USGZ3OWJVRFg2TkFmZGkrcTlQSFVrMytoZUZ6eW13LythdENLQVZpUVpBNnNEUGhESlk0Vm5jcjdQNGorCmlYK1pWTW5jUjFibUp5NGE0eDhhWFdYcTZaalY5Z2pGL1VpUGlDVHpaRzhuNDhNYzFDd1lRL0k0NTVLeCsvS1IKNmpQODAxNlBLZ1p4TzI5TXNpakdaNU5vRDlpQzlVTWQzeXBXT0lpV0dCSG43V2w0aXBlajdtRUJVT0Rma3lucgpzZWxacTh2M2h3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:01+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-east-1325891c\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: VxapZpZNKAFLBBTKxwwXjFfd-yQeeACylgRYq3yS4GI=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQUw5RkRMYmZhUFV0VU5mVVZ6U1ZKUGN3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxbFlYTjBRREUwTnpjeE5UZ3hPRGd3SGhjTk1UWXhNREl5TVRjME16QTRXaGNOTWpFeE1ESXhNVGMwCk16QTRXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlZ3F0bgowdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFBhU2FnCjVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eXduYmkKd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1N3pmQgprclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3NEVS9hCjVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFtTWxsL2N3MmFDUUN4TDlENTVLMitQRENPNkJaNnAwQnQ2Rkk0S2duQk9yeDQ5YWpJa2lTCjI4ajNjc09MbmdzaDk4a1ZjOFpaRFVmcmd1RHo1ams0ejRvWW9IU3NlYmdlclN2Q2tPTThrR1ZGQURaUWxCd1QKVGhEbjFRNUhoY1JvUXdWU2lNQ2swTDVtMHZjTG5YVklWT2gwNnN0R3NQdkRpSlQybjRCVk85MGZmME9uK3JmWAplUkJaQXR2SGUwZ3QvSUtjaFI5eERITXJvNEEvdTh6TVhKM2kxeGl4aDR6MndOV21Rd1dKbzBDUHBFUGtDQXEzCmxOT3Z4MndsVHEzaWZiRFJsd1MxOEZIMmF1R0xzRjloUW9oR2hDWlhTY0JldEZCMnB5R25WWklTdE5RR0o0S3cKYm5RRjE2TThQNEtFdnlWVVE3aER0dGNCZHdueFZHd0xOZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlCmdxdG4wdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFAKYVNhZzVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eQp3bmJpd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1Cjd6ZkJrclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3MKRFUvYTVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJBb0lCQVFDb3k5YldrUFUzckEvRwpLZzNwQ0YxUkkrWWFPdGJJSDBldC9RZTRNSU83d2JLZzBzTjNWNW5TNk9GdkxSSTNmTkViSklSdE4xNkRCTjNjCjYyU0ZNMGlhUHo5TmQ1SVJNbytyQytkbXM3VVpYTlJkV09xcTRqTDhOelg1V05UOEtMUDJqbXZGMHFGc3RzbjIKY0l6UzdUYzN2dVAxdENMTzFUcTlEdDhTdGZRSFVWN0ZOdVFVdjhmUWFCSDVpRG92NnpSWlM2SUdrVUtTNWsvOQo1KzdjNXpIL0c5amxkZjdPVnhmQTFBVVU4N2F2Z0JHTTlYNzVmTVVpNE5CajdFNFRXZThaNmtmTjl2aWo5R3dHCjVsMFN6djlFemdBa05pWU9UcWNCZElJZ25KSlROVjhmb2pXK2RLYUVXeUtCUkxTRHRIZUNQMk1vSEtyS3FmOW8KWGJoK2IvRkZBb0dCQU9uQk5uYkhnZGU5aXR6allxekhiU3BqVFhraFpRdjlEUTZJRWhrUkZqdHhDZEtpY3krcgo3VjA3ejZLMmZRUkxpUGxZWDh5dTFud1QxYmM4aWo1eWVCV3gzeFhrOHR6Y05wRkdSamVWdkhaTjZKTGlwd3U4Ck5LWVN2RkJMK1JORDRHRmk5R1RTcURQYnRKbVRmTHhpeGFnSnltREVDN3VVN0NBWjA2ME1oYVF2QW9HQkFQN3UKc2ZCQ3F2czZEbWdEaGF0Z2FrUThoWHBNaE1idDdjNHhWKzdxaFJrYXc5RTg4QUs5dXgzQUh0RnJaR2s4U080VAp0Qjk4bmdWcnRGTGZKOStqL29jOWdpT0Q1SmpTS0FGeE1zSzNwcHA4akJRT3k3elExV3lGRmlxTXY4bmRib0M3CmNaVXFWMklLMGxxVHQ3Ni9YUFZSb0JtTktGK2dMUmpmY05tNkFreDdBb0dBRDJNU2pMc1JSdnhKR2NVMkI1MlIKQ0F0RlhFWGdldXVMWW50K2hYdmtkTUU2SGsxbk82b2JrOW1PRDIzbnlOS1lENkhMbkpPZHRza3Zka0piNzBSbAp0emZnTVhiQ3Jkc3BGR01GMkQ3WkN3aVIyS2xteVpUMytqNmRlc09sZjZrbUtnTHpoM2QrYnZ0MVplNlpkV1VqCkVhNmpUYjlaN2wwZE5mZTlRVlRqcnkwQ2dZQkZvUlJndHhUVVFXc2w1YkJndXBqTHdtd0NsMXU4cWNmR0Jad3EKMlVzNUxDSkh5QWtWOXBSZzc5UjdCb1lLYURqVExmYUlreFRtRGlEV2NiVUdWRmgwdjh3SHYwSjBxeEhhTXZ6VwpTaXJyRHhHRGVQY1V2MFZMdXAzdlNUb28vSjN0ODBSMnBYWHdoVndtK1NtNm83SFVIMU5ISjFMYnEzZ2x6d0dYCnRrSmllUUtCZ0Z6MjhGSXVBaEFJeFlVeE1wbnhEeS93WHErTURiSXB4VkRJa0J0Mm5mMFA5K1dtVjZDVE1pMFQKNHlQd3FtWVpYcE9KU05ZdDQ1MlcvQzZ1a3RmNFBKMmtrNm03WVVWZC9pa0M0VWZ2UGZyVUpDVlp2VlZSNDZGRApHbStqWVhmREdmanNFOXRwTFpkTUN1MDNBVTgyeVAwYkN1NlI2OUZiQjNtTTdOQVBXdyt4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.40.126\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-east-default-pool-5adc0ee7"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-prod-east-default-pool-5adc0ee7-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-east-default-pool-5adc0ee7-pgq5", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.168.85", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "YozIL4FIzkM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-prod-east-default-pool-5adc0ee7-pgq5", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "UkEjw7weYjQ=", "items": ["gke-redditmobile-prod-east-1325891c-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/cicd-prod/instance/2078081853541769889/,instance/2078081853541769889,project/cicd-prod,2078081853541769889,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-12T10:15:42.561-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-canary--default-pool-bb6ef461-qlvk", "type": "PERSISTENT"}], "id": "2078081853541769889", "kind": "compute#instance", "labelFingerprint": "BCsawV--MPw=", "labels": {"gke-redditmobile-canary-west-157b3db4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "20N449Qj-Go=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPRENDQWlDZ0F3SUJBZ0lSQUtGenkvcmNMWjZwUXg3NU80dCtGeFl3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM09EazNORFV6TVRBZUZ3MHhOakV4TVRJeE9ERTFNekZhRncweU1URXhNVEV4Ck9ERTFNekZhTUVVeFF6QkJCZ05WQkFNTU9uVnpMWGRsYzNReExXRXRNalUyTWpFNU5ETTJPVFF0Y21Wa1pHbDAKYlc5aWFXeGxMV05oYm1GeWVTMTNaWE4wUURFME56ZzVOelExTXpFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQQpBNElCRHdBd2dnRUtBb0lCQVFEeVB3UkxpUnQ4QVBYSHhocDBKUTgxWTIvTmpEZnpUbjRGTzMyL21LZ3RoVnU0CkhZcTNiUTRweXl1YTR0TjkyOTNpb3p0UUtIa1o3SXhUQi9kL2ZMVFBiTnhPYmJCSFVEMzVwSnZ0RmFCQVhQZHMKT08rcUF5SWMxUmFTVzFmTlM3WG5MeFBhV2JmcFA1M0F2MFB3MDZ3T245dnpZMVR6c0p3bEhjUXpwU3pnNXowUwowdCsxNW9MYU9ycUlJMWJzNW1WSlUzZ2lNdHByZkpITDFRWktoK2FiQmJCQWlqYVVVVEs0MHNmVnZJeHAyQXlKCjl2NDl6V2hpczRHMjE3SE5DVEFYVHlGR2FQTWdzWXZyVTg2amZDaE45RXNRLzV3RTl2ejZCZlgvSFd1TmI0SE8KV2trdWdXdGhXa1ptc2xvWnZZZGY2c3dNR2JHTjJEVm52NTVPV2sxNUFnTUJBQUdqSXpBaE1BNEdBMVVkRHdFQgovd1FFQXdJQ0JEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTFrY0RkCnRCUXExY2JQOC8zTDltTXFubHNwOVpwV3U0cjBDNGdEWWtjZFRzcm9rMWh4bmd3SHdsRmFOM0RYbUxXMzdkWVkKVU9KS1dZSXRjNWdvdURFVWFZWDlhOVRSeE5QeVBab0g0RW5acUVHWDIrQnl3Tkx1VU40Q1R1dzNNaTBrMytOMwpLWGErcGNkc0RMTnc3VWFzdkRtK2tGbmYwODNpL0Q1YURXcHh3dGJqK2ZieEU4ekN0UlMydzJWdzhyWkV0UGJCCnZqa29Oem96cHB2Mytzdm5HQVhIRWZ6SWlqZnUyaWFZS2NldEdKZENZbDB2MHc0VmI4ZVExNFRyQ29tMk0veW8KZ0ViUnBMQ28yMmx0d3JMR2xLMjFnT0FFN2FHNk9FOWpSM2hRWm1IM01EOWttVDFqcHFBWVJXQzlET0kwRHBadAppL2k0ZnBYdVh1UDFKREtHCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.8.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.11.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T18:15:16+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-west-157b3db4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: mtGaISCgsMB-bWH6k4_j8WaBp_-bDNnPVXK1bP9ssfw=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRUXE3cHVuQ0w1RGNDM3hhMHNWSGFKVEFOQmdrcWhraUc5dzBCQVFzRkFEQkYKTVVNd1FRWURWUVFERERwMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxagpZVzVoY25rdGQyVnpkRUF4TkRjNE9UYzBOVE14TUI0WERURTJNVEV4TWpFNE1UVXpNVm9YRFRJeE1URXhNVEU0Ck1UVXpNVm93RWpFUU1BNEdBMVVFQXhNSGEzVmlaV3hsZERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxaQ2NTMm5TVnk1a0xoeFl4NzdKdHJUSkhHTzZQbTJ6clp5YWxDTU1ISzFUaTFWallvYwo1UzQ5ZkJuK05DazNhcGZkS1hiOG1TNC8vOW40SlFrdGd6SkRDZUpVZnRiUVFHZ29GS0hjNHhJVENGQlkyeThoCmhFRDRVZUlqNUhIblVGSy9nQ1dFQnhsUCt0OEs0SVU4VmZETkZIU2FyY25NMmZUQWVRZjVFb2ZqOERTMW5CNloKeFFJYktyWGUrcC9pelBXYzdab0tlcDREK3JMMFQ2S2I3Zm0ybStaZUVhVWxpa3VqOEZJUUpIZTBOd0czSWhWOQozZVR4M2gyS0VhWS95bkF0VFZVZ2p1VTlmV2FaYkkvd0VTZzd5TncyWmQrUUFxL1NZbzVLaG52bmI2ZmdKSFNtCmFDZCsvaVJVZWFNdDdhQXVwR0twUFVpVzNlZDZvOXpGalAwQ0F3RUFBYU0xTURNd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQUc2NFBHM3B0cXdIb0pEUml3NUNaajkyZkNzUnN5Z1A3RjhNbS92aVR1c01iaElqTkRyCmV0NWV4dTV3c2J2TUJMWFh1N2xRMlZLNDhLTjM1eVRzaEIycll2WWpydGdvSE50NjZHV2dLNm1DZDNNeER5cTMKdDh5UTR0OXZuaDBwV2tXNGtLT0RNQU5TMlNUSFFEdkVJa2lnSFhsN3pUaTFIOGdHcStmcTEvdk9lWElaeUU4ZQprVWMzTTFtRzErWThwUVBNNk1CL2Q0Q1hmNkY2ZmdQYThTanZCdE11OS9kT3N4WFNlUG8zVGdCQzlrdEZra3orClJrU0JYVW16SmtWVXBkUFRzbmpJUFc5WlYxUm9neDI1ZDh0WkZrdlVMUEJYalFSMm80Y2JqSUhvdEV4Y3NqdDEKNXRCd3J5czFUcTZvbU1XWGtJaTNIZWZCSmhvL2UwdWRPcTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdGtKeExhZEpYTG1RdUhGakh2c20ydE1rY1k3bytiYk90bkpxVUl3d2NyVk9MVldOCmloemxMajE4R2Y0MEtUZHFsOTBwZHZ5WkxqLy8yZmdsQ1MyRE1rTUo0bFIrMXRCQWFDZ1VvZHpqRWhNSVVGamIKTHlHRVFQaFI0aVBrY2VkUVVyK0FKWVFIR1UvNjN3cmdoVHhWOE0wVWRKcXR5Y3paOU1CNUIva1NoK1B3TkxXYwpIcG5GQWhzcXRkNzZuK0xNOVp6dG1ncDZuZ1A2c3ZSUG9wdnQrYmFiNWw0UnBTV0tTNlB3VWhBa2Q3UTNBYmNpCkZYM2Q1UEhlSFlvUnBqL0tjQzFOVlNDTzVUMTlacGxzai9BUktEdkkzRFpsMzVBQ3I5Smlqa3FHZStkdnArQWsKZEtab0ozNytKRlI1b3kzdG9DNmtZcWs5U0piZDUzcWozTVdNL1FJREFRQUJBb0lCQVFDdktaSHVSMjBaUVhwVgoyUnRqSmdzRW1aSFgxWG9RckdGa05QZjZLNUZRWFBFaVhxdW1CZms0aEh6bDJrbzFKbjQ2TDZKdktYcnFXVFhDClBWc1N3L3ZuN1VmdGpqbE1xRjZOKzU5QXBMSlNwNW9BNWpUWXlnUjZFRzFad2hjR1pVSHNGUUhLakdYcUxOUzEKVVpYUVZ0bGRrU3RNbVcvV2x4c052NEZTYVUwbTdRZUpBWlRnK2ZvNUVEcGNTNFdVUld3TjZvclMvbmJGRWFQdQpzaXB3ZWxGcm1QSjZEMGtuLzJrYWUzbHZ0NnRrVFBXaTN2NmkwMUxrZFUvYllpNFVRN2VHTFgrN0t3RlRKTTZOCld0dnhWeks2b2lhQ2RoSHR5T1ZBbklJMEgwcDZobkp4YzBtaUZ0Y3VlOE11T2c2NW5yUmZrY3RUU1ZsRVpRRzEKRThPTmdQWjlBb0dCQU85TjRDYUNIYWVMUHI1UmkzeGhmb0tKTzJHcng3ZTZGK2pLb0p6MEhoZGtUeHBuNmU3aAo1NTViZjQxcU1qaTg4TEFMQXlpOUN0V1BtZWFJTGpvOXRmMGROSG1ZUTlwY1VVNGJua2tFaG9EU2xiSnE1ZktpCmNya2FIZnVNb1NWNlN2bUxJSDByeExiZnFmZlNzMkRMbU9BbjVVbkppc2dObXdrMDRwdEpSTzduQW9HQkFNTDUKdG5mbnlhUEpVYWNrTy9HMUxmNEZ0KzhHTE1ZRm1ETW5SKzAvYzVXQStwbzJ4eUtma2VPT3ZUUEdBbTV4VkdyVgprU1hNbW9nNDlPUDhZRnYyLzVsZFRzeUdVWEphUjBBTXpSMmlVS1R5TlV4ZkdGR0JHZkUybHRTQ004VjIxN3E5CnVndE9NaTBEZlF2MzhCa2Z0bU9zQUlYMUcyNkZZZTMrbHRnWUhweDdBb0dCQU1QbVNvTDdyVzhFeko1Y2Z3V1oKZ2trMk1vaG9hWng4R1NxWEJoaTJ0eE9MS0Q2RHBydko3eVJ4M3Q5VGVqMThYc1Nlbnoxd1ZEZ3owRmNxVUQyWgpXeXdVQm1zc1BRKzYxMHhMeTY0V3FFMDVGeGJ4NzhCTFFBTkw0Qk9YTWl4T0NxWnlRR3gzc2hmS3pZZDAweWVBClJHdnIvUVlFbVRuZitYVDErRFFMTFFVdEFvR0FKNkNwUFdXV3pmczA1VXV3QTBoWHVMRmcyT3ZnWGI3MVdEQTcKcGpTblFWT2RtNHBXbnVyZnMraG0vQWJhcDZmUkNJV3Zvb2NiUVdTU0lXUkNFVzc2TkNtS3duYnFSdHVpYjVvcQpka052TUpjcHpnUGw1V3JmNHU2OWFTT3RjZ3pkZTg3ajZUaFRhbUt6SDZPYzRQNVpDNWtCNGpnWEF6ZUkxOTVPCnVrenNxOUVDZ1lFQWtiN2IwdTlwZHRuSGtyYU9lYWoyUWthUlVzdit3bDlVZUFMa3A4TGVhOGlzVmpPZ3F6SnoKRHNqVXJsTkRJaUsrd2F3ZFZxbFlPOXdEL3R2Q3Z2dzdKaTdhQzhqdG1tNWVkZ3pnM1lJZXZHeEpyRDhFSnBOagovSjlOMFpMRlpmaWlHS3JZclJpVnJrdE8xSFVrSnNuUmpxY3ZDcm9rcXJQV0pOM0l5eEhOL3FBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.104.76\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.11.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-bb6ef461"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-canary--default-pool-bb6ef461-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-bb6ef461-qlvk", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.1.78", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "m28EL70L4V8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.9", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-canary--default-pool-bb6ef461-qlvk", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "BCsawV--MPw=", "items": ["gke-redditmobile-canary-west-157b3db4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/mikes-forseti-test-project/instance/2091321081600395222/,instance/2091321081600395222,project/mikes-forseti-test-project,2091321081600395222,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-30T10:51:58.518-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/zones/us-central1-c/disks/forseti-server-vm-4339", "type": "PERSISTENT"}], "id": "2091321081600395222", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "d88ZuhlP6F0=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"mikes-forseti-test-project:us-central1:forseti-server-4339\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-4339@mikes-forseti-test-project.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-4339/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-4339\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"19 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-4339", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.2.114", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "e0qTHX985PA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/zones/us-central1-c/instances/forseti-server-vm-4339", "serviceAccounts": [{"email": "forseti-server-gcp-4339@mikes-forseti-test-project.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/mikes-forseti-test-project/zones/us-central1-c"}"
organization/660570133860/project/cicd-staging/instance/2236655241567541760/,instance/2236655241567541760,project/cicd-staging,2236655241567541760,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-10-22T10:42:07.490-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/disks/gke-redditmobile-staging-default-pool-cb6fb0ef-69v6", "type": "PERSISTENT"}], "id": "2236655241567541760", "kind": "compute#instance", "labelFingerprint": "PmdZM3nQwE0=", "labels": {"gke-redditmobile-staging-27f4251f-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "USR_oPvUSa8=", "items": [{"key": "cluster-name", "value": "redditmobile-staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQVBCOVFGaGI3ODBoT01kdGI4Mm05all3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UaGFGdzB5TVRFd01qRXhOelF4Ck5UaGFNRUl4UURBK0JnTlZCQU1NTjNWekxYZGxjM1F4TFdFdE5UVTJPRGt3TVRjMk9UQXlMWEpsWkdScGRHMXYKWW1sc1pTMXpkR0ZuYVc1blFERTBOemN4TlRneE1UZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdwpnZ0VLQW9JQkFRREJiYUprcmszeXNvVUZIbGViY3ZKTjhvY0x1Z2xQL3ExbVlxVzYwanJpRWtKTktROW15VVN1CjlacmZhN0JSNXVmS0NrWExhcDJmV0ZpZG1WeXZVMWFZbEFhaGhiL0oxUVNXZFdIMVYxeFIyMjJML2xtenRWQkYKWHJ1cTlaRzdiWjBYWm5UbExGcUNoUGx4UmFYNE1ERDR5MUZRUWhmUEgxS04wU242T1prNS84ZDJYaVd3YmFOagpucjlkL1ZHQlNOc2tBWVN2aHM1d2JTNHFWWitWVmtxY1Y5djIvREtDY3hiY2dYekxueWRkMStNZFdYenpLWGdXClh5STZmay8wZlQ4V2ZzbW9yZTFrSU5peWNSa1ArdVFPYUFYNWpiQ2NZVTdndUJxSC9ONnY1NXRXUFRlNGQ2VCsKNTZVajVRUVB1ank5VWRWYjc5bHFFZnNkZytrY280VEpBZ01CQUFHakl6QWhNQTRHQTFVZER3RUIvd1FFQXdJQwpCREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFOeS9yUGdkdStQM2hlClQzdDlqSzY2OEhCZjlucEV0aTdKUDQrOHFKejZZdnNjUHVYYTQ0K3MzZ2l6U2owd0R5YktwSnlKNXB6Wlo5V0wKNWd6MWZud2NmZ3I2Q2YvbnF1bTduZm1nUU1Qb0hTc0loK1FxMk02bmJnWHV0eTBhKzBXS2lnRUNqQklucHhITApLODFPNW95YW5YNmZtUGEwVjhwWkk4R0lhZmRoR0dHNjJJVFR2QlhVbHRia05obzY1VEdEQkkyNlU3VlJuUFZICkxpVENqZ0tmQXA2QXBpVE9ncDljMGdVWVE0WHZoSkVSWHN1SHFWTTJyWWw0aThlSHhidXMwUXpYWGJ2MnlYc0kKL3pKTWVQdXBuZUJZWG0rUjQ3ZWlPYkVqS0lTMFBjQ1djOGRQUlUxRXRNWkNkMzV2SFo0QnV0V2s0UzdNSk5Odwp1bTF0dERUdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:41:48+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-staging-27f4251f\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: kXWELnGQVn9EVh6g9yUjBkP03kKgmfocRiapcKgjTbU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxFYi9yc3BYd3UzUUVoRzg2Q0ttRzR3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UbGFGdzB5TVRFd01qRXhOelF4Ck5UbGFNQkl4RURBT0JnTlZCQU1UQjJ0MVltVnNaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURJbnJLdy9RenJhKzlleHJYeVZoNUVDU2d4UkE1dnNicHJrZDYwNmZvMkFMcTU5bWNrV2t5WQpBMlNSeTUweXEyMU12aGk5YzdoWXc0c0JjL3lxQllmWGMzSTNUL0tMYzNPTis5U2hNN0J6VzJqWENuekpUZkF3ClZnWS9pUnpRUlJJNlMxTEFLV0FSVkMxUHhUc0tua1N5bmw2TzBaWk1jdnRKMVV4WHE5NFpKSDV5SkRhSUZvK3AKZ1pHdTdKSGdBNGkrbW9Pem5JclJtLzJGOUlFb21hTGdWQ2docVMxUW0zRGVuczBNS0R2MFR5ZHY2RDJqWW94cQpWdE56cVBoK25obG1Hc1ZxZ0FMWno2REp6OEY2bWFsbkYxV0hJS3lHdml5a1FNUXZoeFdyb3NnWXFVWndML2pEClUzbm1sd1QxdDhvS1pXNURtUDJPOFNIZFpQQzlrN3E1QWdNQkFBR2pOVEF6TUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0wzSCt6aDlJLzkxUDVUbTY3YlF1MzJyNktnbUJSSXhHUExqUkdmK2pIOXJ6b2t3U1NUcU9ICk5NaVFPSEpvWURDNGF3Uk8vMlg1SGJHN3hscHZjMjMzYnVVWDFxRWoyd0UrUE5vRi9ZY2tMZGpKSXp5RVJGb2kKMzFnemhhQnZBY3BZVnowb1ZReVNEd1VJL0ZsdEpCRXBQVHF0S2tLMzcwRC9EdzNOWlZLQjZzREg2aFF0d1ZZTwpra05QZlVUMUFnK3NKTTdOVmlMeUhsRytuZHlSWHF1Q0xsdFR4Y3c2U3oxdmdRUkFzQVpvR1lYcks1UmtIK1hNCkRoS2xOb2ZHNWd2VjAwekJMRnhTcDBxVzJmR1h3Z09Ia3BPcEVwL3F4YWNlb3ZpVXVLVy94WVRDMWJxdU1tS1IKUDYycGdKdTZJaHp6OS9pbWNaUG5yTjJoMFNMS2cvM0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeUo2eXNQME02MnZ2WHNhMThsWWVSQWtvTVVRT2I3RzZhNUhldE9uNk5nQzZ1ZlpuCkpGcE1tQU5ra2N1ZE1xdHRUTDRZdlhPNFdNT0xBWFA4cWdXSDEzTnlOMC95aTNOempmdlVvVE93YzF0bzF3cDgKeVUzd01GWUdQNGtjMEVVU09rdFN3Q2xnRVZRdFQ4VTdDcDVFc3A1ZWp0R1dUSEw3U2RWTVY2dmVHU1IrY2lRMgppQmFQcVlHUnJ1eVI0QU9JdnBxRHM1eUswWnY5aGZTQktKbWk0RlFvSWFrdFVKdHczcDdORENnNzlFOG5iK2c5Cm8yS01hbGJUYzZqNGZwNFpaaHJGYW9BQzJjK2d5Yy9CZXBtcFp4ZFZoeUNzaHI0c3BFREVMNGNWcTZMSUdLbEcKY0MvNHcxTjU1cGNFOWJmS0NtVnVRNWo5anZFaDNXVHd2Wk82dVFJREFRQUJBb0lCQVFERy9wTWtkM3lQTC9xNQpPY1ZUNFJRWVREVHYyUit3cnN2STAySGlkWXRZY1pURnpLRTJMOU4xblRmdVhkZEpZVDBET0RQMkI0aTlrd2lZCm9tSG1pNkhZbFl5ZlRNKzZmd1FKdTllSEpteEpvRXYzc1ZGaG84c3hSc0xmMXJNYjZzZFB4MU1IaElMajdXa2MKalBncGFoK2VSUFJxR1g1SnltdHpLdjJVb01lbWl3aHlNQm9aTzI5YUJBZkFCWXBGOERhdVNKQXpNOXNZRkRaMwpRMSthTy9Kc2gyQXFsUUh2UjBneEdoQThROU56akJJYkpnek14Z2pSTER4NTdBS0puVW5tbEFmaCtXbk9MRWI5CmVzanZ1eDJGWEJ0dHFhVHdvNHlNMmFnMmpuTW1LeVFGTVlhVmRMVCtCdHFDT0NoS21wR0RJN3VQUkZXditrbmMKM25IVXVEdDVBb0dCQU5vK1pydExPMVQrMTJUSjVFMk92S0hjLzJ1VG9WWk1FUDNhWkFZV1gwdTZSUGk1Q0hwTgptWDdpQzBKUWk4OS9zUGlCNUx3TDM2cTRURnpIbXRMMjMxWGxEZ0JWSEVCQS9DNlhQUmVRQzVMblJCbWJmbzVuCnVWTll2bTZVY0R3aWd5N2l1TDFGY1ZJRnd5QjhpdHk5NUFXY0l1OFhETTU1enVZcXJOVElOZVd6QW9HQkFPdFQKeFQ4RzNldW5vb1ZIOTgzd3VJTjVUZW5hYXlIektLRjVFaHFRMHVKTnJXaElhdGI5TkxlaFlIbXI5ZlljTzYxVwpmNnF4eUhBYnJCbXBWZ2ZrdzRQVFdUam5Lc1RUMjVQZWh1TWVkNEtBOC9EWWIweE9XbHNoNmdNd1B2enR4N01MCkZrV0RzNGREcWlKQ3lqY3dEdEtUMXc0SlVWcFVXeVd2L2loSHRqL2pBb0dBZnV0bFVTektQMzdKQXN0S296UU0KVFZHNWxQVlJFVi9CVGZBUTFWMXpaQlhhZ0k4UytCVmkyK0JYVGVTTHVrdDNQcjVEcUh4N1FjeFdWR3FjaG0yZApxbFZBRkQ5cTQ0OG5XVzBJMFVnckF1N05zdHF6K2RzbWN1c2NMRERWS0pPbG1NR3ZVQnN2Y05UN0NreURjU1paCmtrMmdIMDFYWEVpSVkyQ1VERmEyeVhNQ2dZQnRMVWMwajNZRDc1ajU1c0t6Mjd0dTI2ZG5HRHRkMjliODJ4T28KR1lxTkRXYW5HL25kVmtuUDYrRzdjU2xDamlTdHJaUzdWNUhiV1N0R0dJYmVVS2JZa1FReTN5UzdmbUsvdnB5cgo0Q1duK1RXemhtWlVhNEdHQ0R6dVQ4TFpTMk83MENmOEJqY1RTVFEwZ3ZJWUdvYTE4WHJ6ZXlVd0dEVFZUa3BHCjI4WlU2d0tCZ0FVNmpweGVIYi9aaGkyRnhUZ21yM3dyVVRqUDZVRTdUOGQwS2p0L3pCYXVlYkNtdmFMSkVsTTIKelEyMVIxSjZzVksxSUlQbUxoSEZJcUU0VTdaYW1sNGJoclFzeTMwODNzalFUb3JtYWExOTFZVGYzckxvTUZRcAo3UlRWbFV1SmJiQ3Jxd0VaMHVzd3AwajNQZ05jNkwvSE5EUFRSUWlnTHFxcmhWOC9GTktwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.199.113.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/556890176902/global/instanceTemplates/gke-redditmobile-staging-default-pool-cb6fb0ef"}, {"key": "created-by", "value": "projects/556890176902/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-staging-default-pool-cb6fb0ef-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-staging-default-pool-cb6fb0ef-69v6", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.4.143", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "pDIMBW5Kox8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-staging/global/networks/default", "networkIP": "10.138.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-staging/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/instances/gke-redditmobile-staging-default-pool-cb6fb0ef-69v6", "serviceAccounts": [{"email": "556890176902-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "PmdZM3nQwE0=", "items": ["gke-redditmobile-staging-27f4251f-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a"}"
organization/660570133860/project/pso-cicd8/instance/2299299160644803406/,instance/2299299160644803406,project/pso-cicd8,2299299160644803406,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:06:57.239-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-canary-east-default-pool-e4705366-ijnf", "type": "PERSISTENT"}], "id": "2299299160644803406", "kind": "compute#instance", "labelFingerprint": "7s-VnV1Vfao=", "labels": {"gke-canary-east-67b092c4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "rJQ4SdUTp7g=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQU1TR0RTRFp6Y2RRU1cvODlqZmFMVGt3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRaV0Z6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RaV0Z6ZEVBeApORGM1TlRNMU1UVXhNQjRYRFRFMk1URXhPVEExTlRreE1Wb1hEVEl4TVRFeE9EQTFOVGt4TVZvd09ERTJNRFFHCkExVUVBd3d0ZFhNdFpXRnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdFpXRnpkRUF4TkRjNU5UTTEKTVRVeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUhPaGp2aVU0Vnl0NEcyVgp5N0ZEZHg0RjEzeWRVek5TMElUL3U4VEVQWGhxQ2tBejhxZVpPaXE4aGRaS2R0b1hFeW8rL3dUTnBOVEozeHNECjREVkhzUW5UamViWktRby84bytpdGpWdm1pRUE3MUZ4T2hPMytxekJidmt1cnFrOXVmbjJGSld0ZDNacm1MeUIKYVhCSnVLYVY4UlZGcTFMRm5vUEFxcUduM2krbWswS0lGRmlLM1U4WHlpbTZVVzFuUHYyaElUSmJNYk1qZm5sbwo0YjNzN3V4ZEtCNC9LZzEyOWh5M0hwdzBtVDBXeStkbG1Qam1RdmoxQ1VNN3NOTXJDSE1TbXMrYXJjdDZtd0M3ClRLTW5BaWVXa0xhalgxSUt6NU9MZGNoTS9LTGxRbEp1WUJsZ2p5dENMQUo3MjhTYWlXL1dJY0lpUVRZZFdsVUQKUENsZmZRSURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFueS9LRHIzWldESmNFS0JrY1ZQbTVVU1RUaThOZ2Ztc3psM2pCMG0xCnhoOGxzVjM0bUFhaVZOUndIWjRtUU9TTXBHSlpSdmFoZHRMN3hZS085TXlpbkFaRitzU00yTmJBamhLYms3eEEKbG5qNHZGNHZySHBURXlQd29FelBWeklpcmE4YnZ0MGlUUkpzOUVkY3hNVlZMZ1dnTXpNNzNPWlpjMHVNUFBNNwphT25TR0ZIU3dTeld0SGN3VlBzaXVVb2FHY2w1azdaRHl3MEhLazNnZWdXMFdyQUdCckF4alZZZUM5dXJ0SVc2CnRUMFNuc0tPZFFsQnRjNWVuNE1qbjlBR1dKNmRjYnYwbzVTUGlXYk0xbVI4WXNlS092dy9lemM5RDVsWGprb1AKUXpVREdaLzhlUWhLaGR6S1VvRDVqMzhObHB1YnZCd0ZqNnJtT0ZEWURMdzZhUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.48.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.51.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:48+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-east-67b092c4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: LVVOPEDi9t_-UN067s0d7mbSFoBZHNusRlqsbcaRc8U=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lRSmpwN1RwTFZBTzRDVjVJcVBkWFhNVEFOQmdrcWhraUc5dzBCQVFzRkFEQTQKTVRZd05BWURWUVFEREMxMWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMV05oYm1GeWVTMWxZWE4wUURFMApOemsxTXpVeE5URXdIaGNOTVRZeE1URTVNRFUxT1RFeVdoY05NakV4TVRFNE1EVTFPVEV5V2pBU01SQXdEZ1lEClZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFYeVQKNzdBQlVvSmg5WVZSbHVwSDJsei85dldFd1lURzJTRDBtbS9wMXVoQWRON2kvN2V2UzdwMGxlSzRCZms3SnRjbgp2eDNDVXJKNCs4bldxVE5jbUkrTlBSVzdhdnphczd0M0NTL2hXMEZaM2tsaXRUWnpOalMxaG9GNTQ0aDhmMUVBClpEN0lkQTlPQndOTGhmNXQ2WjBTeGdKeTBLZWtKTXVpOGQvNEZsd3VSYnJBSGZBeEdVamtwRWNLRzYxSmI1UmEKQ2lXRzQ4SHZOWlAySVdsaFR3VW96ZlVtbmpDYTgyUFdhZkxrZmZOZk1zb3p2WVBnSTFzeFY4aDdQbnpkc2JuSQo2YjU4QTNseHEwUmtRTWdvNFlzaGpRaUlqMDNIa2t0RmFvNWc2bHhWU0tMYTlHRnZhL0V5VjZWTGY1K29FZVJvCnNTZ2hTQzRjRlNTNjl0OXNQd0lEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3cKQ2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZWJGUQo0ZU41clg5ZkpLbjdkeHFKcUpmV3lFekY1dWtjY0V5TFUzM0xoZ2VPY3JoUlduQ2xoVFV4bEVCVFdVQklLcWc0ClJKVldhN1BQYXZOZXIrK1BnNG9Zeml4dmZRVUd1TFl0cE5aanQ1VmJpamgrRTBCaGlhQnZiek5zVnBVOEVpQjEKcjRPUEJqTjI2cEJ4M1RSS2FCZ0J0OGxqaVpJR3pVWk1Fd3A5cE9CVTljVGJLVWk0cG5kSTB4SnY5ZFNqREg2RQphcnE1emx5bG9IUVI0d2tyb1VhdDJmTjJ3MTE3VTl1TW9DUVZMMWpvRWcrS0kwRVRNaXRkQUNlbzFzamdvd3dSCmtTVUtvTXhOZDlOU3pZbjFrQXlGUlFsV0Z0Z1UxUlE5UHEzYnFpNDdlUmFBR3VhbkR1TW1hQzZyZjdZaHFDTEcKUElXWGhPQWFuOXptQzZERjVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMVh5VDc3QUJVb0poOVlWUmx1cEgybHovOXZXRXdZVEcyU0QwbW0vcDF1aEFkTjdpCi83ZXZTN3AwbGVLNEJmazdKdGNudngzQ1VySjQrOG5XcVROY21JK05QUlc3YXZ6YXM3dDNDUy9oVzBGWjNrbGkKdFRaek5qUzFob0Y1NDRoOGYxRUFaRDdJZEE5T0J3TkxoZjV0NlowU3hnSnkwS2VrSk11aThkLzRGbHd1UmJyQQpIZkF4R1Vqa3BFY0tHNjFKYjVSYUNpV0c0OEh2TlpQMklXbGhUd1VvemZVbW5qQ2E4MlBXYWZMa2ZmTmZNc296CnZZUGdJMXN4VjhoN1BuemRzYm5JNmI1OEEzbHhxMFJrUU1nbzRZc2hqUWlJajAzSGtrdEZhbzVnNmx4VlNLTGEKOUdGdmEvRXlWNlZMZjUrb0VlUm9zU2doU0M0Y0ZTUzY5dDlzUHdJREFRQUJBb0lCQUUwMHVYZUVTbVloZXZYRQoyaVhlNGs5cE5MU0dSQldNUkRHQUJwWFhoVlRRTjRkTW1BRnMxM3RtbWdVZXNmaVBFc0pRS3pLbHU0SVd3MFFqCjBYcnRkVDVESkF3RVVQdzNKNHk2YmlrblpMT1E1Y1JLKytTWEpZRmovSVlCU3loclVzTGtjMlROZzhiZFJoV3AKTG1YdUJxZm13MFJTM0Z6elU1eHUvS1hHbnJ6T3ZqOElmaENBenBFWlRpdXZjcUQyRkl2NitOS0UwbDY2Wm1EdApySnhEQmVKc3gvZUlpM2ZrcU9YdmZzRlBLZ0ZFVEdmN21pZUNIVURoY1YwZlQ5U1MrNm5rQzhzNUF6S0lPVXRYClZKQ0FodTZ3bFlhdVZCQTJLN0ZXaFdnTThhUHRaMWxoOGE1N0JicHVDWkpkUDYzOEtybzEyRlh3Y1VGRzk5NW4KU3dsbTY3RUNnWUVBODFabzZwYWJIaDhyUHNPeTNFYVIraFdlSVlDY2ZqNGs2SzB6SVdnWUxDVG1GUGlZK2JrYgoxT09WRVpPSld3S0ZCT1k5ZmJJMUxrLzZ1dElPb1QzYm5FVXhESy80enhsbi8vOWVTTVBId01KcDJMQUNVTEpoCldCcGxZK0tGeHJmT2U3UXdvT1VadkpIUlE4Zm1US1VaOUxhTlZLcTgvQktjZ0U1R2V0QW1uS2NDZ1lFQTRKaUQKVXdSMGhzeTFkTlEzTFZJRDZMVG5EdHhjN0RrVEJGdXVveUFWaDM5Ymh4bk5TL0dUcUhMNitJdVBnc0pXZnhBNQpoTDhEOFI3M2xKTjZ2WkJsZFJadUNidC9Qek5JL3lQUmRObER4UEh1blJ3eEEvVU5EbUdpWXdndnVrelZRUDVBCmZJYWdSdnh1bGlDaXYvU2I0TzhWZ2tQSVlTWDRLaVRUaXJSa0xxa0NnWUVBbXoxYlBaM0xaQklhY3JaQzIwaWkKUkZ1YVFHRmVkU09NUkd5S25CdGVvSHNCMWdzcS9OWGRMWm5yTmdWYnNaWVA2cXBBUEhwK2R3ZExPL2hhb1A5bgpwWEIyOUZNbmRtZ004MEtsa2VKbEExS0VXRnNoZnYzdUlGam1xaXlQajlFZmg4ZlM1aktDa3N5c0pvUFhKcnFGCnJwcnYyejM1eHc3UWpRSmk4R0x1M3kwQ2dZRUFyZytrMzJiNWhDc01pbEdadmFidFhxRXMzVWlOUDRud0loV0gKMythU3FPTmNKUFVyTlNzeE80QjQzcjBTYU0yQ1NaRmljbTJ6ZVdCOWtnbEdPN20zMTZtZGVDOTJxNTFzZWtmaApJY1RzRDZ0TU9UakxCLzBYdEVpWW1GV1UzN2FDSTQrb25KbWRoOFpGVWxaU3E1L0FXdkFQNUZmeDZOQ0xadVlKCmlGckx0WmtDZ1lFQW1QOTVETHE3MlF6K1R5empmcHpWa3g2OG1RS2lFSDgvQmEwNWkyenZXNThlWDZmY3lUV3AKSG9GMzRXSEQ3aWV4VW03Z1NucUFqVU0yZlRyYzI1U09kN2dVR2VmT0cwTTByRitkNWNNVzdFZDVlYlI0ekJRdAprTjZuVVZJRjMreEZESnJPRzl1M3E5Q3RBUTZVUXowZTRMU3MvMXdySzBwVE9Ib3hvenhIMTNVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.177.251\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.51.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-east-default-pool-e4705366"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-canary-east-default-pool-e4705366-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-east-default-pool-e4705366-ijnf", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.191.132", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ne8LtqXE6g4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.10", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-canary-east-default-pool-e4705366-ijnf", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "7s-VnV1Vfao=", "items": ["gke-canary-east-67b092c4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/pso-cicd6/instance/2360324972268787098/,instance/2360324972268787098,project/pso-cicd6,2360324972268787098,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:17:09.220-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/zones/us-west1-b/disks/deploygce-5-v000-8g81", "type": "PERSISTENT"}], "id": "2360324972268787098", "kind": "compute#instance", "labelFingerprint": "hwW8OuV8H0M=", "labels": {"deploygce-1479599292268": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "UCLSwMLFdyc=", "items": [{"key": "backend-service-names", "value": "deploygce5"}, {"key": "global-load-balancer-names", "value": "deploygce-5"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":1.0,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/457182674763/global/instanceTemplates/deploygce-5-v000-1479602873803"}, {"key": "created-by", "value": "projects/457182674763/zones/us-west1-b/instanceGroupManagers/deploygce-5-v000"}], "kind": "compute#metadata"}, "name": "deploygce-5-v000-8g81", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.227.135", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "yyfykrD0t3s=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/zones/us-west1-b/instances/deploygce-5-v000-8g81", "serviceAccounts": [{"email": "457182674763-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "hwW8OuV8H0M=", "items": ["deploygce-1479599292268"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd6/zones/us-west1-b"}"
organization/660570133860/folder/138672061205/folder/37188445764/project/jiyun-test/instance/2384508279557841136/,instance/2384508279557841136,project/jiyun-test,2384508279557841136,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-08-31T12:06:07.848-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/disks/crawling-0831-1-explain-vm", "type": "PERSISTENT"}], "id": "2384508279557841136", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "6GgnRLqm7Nk=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/jiyunyao/forseti-security.git --branch crawling --single-branch forseti-security\n            cd forseti-security\n        \npython setup.py install\n\n\n# Create upstart script for API server\nread -d '' API_SERVER << EOF\n[Unit]\nDescription=Explain API Server\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/usr/local/bin/forseti_api '[::]:50051' 'mysql://root@127.0.0.1:3306/forseti_security' 'mysql://root@127.0.0.1:3306/explain_security' '/home/ubuntu/gsuite.json' 'jiyun@henrychang.mygbiz.com' '660570133860' playground explain inventory\n[Install]\nWantedBy=multi-user.target\nWants=cloudsqlproxy.service\nEOF\necho \"$API_SERVER\" > /lib/systemd/system/forseti.service\n\nread -d '' SQL_PROXY << EOF\n[Unit]\nDescription=Explain Cloud SQL Proxy\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/home/ubuntu/cloud_sql_proxy -instances=jiyun-test:us-central1:iam-explain-no-external-test0831-1=tcp:3306\n[Install]\nWantedBy=forseti.service\nEOF\necho \"$SQL_PROXY\" > /lib/systemd/system/cloudsqlproxy.service\n\nsystemctl start cloudsqlproxy\nsleep 1\nsystemctl start forseti\n\n\n"}], "kind": "compute#metadata"}, "name": "crawling-0831-1-explain-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.41.15", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "xts-d_5Akxk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/jiyun-test/global/networks/default", "networkIP": "10.128.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/jiyun-test/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/instances/crawling-0831-1-explain-vm", "serviceAccounts": [{"email": "jiyun-crawling-scraping@jiyun-test.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/239818486301743957/,instance/239818486301743957,project/pso-cicd8,239818486301743957,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:07:22.255-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-prod-east-default-pool-876b2e46-uvgn", "type": "PERSISTENT"}], "id": "239818486301743957", "kind": "compute#instance", "labelFingerprint": "v7xYtm0K6uM=", "labels": {"gke-prod-east-aecd1f6d-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "TVl4GnnpV_o=", "items": [{"key": "cluster-name", "value": "prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRVGVrWCttK2lDTzhGNlc5bHZ6aVZjREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93TmpFME1ESUdBMVVFCkF3d3JkWE10WldGemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMV1ZoYzNSQU1UUTNPVFV6TlRFek1EQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMSkYrVEZZeld1RlNlTzVjNUYwNlRCZgpLb040dW84Zmhiakh5QnN3YXA1MVpJb0RxOGk3ODkwRlNrMjQ3YkFzdmZaOXZROFdVSWRxRzA4VlBIc2VuSFRTCmJxODhqendIWnJ5cE4zNHhVbUdFcGF3TjdKb3g0NHRSQVJkL2JjU3hFVGhCMDFrWUZ6alp5K3NIdXc2Wms3eDUKc21xcCtCaitPaW5ybjRZeVc4ZVRkSUdYeDJDQkRZSFNNT1V4aTJDQXA1K3VOU1hvbm5YcFNXRkxrUjFmUXQ2UgpxMVRuN05OZllDalI2VVVBcGlBbWhVRjBiRElXQTJIY3BETlpCMlRFQ2NQaG1QTVFPTHhCWUdqVjErNjZvdXVPCmRUWHVmZXlDb0J5RVVhNSs2TzVzY3NERXRVRmRPUVVSM0x4VjFrbW9JZm1BemhRNEdDN0xYYmt1TW9Zck5LVUMKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtMY1VJcEFQbXc2UHFyZDhpSFc3M1FZYTdqK3J3cDBoVnVQUHlGclZqVS9uSFFpCiszYklYWHZ4Nk1zcmt6ZFI2a2s2UHlqWWl2QVJpMWRYQ0FjV3cyUXFBSVJibU5OY0N2a1lJSytYb1A2UTkvUEoKeGJMWlRsRmtzRWVkR3ZNMnFXd21XL0JYT293dHFLQ29rL2NCL2xKaS8xa0psZ0RaekhSZDFkZVl4bEVLYXRqeApwZTNzN3FCUEwydkZlTEhJMThTa2tMNDFTbGx3bWYwWXhwcUozNVVUQUcvdUJuazFiQ2tBTnBFK2Q4OGhWbWV2CnV1RlBGTFZsKzlyY2x1dUN4NjJabWY2SzFkYjAwV2hqdjg4ZWFCWXpocVVMUEt5eWFBaEh0SElNdHBlNzVBbHgKRjR6S1pxa2RUN3hsUm1aVnU2R2VvYmVkOFF1YVg0OUVZeHg2STRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.72.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.75.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:37+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-east-aecd1f6d\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: tpYxxawhpbtwZ15OY3ekOtOasYxcMV3eHOPctR3DRkg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lRZWlxUlB5K1FDdWlqb0t2TTN1TkxXVEFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93RWpFUU1BNEdBMVVFCkF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1pNG9DZ0IKWXREd0tnTXR2Vzlzcjh0M0FhblV5V1Y1ZzlXTmJzSFZjYWpZZFlKUGlhQmdXOXpQdU9aUlM5M0tjbDdIREtFUwpjR3Z4TWhmdmtseHUrdFh0cy9KSW1YSlkzY2JhaklxZDREK3hyVFQzdEJMYWRXVGZyVWNhZ0tEaEFGSnpWVFYzCnNzR0xJRmFWR2xQYktzOWFMalZNSnZVQWdsdTBtK2ovSk5VVTRHWGNRNHdJS21vRGJFNXdyTjBVM0Rxdndkd1UKOGhVL2hHd2VHRXlxSmFkRE1SeFdORTZIQWVZSytnR2pzakVKY1VWQWhQb0QzQ2NyWUNRVXNoRnNoenIrR25hegpkNXdBemVBTngxRktoOURiNWxYWjhkcVFETjNLV04wWnUrckNxeEgzOHppTjJEMzNqTjlEU1VJNkFtVzNVQnN1Clh0clhTQ3RpbkI5Qm9yVUNBd0VBQWFNMU1ETXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSUF4RFZ0cgozcG9qVmo2MWZ4VDJ5RTR1SmhvQ2ROMm9sZDc0VEJJaDJ1RFhVaDF3K0NSR2lnZ1lxcUhqaWlBWGcxWXZ3RysxClQ0Mkw5RlNFZlMzTkxJbnYzZ29MTnpkdmZHUkw3NFV6RXFCNFdYSW9jUFVZNi8yVmhpV0lCQnZEOGdTWjBiVWYKZGFwMEVmYXJmSlVVdDlRbm9aTTNtMU5ZdXJKK0RjQjcwZUtBTVYzclpPTnJDS2dwY0NGbkNSVllZSzdwSGdieAowalpjUWJrMFZFcnNBNHpDb0xHdXp5Rjh5d2Zzc1lpNi9oeGt3aEgrUnpNRGs5ZCtHYTdZZHhPU3VYQ0hjN0RiCjQxMFlBbUx1TSsrdk0xZGNMWktPNElVbGRXdjJBeVVqdEtBSFNGL0dQYjJGNFBFRUpKbWIzSFkybzFRNnFoakgKZmYwdUlDR2VTWmx2cWZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUxpZ0tBRmkwUEFxQXkyOWIyeXZ5M2NCcWRUSlpYbUQxWTF1d2RWeHFOaDFnaytKCm9HQmIzTSs0NWxGTDNjcHlYc2NNb1JKd2EvRXlGKytTWEc3NjFlMno4a2laY2xqZHh0cU1pcDNnUDdHdE5QZTAKRXRwMVpOK3RSeHFBb09FQVVuTlZOWGV5d1lzZ1ZwVWFVOXNxejFvdU5Vd205UUNDVzdTYjZQOGsxUlRnWmR4RApqQWdxYWdOc1RuQ3MzUlRjT3EvQjNCVHlGVCtFYkI0WVRLb2xwME14SEZZMFRvY0I1Z3I2QWFPeU1RbHhSVUNFCitnUGNKeXRnSkJTeUVXeUhPdjRhZHJOM25BRE40QTNIVVVxSDBOdm1WZG54MnBBTTNjcFkzUm03NnNLckVmZnoKT0kzWVBmZU0zME5KUWpvQ1piZFFHeTVlMnRkSUsyS2NIMEdpdFFJREFRQUJBb0lCQVFDQWFFeGRDM1h5QUpKLwo4aFVNWVZXZExvYnI1T3JxZGZCMi84SHBVdWtoZ1VpN2tyS1MzTkluMHVPUXhGVnFrQWJXeHpRM0h4cTRrMWJlCnBTN1czMUNzNXlLRlR4aUxaSHFNcW1mYWplRldIZzZXb2hpYkx4S0c4K2xnWVg0RWJhek5FbWRpaXk3YVRtemoKdHdOZXZna0hHY1FSNktQTGZRWG9NUVRFNitUZVF4Y1NwaHN2VmdtK2dQZ2plaUZ3OHVndWM1Z3ZvWXNWWElLZQpJQnRNVmNMeUUza2pkd3phcm9yYVhJTVZOOGw2Znp2Sm1GZTE2dUVBbjZLTGlxSS9BYTFRMGkvQXE1WWtzUU9MCkNaR3JMUnZVaU9YNWk4OVhVZEdrVGtmdlQzVUFCK0RWYXZjQlZBb0lKR2RFQldKeUhMczh6YWdRMlRXWEdZaXgKVUlKeFpTdkJBb0dCQU11NDUyQ1hTdVo0RXFLY3FDQjcwQTNZL1U1R0xDRUlVVEVPanhOMnhVVTdaK3VVV2g3TQphLzRFWW91MmFhNFlUWlJtNG1BcWVDLzFTbXV3Q3B6V0J3SGFtWmNSSG5EM2VXb0FsTGZuaFJnNUNRSi9LSkVvClNYN3grUjc4d1JrZnhnQXJXamRtNlZwR1NSbG9PS2xEWExyWFd6a3gwOFQ4VDJpMVo2ZFVLdWhaQW9HQkFQdzYKa21YWStWZUJZTmRZUVhFRXZJTnd4NzdOMFUzZEg1MEdPZTNpOFRQenpFRnlXQW5TcnhhaU1qS2RrUmh3cCtUNAo2bk9jOWIySjliNnFHMTA4Y29BWkVMOXAzRURuaDJ6aWxJVktmZGZUR0txTXFrUFNBZXJIeDdsREc3dVpQZjhZCk9QVXRSbVB1TUtpdXFjVFJXdlVFb0o0dVFpWmtDYUJudUxoSWtjRzlBb0dCQUthYWhMNTlmQWVXMHNhaGp1MWgKMC9nL0tJakc0bmZ4TVZVSkx3RWY5SngxeExyb0MvdDcraVUydU5EQlVSUExWRWExRFJUUUpwSXg2N2E5dFRBbAo2SDBmcE5QaWNCNjZoRlNvUFBkWkk0TjN3V0tGVTB2Q3dyaEtjdzFnYnhwNDNaaHQyODNMSDdOd0gzL2p0OUxWCkFCVGM0Z0dZT2pPeWs4NXg3Rjd2ZWxlaEFvR0JBTW91VlMySXFBNEpxa3ZUOWRrWFY5andyVngzOUwrNmNWM1kKSU5WY0pjWmtOYVY4ZDYrZ0R6TlFYbmFPTVVGckJGb1pZUzI5Y29vMUxTUmhqTC9HOVcxVEtrYVZIN1Z6SWU0WgpEYjV1Z01OZzloTzMzNyt2ZGxQeFFscHh2YWc1NVNVM0VHa1BtcTM5djBsbmdMUkFzTzFZZ1R0cWp5SGc3SXFFCnVlQVdZNmZ0QW9HQWNtZTdoWmpmQ0hteVlScUxFTDVIRHJ6UmlQU3haUk85RHRKMHVFMEsrVHRETlFqYkpGR28KU1dEazN3aCtTblpyOGlBMTlCajFRM2FseEdDRy8yNDBsREJMWGZiTzBMZWY3VEtzZkkrMzhQZElhczlWWm5KNgpKU05EUmwvSlowQ0paZnQzSHBsWHhESkw2MXNxZ3QvNFByblMvY21yaU5oUVVwTGZNaTQ2NlljPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.3.189\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.75.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-east-default-pool-876b2e46"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-prod-east-default-pool-876b2e46-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-east-default-pool-876b2e46-uvgn", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.200.217", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "8lhUChmJeMI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.15", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-prod-east-default-pool-876b2e46-uvgn", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "v7xYtm0K6uM=", "items": ["gke-prod-east-aecd1f6d-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/policyscanner-henry/instance/2426436188342842964/,instance/2426436188342842964,project/policyscanner-henry,2426436188342842964,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-17T20:30:03.952-07:00", "deletionProtection": false, "description": "GAE managed VM for module: default, version: 1", "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/goog-vmruntime-images/global/licenses/appengine-vmruntime"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/disks/gae-default-1-9c3f-apg5", "type": "PERSISTENT"}], "id": "2426436188342842964", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/machineTypes/g1-small", "metadata": {"fingerprint": "cMpuW9rXb8I=", "items": [{"key": "gcm-replica", "value": "gae-default-1-9c3f"}, {"key": "gcm-pool", "value": "gae-default-1"}, {"key": "gcm-command-0", "value": "/usr/share/vm_runtime/vm_runtime_init.sh start"}, {"key": "startup-script", "value": "mkdir -p \"/gagent/metaOutput/\"\nwriteToSerialPort() {\nlocal timestamp=$1\nlocal message=$2\necho \"gcm-StatusUpdate:TIME=$timestamp;STATUS=$message\" > /dev/console\n}\nreport() {\nlocal message=$1\nlocal timestamp=\"`date +%s`000\"\nlocal log=\"/gagent/startup.log\"\necho \"$timestamp - $message\" >> $log\nwriteToSerialPort $timestamp \"$message\"\n}\nexitCode=112358\nreport \"STARTUP_SCRIPT_STARTED\"\nheartbeat() {\nwhile :\ndo\necho \"gcm-Heartbeat:`date +%s`000\" > /dev/console\nsleep 30\ndone\n}\nheartbeat &\ncurl -H \"Metadata-Flavor: Google\" \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcm-command-0\" > /gagent/0.sh\nchmod +x /gagent/0.sh\nreport \"AGENT_RUNNING_COMMAND;INVOCATION_ID=0\"\nwhile :\ndo\n/gagent/0.sh\nexitCode=$?\nbreak;\ndone < /dev/null 1>> /gagent/metaOutput/stdout.0.txt 2>> /gagent/metaOutput/stderr.0.txt\necho \"$exitCode\" > /gagent/metaOutput/exitcode.0.txt\nif [ \"$exitCode\" == 0 ]\nthen\nreport \"COMMAND_SUCCEEDED;INVOCATION_ID=0\"\nelse\nreport \"COMMAND_FAILED;INVOCATION_ID=0\"\nexit $exitCode\nfi\ncommandsSucceeded() {\nlocal timestamp=\"`date +%s`000\"\nwhile :\ndo\nwriteToSerialPort $timestamp ALL_COMMANDS_SUCCEEDED\nsleep 30\ndone\n}\ncommandsSucceeded &\nhealthCheck0() {\nlocal unhealthyCount=0\nwhile :\ndo\nsleep 5\nlocal status=$(curl -s -w \"%{http_code}\" -o /dev/null --max-time 4 -H \"Host: 127.0.0.1\" 'http://localhost:8080/_ah/health')\nif [ \"$status\" == 200 ]\nthen\nunhealthyCount=0\nelse\n(( unhealthyCount += 1 ))\nif [ \"$unhealthyCount\" -ge 60 ]\nthen\nreport \"HEALTH_CHECK_UNHEALTHY;STATUS_MESSAGE=0\"\nfi\nfi\ndone\n}\nhealthCheck0 &"}, {"key": "gae_publish_ports", "value": ""}, {"key": "gae_agent_bucket", "value": ""}, {"key": "gae_agent_bucket_path", "value": ""}, {"key": "gae_allow_ssh", "value": "false"}, {"key": "gae_app_bucket", "value": "vm-config.policyscanner-henry.appspot.com"}, {"key": "gae_app_fullname", "value": "policyscanner-henry_1-396458780154144562"}, {"key": "gae_app_zip_filename", "value": "policyscanner-henry_1-396458780154144562.zip"}, {"key": "gae_app_env_filename", "value": "policyscanner-henry_1-396458780154144562.env"}, {"key": "gae_app_nginx_conf_filename", "value": "policyscanner-henry_1-396458780154144562.conf"}, {"key": "gae_backend_instance", "value": "0"}, {"key": "gae_backend_minor_version", "value": "396458780154144562"}, {"key": "gae_backend_name", "value": "default"}, {"key": "gae_backend_version", "value": "1"}, {"key": "gae_dockerfile_appendix", "value": "\n"}, {"key": "gae_enable_app_engine_apis", "value": "true"}, {"key": "gae_environment", "value": ""}, {"key": "gae_has_docker_image", "value": "false"}, {"key": "gae_free_disk_space_threshold_mb", "value": "1024"}, {"key": "gae_full_app_container", "value": ""}, {"key": "gae_module_yaml_path", "value": "app.yaml"}, {"key": "gae_nginx_config", "value": ""}, {"key": "gae_no_appserver_affinity", "value": "false"}, {"key": "gae_partition", "value": "s"}, {"key": "gae_project", "value": "policyscanner-henry"}, {"key": "gae_run_http_unlock", "value": "true"}, {"key": "gae_server_software", "value": "Google App Engine/1.9.69"}, {"key": "gae_unlocked", "value": "false"}, {"key": "gae_vm_runtime", "value": "java"}, {"key": "google-container-manifest", "value": "kind: Pod\nmetadata:\n  name: managed-vm-pod\nspec:\n  dnsPolicy: Default\n  restartPolicy: Always\nversion: v1beta2\n"}, {"key": "shutdown-script", "value": "/usr/share/vm_runtime/vm_shutdown.sh"}, {"key": "gae_use_container_watchdog", "value": "true"}, {"key": "gae_api_verifier_image_name", "value": "gcr.io/google_appengine/api-verifier"}, {"key": "gae_use_api_verifier", "value": "true"}, {"key": "gae_fluentd_image_name", "value": "gcr.io/google_appengine/fluentd-logger"}, {"key": "gae_cloud_logging", "value": "true"}, {"key": "gae_nginx_proxy_image_name", "value": "gcr.io/google_appengine/nginx-proxy"}, {"key": "gae_health_check_interval_sec", "value": "5"}, {"key": "gae_mvm_agent_image_name", "value": "gcr.io/google_appengine/mvm-agent"}, {"key": "gae_use_nginx_proxy", "value": "true"}, {"key": "gae_health_check_timeout_sec", "value": "4"}, {"key": "gae_memcache_proxy_image_name", "value": "gcr.io/google_appengine/memcache-proxy"}, {"key": "gae_use_memcache_proxy", "value": "true"}, {"key": "gae_use_endpoints_api_management", "value": "false"}, {"key": "gae_iap_watcher_image_name", "value": "gcr.io/google_appengine/iap-watcher"}], "kind": "compute#metadata"}, "name": "gae-default-1-9c3f", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External_NAT", "natIP": "35.224.89.177", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "l8f5s-SeGRQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": false, "onHostMaintenance": "TERMINATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/instances/gae-default-1-9c3f", "serviceAccounts": [{"email": "policyscanner-henry@appspot.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/appengine.apis", "https://www.googleapis.com/auth/devstorage.full_control"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b"}"
organization/660570133860/project/cicd-prod/instance/2451914501315553183/,instance/2451914501315553183,project/cicd-prod,2451914501315553183,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-12T10:03:28.355-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-canary--default-pool-1388e059-z63i", "type": "PERSISTENT"}], "id": "2451914501315553183", "kind": "compute#instance", "labelFingerprint": "CqL4JGj6GKw=", "labels": {"gke-redditmobile-canary-central-6b47a78a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "EWeHY5g-F90=", "items": [{"key": "cluster-name", "value": "redditmobile-canary-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRekNDQWl1Z0F3SUJBZ0lRV2RkSTNmZ09MVWdqZE9SeEFhdFNJVEFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVVrd1J3WURWUVFEREVCMWN5MWpaVzUwY21Gc01TMWlMVEkxTmpJeE9UUXpOamswTFhKbFpHUnBkRzF2WW1scwpaUzFqWVc1aGNua3RZMlZ1ZEhKaGJFQXhORGM0T1Rjek5EZ3hNQjRYRFRFMk1URXhNakUzTlRnd01Wb1hEVEl4Ck1URXhNVEUzTlRnd01Wb3dTekZKTUVjR0ExVUVBd3hBZFhNdFkyVnVkSEpoYkRFdFlpMHlOVFl5TVRrME16WTUKTkMxeVpXUmthWFJ0YjJKcGJHVXRZMkZ1WVhKNUxXTmxiblJ5WVd4QU1UUTNPRGszTXpRNE1UQ0NBU0l3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMejN0REdNQUIrVG5zcFpNUVZ4ZWp6Y20yRnRFb2h6CnE0eVJvR2wraTN4dXgrNWd6RVBUVkUzcjIyaDhPRk4yMHZIOW90djNLNTNHRWpDd3VKQzNHRWIwTy9HeGdjWG8KaTdDTDJoUURCVjZXaVRGYkhabkd6NE9TNWdzOGhYc3g5U2FqMjM5eHBsaWhTMllrM0hjOFp0Z2ttWVJGRS9laApNUGN2eEpMS3d4Uzk3eU5jbDEvUUxUelpHRHFZSTJha0VXSDBwQmFFcDdBL0pMYkUxS2l2cmpRQzBRMXRwbVVsCmhLQkNsQkxYT2xsalNic0REUWRYdlBFSVFjSGlaQ1R4czhPR2grdE9Fdkc5L2g1WHhqRWhMQzRNb1R5WlNKdzUKQVQyQ1o4bXlXcmJIbmRZS3V5VW1PcmxUNG9mdk5mTXlvZENXb05oS3dReXMwTmF2WlZ2OXhUY0NBd0VBQWFNagpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0VCQUxBcE9GU0Y0eThBRTJ6aEk2VHQ1NVVJbU5lS1d5Ykk0UDJaa1ptZDhuajA2WDh4THNmOG9kcUEKdGZ0MDc4aFhpUnNBazgvWkhiSTNMN25QaTdrOTNoOWVhUkRUV3R6VkluZHBWRUxCbzVFTGNIR1VreGdqcXdLTQptZU1jUHRrZ25PTFhFUjBmY3V6Q3phSjYyLzlSZDM4d0hCRTE1dkZUUmx1V1cvQlhQNEl0a2JXU1FwY3ViT2RxCjRlMUZFeXVBMFhjUmVhb2YyeHAzalYyN09YWnRIQW5BeFhIREtxQ1FwKzhPUEVJdEVleFNuNkZhOTZVN1ExNksKcTFrL3lSZmNrTnFESHJaTW0zT0dVQ3N4ZjNnay9NQ1pSMy80L1AxTUVBcDNhNkpCYU9ucGxoRnk3bFNCeU93aApCK2J3M3hOWW1FVGcyVDhtUG9WOE1TZjh1ZE02N28wPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.60.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"1\"\nDNS_SERVER_IP: 10.63.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T17:57:49+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-central-6b47a78a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: BUKsHduYNklyd0kaMdL1NISkcAGaLgtNQhdup3FULrU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIRENDQWdTZ0F3SUJBZ0lRWFFZRnJXOTJVTncrQjZmeCtpcDNUVEFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVVrd1J3WURWUVFEREVCMWN5MWpaVzUwY21Gc01TMWlMVEkxTmpJeE9UUXpOamswTFhKbFpHUnBkRzF2WW1scwpaUzFqWVc1aGNua3RZMlZ1ZEhKaGJFQXhORGM0T1Rjek5EZ3hNQjRYRFRFMk1URXhNakUzTlRnd01sb1hEVEl4Ck1URXhNVEUzTlRnd01sb3dFakVRTUE0R0ExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUIKQlFBRGdnRVBBRENDQVFvQ2dnRUJBSnF6aWQ2WGVKbDVlMkRDcUk1SzFZUFg1ZExBSDk1cHd4SW80OHhENjJKcgphZ04wSm8zbmtFalRUdzJVYm5Sa2pNNlpxV0ludDFlek9TZVpzUlU2TlR4ZVM4cjNvNFVTWWl4M0NramJ4WU1ICnhmby9yUHRRWUJrbHgxc2ZyUkV5dWdrem1OY2E3YldXM1A5d3RGbnhSR1lYOXhvQlJ3S1l6aUlhdWVSd2pDc3cKMnEveVJZUWRTdGo2TFNtaVNPOEhmNHdWOTdDWVpxYSs5cUJxaDdNZHpCUXhXQ3NVYklTbk1JVXVGcFNCR0RMQgorcTBOU0djY2l4VnFmanJRVVJzdU51YXVXR003L24rYWtGT3Y5N3VVZ3RndVFoT0xDUDEvSFE4bUZQVHVpTW1DClNKNTFWKzB2ZzhMdnBKU3RlUXdFTExTYXp3ZkZOb0tDeDdhNFhsMzI2SWtDQXdFQUFhTTFNRE13RGdZRFZSMFAKQVFIL0JBUURBZ1dnTUJNR0ExVWRKUVFNTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBUFdkdmVBU2NnVThvUTIvVStyOFRBcVJ4aHhPMFMyOTNsL01VOUc4a2RSClZ5NnhuMUMxM0FrM1kzcVRCQ3FzNWpLR2hPdEFMM0xPakJVeEYycFljemh0Y0xWV29BelBEemxMTktUNEV3UGUKejZkYzJXTEhUaHMvdXQ1anVOS0t4ZHlGNFlVUmk5TnNSNnRqc3E4QU8vVVJoQU9nSGZoVkhVZGJBeTNRell6RAp2TVo5aHdKc1hiWXlZd0hmRUtaZWtpUTZTUm9HZWl5dGlpV1NXWGZmN0dCbnZHSFViQXBETTZUbUV1eXJOTnU1CnhlNHl5YnJTTmxFU2RLaTFDQ2hsK0xHOGFqNHBtZ0o1MmYyNWJTUEgzMVFhT2RaZWZrTFBaTlNoNVFxbFkvQngKeC9UTG1OZExIczdlL1V5OTc5UDZ3VlQyRmxZd01wdi9SVDIrU1RncG1GMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXJPSjNwZDRtWGw3WU1Lb2prclZnOWZsMHNBZjNtbkRFaWpqekVQclltdHFBM1FtCmplZVFTTk5QRFpSdWRHU016cG1wWWllM1Y3TTVKNW14RlRvMVBGNUx5dmVqaFJKaUxIY0tTTnZGZ3dmRitqK3MKKzFCZ0dTWEhXeCt0RVRLNkNUT1kxeHJ0dFpiYy8zQzBXZkZFWmhmM0dnRkhBcGpPSWhxNTVIQ01LekRhci9KRgpoQjFLMlBvdEthSkk3d2QvakJYM3NKaG1wcjcyb0dxSHN4M01GREZZS3hSc2hLY3doUzRXbElFWU1zSDZyUTFJClp4eUxGV3ArT3RCUkd5NDI1cTVZWXp2K2Y1cVFVNi8zdTVTQzJDNUNFNHNJL1g4ZER5WVU5TzZJeVlKSW5uVlgKN1MrRHd1K2tsSzE1REFRc3RKclBCOFUyZ29MSHRyaGVYZmJvaVFJREFRQUJBb0lCQVFDTnZWM2VrZzJ2SUgwSQpaSkdtL2EydlJNcVBVL1JmQmF2eklYL0ZrWjFDNllPU2NvTTRsU2UvY2N3R2R5N1VlYVFCVHd6QW4vNzkzWG5LCmJLaXcrRW42YTdNcDNjYjJqNmRmY2huOE0xQStBNHREQThCcjZuS0IxL2xWNWluZGpncWhqNkxEd3lwMHJDc0QKNTdGMmp2WEtUTDdjRnJ1SEI1WWw3VExRdU1YVWMxdlAvWWRuUXZtbS9rZ1lzMG9CL24zUm8wbWFZVUoyZG0wZApBSnBsSk1ycVQwNm5KSklHZVpoblBYajRBVzkraTFMSjNmb1Zhbm0zWnVIRmpLSGpzT000SXZDZXRaVk9OZHgrCksyUEc0ZzNESkZuTk5EWUIyTmRGbS9EM3lnZCtyNmdLUm9USlFEVWhCaXJCWXZqWGxnTlc0RUJlSGQ4bDBnUUEKOERNS1ArY0JBb0dCQU1OMzJMSll0OFlvSWVQZnh2SXpGRzVkTEs4L25xaS9XaDIxY0JISUZFeFNSUDV6TDFPZApjZ3dlNjhUUFl5aEJETWxLTUVTdTBVQkg2ZXZHbzBBTzViOVFjUHB4ZkF0SVZ3S2h5ZnJrb2ZoT1l5cDUwS2V4CmhVMWlyQi8wdmNvWm9rdUc0T2d3ejNqcmpBRGplWnlLM0pWa0JRV3V1WFZGRktnTFVhRm0wR3paQW9HQkFNcWIKMEtnRG9EODdUYUxNY29IaUFLQWlhaStQd095VzJzUW1KOUUxQXJIRllDcHp6ODgxeXNyUU9OcVJUbkNZdC9tNgpDYnpma3gzNlY1UXFkYzEwWm9Vc21iNDR6WC9Ea1R6MmpGSHh4Z0RCMXVnRHJHWkVoUkRyT25zcG1jNTc3dTdhClJ6OVVpQmRSd0hJdDBxZW5MalpqREIvbTJxS1dZcUZkMXpsR2tzc3hBb0dBYTNNa0lkWDNIK3pMeEhJczhOTDMKZGp1dDVxQTRYVmJpK05YV1IxQVBLRzFKRS83SmsxTkhjRFpITUtjNFFOYVJhczFuZnpvQ09TM08veGJ3Z3JRdAp3MTg2MjlFcWVTRkpBMTlnb3BTd0hNa3FaaDBVZ0RwcnBzQ0pFZi85bkcwKzgvbXZCTFJnT0g1ek5jSFdCaUduClpFL1pHdWlUZGsyRkwyTVplbm9FTlBFQ2dZQVE3RWJYWWNZbXdldFFKOGVBdGNIYm5rUkVTTHVTaDE4cWR3MW8KV2djcGxoVGNOdVFxcUpHUnN5YXNpdXFFV1IwMHpLYzNrVzBXV2V5cXdZa3BhZ21PSWhXTlgrMDZPTG1PNEFFRQpieTljck5Rb2VQWVRiTEc0b2cwMmNGa2FlQnVTODhSenM3blNTTS9NT2F1WXVVd1EydUVPWVJmdDhLVzRXTUE3ClZudTRZUUtCZ0JnV0NiMmIwK09OOUlzeE9KY3Z2UGMzU3ArdWFjazN4a3NGVWZmejdUMEJpUWUxOEZNU3NNN3YKdElqSXA3OTNBWU1mMWVyUWY1Nzh6M0cyYnJXaWxFRmZYdjlEcHFnTVRURlZuU2RhK055WTZQcVUweUJhcXJaYQplMFhST3R0Sks1VDJ4ZnUyZzNVS01XMjFYcHZyOUxCNXZDZ3VybCtHYzVzTHYwV3F1MFY2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.197.231.35\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.63.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-1388e059"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-canary--default-pool-1388e059-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-1388e059-z63i", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.154.24.30", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "J7Oj_-PvN-s=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.9", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-canary--default-pool-1388e059-z63i", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "CqL4JGj6GKw=", "items": ["gke-redditmobile-canary-central-6b47a78a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/pso-cicd8/instance/2490728687705938734/,instance/2490728687705938734,project/pso-cicd8,2490728687705938734,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:29.328-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-prod-west-default-pool-75f1642f-mya6", "type": "PERSISTENT"}], "id": "2490728687705938734", "kind": "compute#instance", "labelFingerprint": "h2CDrYm_xXo=", "labels": {"gke-prod-west-9cf5507e-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "u9PNIVkqDmM=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRR0xRNHZ3ZUNlWmVWZmtwc2JYeGZXREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdGQyVnpkRUF4TkRjNQpOVE0xTVRFMU1CNFhEVEUyTVRFeE9UQTFOVGd6TlZvWERUSXhNVEV4T0RBMU5UZ3pOVm93TmpFME1ESUdBMVVFCkF3d3JkWE10ZDJWemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMWGRsYzNSQU1UUTNPVFV6TlRFeE5UQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOeUFJR1lkMTEva1RaVWt4WnBqd2JlZwpvWmgrQ0hVRjZ2NTAxV3dXRHIzY2FHV3pEYmRvOXN4WWxtSmpvZk5ReTdPNDNXMXlqQWRpT0xSY3NjTjF0Y2ZpCjNBTkFuZGxiVUNMbHdXTDkrTTRUNjF2UlFqSUQ5MmtkRHpTMjJiV0dOWk5zemNWa01aSDhGSU41L2I1aFFnV3EKTGFIT0cyVkxEaUxKUjNyby9obnh3YkhFNEN4Vm5VZnpQTnJqU0hKcHdhV0hzVEROUVF4bG1FdmE2WEdndXRUMAp4ajhLQURiUTEvdDhQZlJrdEIrOVhXOTJ3VytQRktucDhHTHNsMHNmM08vUGFCMkNWS2pwMHVISktlV0YrUUVuCnczTkMwMVNWUXJRbWl4NllkdHdaeDRhNkhKUFYrZ3RKNTF6REV2R0VqenVCNDVvZWtxOW9ZR0krVlRrNDJhc0MKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUFaYVJFSytFMFlIcU92dTlpWmZWNXo3cUhkaEFXTzNCZm41UWdtWFlOT2xlVHMvCkRROUMvdDJxdWYxOWk4aVZ3ajNoVzQyRm1PL000cVJVOWxqZWlmTm1Tei9UQUYxZTlHb1lxVU4xWTBUTFJFQ0gKVGtUUnc0MW9SRXdMYU1KajAwODhaZ0ovaGRlZ1ZKTkpZbDdIeU9Jc0FMK3JyR1JsYms4NkdId1hYdHQxRzdDdwpVZEhCVXFJMU1ENHQ2V01TNG5zbDdVRmxXV0pXYURoRHlqdlVoK1gxUWg3Y1YzYUpPRnJqcXFIQnZiY0hEQUpOCkV3ZDBBVUxoYkVQQnRqeVRNZWl1cFMvMDNpTy9YRzA0RC9NZUlMcURlQWpZaDFvNGsxVFNWVm4yRllXcUN1MHoKblludTZMaXhUTFVpUDdOOUhuYWdGemp2cm9rR3R2YXQxaVFxeXBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.120.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.123.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:18+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-west-9cf5507e\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: Z_vlAxXbJ1RWwVZ4bimoPobeEpu9OxYV5V8hLL6SLxU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQWZDZ0F3SUJBZ0lSQU1nNThMWVo0UUc0ZlNzekFEQ1NHZ2t3RFFZSktvWklodmNOQVFFTEJRQXcKTmpFME1ESUdBMVVFQXd3cmRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTF3Y205a0xYZGxjM1JBTVRRMwpPVFV6TlRFeE5UQWVGdzB4TmpFeE1Ua3dOVFU0TXpaYUZ3MHlNVEV4TVRnd05UVTRNelphTUJJeEVEQU9CZ05WCkJBTVRCMnQxWW1Wc1pYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDWmc0bzQKUVZUM2JCRkVsQUl4cSt5ZGVlcGgvbUVhWWFjaVFZZWkrZ3FZZllweUpJWCtQODd1eUl5d0lJUmo5dnVnUGZVbQovbFNjTkk5QWptdVY1bEMwQ1QwSUY4OEMydDB5dTFjd3VrWjYvb0ZPUmErN2ZkZ0xYbG8rc2cvMDZGODdUdFhICmlhY3Fibk9vOFJPdVRpZGlZTitrR0Z2djFvamh4T09qcU5yUHByWEVjY1FZTDEzelFsYTNDSWZhcXY1c3B4Q3oKdk9OTDBpdWJZWHJBRVFqQ2lkalpvaUJWcW9weTVaY1dNL3FKLzVqYm1DMndZZTI0NGorTG1JZzUxWDkrZjgvRwpVTURrSktuc3I0TjNHNzhBaFhETGF1UnpaNXhEdEJmWWFFaExSMjVYV2JpczhRd25lNTVraDBYWkQ0eGZVaVdDCk91N2FIYTJLMFQ3Uzl4Yy9BZ01CQUFHak5UQXpNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURPQW44VwpabUtMREZsaVlocTZJeDVuSUhSWjg4dDRKQzBZM0RKRlUvZUtVSEltYTE2NXp1WDI4Y004SXl6L2ZwbmQ2cmVwCi94WlFxU3Q5elQ5VlcydHhCcHpFenRJWXBOYUR2LzdMT09OdXFJM0pJc0pIVm5USU9iZTlTNFlOd2VBZWhrQW8KV21SbXliWk1xdkc5WVNhSE5lczFIMU1Kb04zV3lkNHBmT3hCaW4zS1RBeDUvUzNYdzRWbGlMTmVCYjI2djdvNgpoL2hRcDFJbHUyblEwdFZFQWlxR2lpMmpyU1Yvajc5THBPMUVLZ21BOUk3OXZUZXBKUGVuRkJKbElFdHVMd2NyCklYYktGbTBkWitBcERBOURPcTdhZXE5OUN2RGc0MVhwMjFiZ0tRajdodWNrWHA0T3NXV0xXWG9kckJhMG9TY2gKd3dzS0lYbk5pUUk0V2lYWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbVlPS09FRlU5MndSUkpRQ01hdnNuWG5xWWY1aEdtR25Ja0dIb3ZvS21IMktjaVNGCi9qL083c2lNc0NDRVkvYjdvRDMxSnY1VW5EU1BRSTVybGVaUXRBazlDQmZQQXRyZE1ydFhNTHBHZXY2QlRrV3YKdTMzWUMxNWFQcklQOU9oZk8wN1Z4NG1uS201enFQRVRyazRuWW1EZnBCaGI3OWFJNGNUam82amF6NmExeEhIRQpHQzlkODBKV3R3aUgycXIrYktjUXM3empTOUlybTJGNndCRUl3b25ZMmFJZ1ZhcUtjdVdYRmpQNmlmK1kyNWd0CnNHSHR1T0kvaTVpSU9kVi9mbi9QeGxEQTVDU3A3SytEZHh1L0FJVnd5MnJrYzJlY1E3UVgyR2hJUzBkdVYxbTQKclBFTUozdWVaSWRGMlErTVgxSWxnanJ1MmgydGl0RSswdmNYUHdJREFRQUJBb0lCQUNobmI1eW96VlVsczFISwpadDF0ODZQcTc1NkZGa2VjUmlJRS8wOE00bmNLSzhNcEM3OUVTaEdjNVRLQ0RIWkhEaWs1eFdsUzdUQUR3V1JyClY3T25YN3hTNWlaWUpkc0pnY2lWZURoUi9yVG1nVi81aFd3aWpoZEg2UmF4UlBQZnFSanlBZUEzd2JDd1MyNisKck1CbXY0VHNIRkNUUExkZVRyNmxWSWpCcTMyVmFjMUN3Zi9Nc3l6TkZDZDJVc2xGMFl1TC9KV055UkE1MTJRYgpzL1Nzb1dZN0tsYXdWY08vMldBVHJEN0tuQXdpWWNnb3Rzb0R4QnVTbmc3SGpxRUxXZHhSZGpwc1M3SnlTWXZGCmgxaVhSc1A3Wkc4ZU43b3Q4bWlyUHlzbkxSS1NnWE9nK3AvQXFCVFEzdmJ6QkdTY0thQnd6eDVzUThsZXptemgKMVFXT055a0NnWUVBeGNkZDVpRDVzUDJWQXFLaFVTdzMxMlNxaTdUY2FTbUY5VFN3bVdHaWFLd0FlYkYrY2xJegpjV24xR2VTeDc0VVZCQU9jYmlnNlVtdkFGaDFIeitDR0dNVWtXSHBkNFhtT3VqTHpybkNLOHVSZmVaTitOYWhTCmYxRG56SVcvMGQ1R1RJUUNTdFo0U3picmJJSVZpTkw0N2l3T2l4OVE0NXVYZXJJdEVKd1VxUU1DZ1lFQXhyUmMKY0JZUnloWURScUFWYnY3dzJPcFBlekUycXNFZUMrVmdSb21SUjIxbEtqd0FoMHA4dkZZZE95L0dFRkpIUkhnaApTRzd1VFZIQTBvTjRWemV4MFBiSC9rdk9zQUIwYkxDSDZqOUQrUVF0VWlUMlhKaHl4TWY0Z21EeCs5YllVVnhXCklsUVpybzhacU5kalA0QWJQcmRnU0lSK3BlMVkrdE1Pbi9CSHZoVUNnWUJiUXdpNEpTVXluNEMvNjQxbXFISEkKQ1dLTS90THFEOGdKZ3R1dW14ZlhGdTlOT0RMeHk2NkRPZkpvbFZmcC8wM1lRVlpRbW0xM0ZOTlpJUCsvRTRxdApLV01CRk0zM09pRTdHRUhMajVEK1RaVWt3NE5zZlJROFBYZ0lydnI1ZTRpU3pDTkdwenB3OHBHbHkwem1pdnRrCjQ1MStZdC92ZHg5cDlZZkg3MDIxUXdLQmdCQ1J6N2VGRDV5emN6aDdkdTRYa2t2MFZnWm0xekVzQTI1b2hUdTgKa3dIS3pJbldFUkUzRSttOG9KbGo1WGRNOVNadmdnOEJPUnYzZWtYVHNzQkxJNmZTUEdFblB5Z01FYWxTbXpMYwpiYldoTklwS0RNVXg3VGdkbU1wK2ZROU1IaVBDdUdnS2JVM1NId2ltVlY5aE5tUm5kRDczMVh2T3JBSFdnYnl5Cms3ajFBb0dBZTVWNWM0OUZZV1A2bldLZmk5NmQ3NGwrMmk1c0JlOUtsSVBCUlYwYkxPSHIrRittRFpwRnlxQmIKY1JzbVJPN05pdlBDRVhmY0tYVko2L3IzN3d1NURyTmx1Kys1cmJaSm4zTmpEd0swRUwrSVQ5L2tMaVo1WHhiawpGdmdtMGpNU2FVWE9IVmhaUTBCaWgxZzVlSWtqWWhoVHZZM1d4Z1g5cGwvdEx3Ni9tQWc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.232.221\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.123.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-west-default-pool-75f1642f"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-prod-west-default-pool-75f1642f-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-west-default-pool-75f1642f-mya6", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.232.102", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "9ojVIBcheUo=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.25", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-prod-west-default-pool-75f1642f-mya6", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "h2CDrYm_xXo=", "items": ["gke-prod-west-9cf5507e-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/henry-rc2bbb/instance/2508571704098907385/,instance/2508571704098907385,project/henry-rc2bbb,2508571704098907385,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T06:58:47.672-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/disks/forseti-client-vm-4322", "type": "PERSISTENT"}], "id": "2508571704098907385", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "_Q_yM6lhNmw=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4322/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4322/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-4322", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.226.157.137", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "UpUh62D-YPI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/instances/forseti-client-vm-4322", "serviceAccounts": [{"email": "forseti-client-gcp-4322@henry-rc2bbb.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd10/instance/2512334520688088387/,instance/2512334520688088387,project/pso-cicd10,2512334520688088387,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:18:04.408-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/zones/us-west1-b/disks/deploygce-deploygce-v004-qcxe", "type": "PERSISTENT"}], "id": "2512334520688088387", "kind": "compute#instance", "labelFingerprint": "cgi3EtpBNdo=", "labels": {"deploygce-1479943390902": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "i0KqoA8GH6Y=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.8,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":10.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/839310262655/global/instanceTemplates/deploygce-deploygce-v004-1480237236275"}, {"key": "created-by", "value": "projects/839310262655/zones/us-west1-b/instanceGroupManagers/deploygce-deploygce-v004"}], "kind": "compute#metadata"}, "name": "deploygce-deploygce-v004-qcxe", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.228.103", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "oIhHXQNMsPI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/zones/us-west1-b/instances/deploygce-deploygce-v004-qcxe", "serviceAccounts": [{"email": "839310262655-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cgi3EtpBNdo=", "items": ["deploygce-1479943390902"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd10/zones/us-west1-b"}"
organization/660570133860/project/cicd-prod/instance/265990513764159282/,instance/265990513764159282,project/cicd-prod,265990513764159282,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-10T14:17:01.493-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-prod-centra-default-pool-6e93e17e-tqvw", "type": "PERSISTENT"}], "id": "265990513764159282", "kind": "compute#instance", "labelFingerprint": "epx-_16_p0Q=", "labels": {"gke-redditmobile-prod-central-f140a72b-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "pz0pNzCHFZ8=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lSQU02TDNHYUliTFBRaFJ5VExjL2pYWDR3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQkpNVWN3UlFZRFZRUURERDUxY3kxalpXNTBjbUZzTVMxaUxUSTFOakl4T1RRek5qazAKTFhKbFpHUnBkRzF2WW1sc1pTMXdjbTlrTFdObGJuUnlZV3hBTVRRM056RTFPREl5TVRDQ0FTSXdEUVlKS29aSQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ySjFCMlJ3cnhJSHNxUUNxVFovWXEvYXZQdVUydWpVR2FqCkVESndrRFNIUTRFZEliSndFSlpENG9tSVlVVzJDVVlEM1hweW1SMnNTd2VtaHAvbUlWcEhOOGF1Qk1GZ0VuUk0KSlUrdUQ1di9IZFB3Nm5hNHpobWpSTVg0Q0ZmV0UzYVkrSDJidTFjY0hKenRwVTZhYWh5b3dsSUVQckNwZjArQgpQTHI5VlRLZU9NMlg3aXVKNkduSlZEK29ETlhlNVRPQVNnUWVuckpJb0ZIVFM4L0RaZlFTbEFFVzRsWlpQMnpYClJwa2ZuTDFFTUhBVU5wc2N6RGNvelM2VVVBVHhjYnhhQlVUYjVCL1BuWEMzWmVCZ0tsY29QWDhmNWEvNldaMTYKckYvMDF2RmloK2FHWEF3cC9FaVZiUk43a21xZmFkNm5EaktKU1BsNjVrbFdWbzRFa09VQ0F3RUFBYU1qTUNFdwpEZ1lEVlIwUEFRSC9CQVFEQWdJRU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSHU4QlNSUjl5KzEvK0QyMktSMTRORlRQZXIyODczbzdjTnE4L3c0WVVXdytSaWtxYS9QYjhWLzYxRXEKYnplbkplQ3NUUjdWS21kQ1RYM01uMFhYQ1JKbXpEUEMyanhqSWt2K2YvWlV0NkxUMXBZdFhNYkFnTHZoSEx0cgpiK0YwZU90MWhTelFTZXRDazBZblUyQzc0U0t2VHlxZ1B2blJwalRlanZRZmZNL0JQeDNVVFlqQ0U3QzkwMjVCCkh0SlY2S0h5OXpCNzM4ZG50eTBaZTRmSkl5WjkydWhYSGg3cGtsdkdzV05zTUVLN2xHdHVDNldNRlhxNGljeWMKN3RWRzk5c09XOFVtL0lFbjB2R2RTRUFxVzhaMUQvQkppd2gyeEJSMHdoaXdYRkRob1lLbHpWNHBPUktiVXJyUgpWM0xTYnJrTXIxQTJoZXRTdU1nUmpmVm1YdXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.4.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.7.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:18+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-central-f140a72b\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: X6lvXl1D5ck0ETLYV2tObZafr6dMn8235hgKku_XEP0=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lSQU0yZVdaaFR0WWZ1RVNwcWVYSzUycWt3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQVNNUkF3RGdZRFZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxRXdkdElZTFZ1Z3R2ZmJIVUxaQW5pSUhJUGdXMFJpR054VFFuaWFiV0JCcQpMM3R2cmV2Z01mUHo0SDRITmg0dG9jOWYxUXpsL2l6OVFNdEE5VE1aUGQxalpaOHFtYWFQcDNYUFVYM0JoQjhxCjF5SmlNTk03bW9zcENhRTRGcmRlSmczNHZyZFF4RUlZNldXMUN6Y0JxUmxhd1ZrdjBaY2o1aTc3aHBwMnU3QUsKTzlQUGsvY0MwMWM1VFEwbXhacDZ0a3IyRStWeHl5emVLUndISThkanhRRUh2RFVhazlSTWRwMU5QOWgvRGNBbApvY1ZkT21rRDZoWlJNeUQzd1MyUG1JYkxjNmxKdXpPNTAxdEZCcExUa0l3OWxzRVU2dldDcTBMRzdCZEhqODdPCi96MmkxWlMrWWJoTHZxMmMwUTZXZk9aRlJicFFVV0tRZXlCZGZveFBIUUlEQVFBQm96VXdNekFPQmdOVkhROEIKQWY4RUJBTUNCYUF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVlUVnFqYUtOY2FmRTVZa0pUSFVKbG42YlVUUld4VnRDNlhRcEYxdU85aHRuCmZYT3BtRWFBT0dXemlKenBrR0s1OC9vWFE1M1JiL3B5Q3hjMU5RNGkwOGxoTWpjd2FrQlM4Q0EzVEhhUlM1b0oKWlZIZzE5UUdxeTRHN3M5Y29wNGdkQ0hZUUYwZmdGVHBybFhocVl6bTFDWU5GQXdnN2kxblNkNCs5MUZndEhCcApCMkFjS3hIVGpHdmdPekhGWUN0NzRlT0hVSnk5bmhTUmk3R1lKcjlxZjFxelhmeFdPNzdDZzJFek9RVWVTWlBlCnZGVVA2a2ozczAyazE4Q2tMUjI5NDE1eGY1bmJCNGRWZTVNUTBLbUgyTFcvQXk2S21UQkNKem10QWdOMUtCVXkKTmZVcFN6NDJWWWx5Mi9ZelFCb3ZvUnVLdC9HbFF3QUgzY0ZBUWphYU9nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcUV3ZHRJWUxWdWd0dmZiSFVMWkFuaUlISVBnVzBSaUdOeFRRbmlhYldCQnFMM3R2CnJldmdNZlB6NEg0SE5oNHRvYzlmMVF6bC9pejlRTXRBOVRNWlBkMWpaWjhxbWFhUHAzWFBVWDNCaEI4cTF5SmkKTU5NN21vc3BDYUU0RnJkZUpnMzR2cmRReEVJWTZXVzFDemNCcVJsYXdWa3YwWmNqNWk3N2hwcDJ1N0FLTzlQUAprL2NDMDFjNVRRMG14WnA2dGtyMkUrVnh5eXplS1J3SEk4ZGp4UUVIdkRVYWs5Uk1kcDFOUDloL0RjQWxvY1ZkCk9ta0Q2aFpSTXlEM3dTMlBtSWJMYzZsSnV6TzUwMXRGQnBMVGtJdzlsc0VVNnZXQ3EwTEc3QmRIajg3Ty96MmkKMVpTK1liaEx2cTJjMFE2V2ZPWkZSYnBRVVdLUWV5QmRmb3hQSFFJREFRQUJBb0lCQUhZeGpxTWJpSmN1VkFHWApjSDlFbjdqdTJPYlVsT0dnUVpJcGNpRy9wMVYvb2JOYkV5R29DRG5NeERlakN0bDg5RHN4Y25JanJ0cUZLZzc1Ckw5T0VZWFBMS1dWVEZRMzNwZWZMbXgvMkc1UDRkNVBET0FabU12UGtTNXZSdDV4c2h4aGVzNVR0RlRIZjRiTDQKbE44ZGNITWJ0VnNZa2JhMldLWHQxUVBCTXlXMzVuZE9uMlZhbDlKaGFQTTNNVVROQW93UDZCQnRIdllMMkVxbApuRG1kcVdQdVh2RW9HNm83bmFuRkRlK0VUWUY3dTBlV3hlS3M1Zms2c3FCUWlGOWVDTFZjYUVHRmdlNmU1S1hqCmZ1bUtVTjRqZFZmTnl2WWZBcHVRd3Q4T3JGYlJEeG5aQUhYc0lEY0xjRlQ3RzBRY2pyNWNwbGV3QTk3YTdRemEKZUZ1UnRFRUNnWUVBMmFoRjdXQlR5RjRzZmdDa0J3ZHlDWVJ3S1NrdkI0ZmpLWlkyUm8rMVNBMGpEZWUrZ3U1RwpHckNHeFpLaWF6WG5kUVBBNGx5ZnQrVitaREZSeGkwb054SFlQK1dlcDRYcXNFRWtmRkZGamI0bXFRcFpQSmdaCjVFdkZnaWl5WWs0WG5KSUVBMnRIWVFGcUM3SmNDd05GcVFkNHQwVUlMWW9yZTJPQ1dMNWdyd2tDZ1lFQXhmSFkKK3BNcEpUbzJsU09nOUJIRzBmMjVjeFptMEdqT0lCWUIyTlZXTkdlc3FGN1VwMUdZS1lqQnNCQ3hjeUkvdldGagovcXNXMXZybWpWVnlBNVNXQVBpblUrUFg2Um9EOHdwWHhoYVpFZ1o2YmdlV2orckU5MEJ5QWkrdDJkNVFSdDRvCkovV0JxM00zK05RNUFZemRobFV1c3doN0V1TlgvUGNYeWJFOTBIVUNnWUVBcXVWTnFsamt6OERwakRGeW1MWkcKMnFRcThKYU9mNG81V1ZEQTR0dzVDUTZQaEg1OS9nMlo2NkRJNE40R09zbURKMFJBTVR0cWlKaGZpY21UbkZlZQphTWJSRlRKMFJMS0lGOFcrSVFJcTYyVHVzL0VWS2RkL0ZOcE5oS254amZBazUrRloxMWxuSFFwZ09qamJ2aVhlCmp4MzNzV1k1U3BCZkhhMS9EYkRFOXdrQ2dZQlRpOEZGK1lqYlFwZTVHT0dkUWtlRmFDNjJ5WlM1a0JLMzdqSDMKWUF2VGNKS3FPZVJOZnAzWG9mWUdKdldPbjcwQlpMSzgwVitCZTBLR0VyTmRtWUE2aHJpeEtyQjluVkpmYVZVawpzWE1IN1o0TkJMemluM2RrMkZtR1hMTm5Dbk1kaGpTeXNPZDdBdFZ6KzdiWDFhbkdRZnZFNnVadlVXOVl3TDNVCmppK0Y1UUtCZ1FDeUpIUUZHMVFUTG9uWUU2K2MxOEhvMS8vNDAvNVBMZWJUZ0RWdWRuM2RCQlhLbGZ5N1kzRTgKd0JXaXJQeTBHYkVaVWx5SkhyZWpSenByb3B6OGRYdi9yZ2VDUE9TcFdlV2VOY3hRVCtNeStRTjhNNnMrYzF2bgpSRnZlMmRjRlk3RStndWp2ejRhZXcrY0pGdzhaSEw0VStybUE0a3lZOUQ3ZWhIQnllYjl6ekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.154.131.245\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.7.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-centra-default-pool-6e93e17e"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-prod-centra-default-pool-6e93e17e-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-centra-default-pool-6e93e17e-tqvw", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.197.176.93", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "vGZ9kUyCo2A=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-prod-centra-default-pool-6e93e17e-tqvw", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "epx-_16_p0Q=", "items": ["gke-redditmobile-prod-central-f140a72b-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/policyscanner-carise/instance/2745632136292821143/,instance/2745632136292821143,project/policyscanner-carise,2745632136292821143,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-05-05T12:46:00.976-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-8-jessie"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/disks/www3", "type": "PERSISTENT"}], "id": "2745632136292821143", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "E6pJtT5r3js=", "items": [{"key": "startup-script", "value": "#! /bin/bash\n      sudo apt-get update\n      sudo apt-get install apache2 -y\n      sudo service apache2 restart\n      echo '<!doctype html><html><body><h1>www3</h1></body></html>' | tee /var/www/html/index.html\n      EOF"}], "kind": "compute#metadata"}, "name": "www3", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.154.200.225", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "dDaqZJGqON8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/global/networks/default", "networkIP": "10.128.0.6", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/instances/www3", "serviceAccounts": [{"email": "534416047782-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/servicecontrol"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "9GVlO4gPawg=", "items": ["network-lb-tag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b"}"
organization/660570133860/project/pso-cicd8/instance/2747308444836290599/,instance/2747308444836290599,project/pso-cicd8,2747308444836290599,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-12-07T11:11:04.513-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-staging-default-pool-c40bd04d-mwae", "type": "PERSISTENT"}], "id": "2747308444836290599", "kind": "compute#instance", "labelFingerprint": "MjMzJPoWHLo=", "labels": {"gke-staging-9696e33a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "OQqW6cXU6YU=", "items": [{"key": "cluster-name", "value": "staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRYjJzeTVEK21HNWp3ZU9BM2M4dkx6ekFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNRFF4TWpBd0JnTlZCQU1NCktYVnpMWGRsYzNReExXSXRPVFF5TWpZek5EQTBOell0YzNSaFoybHVaMEF4TkRjNU5UTTFNRGMzTUlJQklqQU4KQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdm5mVkd4L1BvNXVrNzhkb2hrT2R6TDkraDhQbwoycWdQTUVDVzhGblhoVHBDeUc4azd5RHJNOHRWNkErSHJPUnN6UlhHaU5VamtSazBZbEJ1ZnNiUkJVQks2LzJpCkUrL3FaZyt5aTFrczd3WTJQTFNPYVRpV1FmV2pHOXdTdDVlKzcyVDc0c0VJNVNPNE1LV3Y2eWJmQzd5amNreDIKZSszV2MyU3FzM3c2UEhLYnZDMy9ITURxN1Z1TjdzSmd6enJVajlzazdhUEtCRm9ENlNWVDg1cUp3bjBERUVzZQpNV2ZiM0R2T3V5SGVuckUrT0R5bE1manJsTmhqVHZlaVVkK2EvTjJYaVV3QjJWaHZhTy9JNjBKTDNRREFmR1ZUClpLUThaejNsNkhkQ2hDMGhYS2ZhQ3l5ZWs4MVB0UWRYZEE5a1VVMGwrL3I2NzUvemM3a3Y0ZHVQTXdJREFRQUIKb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjODU5dkZnamJiSHZiK25EY2E4MWpLV2JuMkRYdk5OYUQzdHdFOFQvQzBJSVhhRTI0cU51CjV1ZWs4MnprclNXencrelhGbmgrbjloZmZubERtZDIrYVUrZklWZzN4bnQxNlpLK3NZMUI2L0RiakkzNkpDeksKY0l6NkhYWm8wQzBGZXgyOVhQVkU0T1pNNDBEUEgvZm1mRkFIRzdaWGNWUEpONU9kam5Kb0V4SjBLWjVoRTFTcwpjOGpNcTZmdmh0czRCbmJOeTlIRnIyY1FsTmV3b1dCUnRjWDVwRXBtVUpTR3FTaDBiMGwyNjIvTDBhMnRTMHphCnpjOVBpMTdkb1hLZjgvNWJ5bmpFVDdhQ1JYT2ZSdzBBUjlWTTMwaXo4KzNPSEQ0ZEVNKzlMT2p1a3RtVWpkQ3MKWXl5amtFTkRVaHRKdVVETHlLc08vUVpJcVl3MUgxUXUyUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:57:51+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-staging-9696e33a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: HaoxlbNn0of5qYViLOuxO0_bOTaycMT0pbStvNcuCC4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRZHpvRWMvVUtqK2dPek14OHFLVFErakFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNQkl4RURBT0JnTlZCQU1UCkIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM5dzM5MllyOWsKTlNnbXNVWEVIbW9OMHovcFN3SXFyRmhZWUc5SkN3eS8rbnkxenRQdEF6NkpVT2hHckhBdnl5NkU5SnJ4T3VoOAozbXI2ZmNQQ1FyVklXcW1FTUdPQTBKSVVxWjR5SVNuM3BzdmJNUFd1bXo1NGxhSVA5NlR0LzlNVnFiZW93UWNzCktMUGU0cHRyYXdtTU1TM3ZIU091c0dEQnBlY0pvQWhEeXNxMlpOK2dGQUlLS3hZTG5idTI0aGpJWnJYSTNuVXoKMWt5TFdJK05iMmV6REowL3VvcDNwWkMwTEZHYytxVkRKdm5vZVZRT05WTGthZ0l3UEl0bkZJcHNyTEI3WUdvcgpTc2wwU2trUkZZZ1BReUdydFM1eGdOOHVaMS9RdmpBWlM0RFIwUzM2TDZNYXdQeFNhVTYwOS9lS3c3d2lXRkZVClVhYlNwaWdGbHVMM0FnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVhQSlZvQk9iRQpQZFRPcHJNT21TbE5XUmVZVldCQmtTMDVNK2JST2pRanlEalpRQjBIaXdNWW5EWmk1MlJzOTZwa056bjM0dzUvCnVZMjNsKzh5MktUSmdaZ3pLQmk5Z1UzWEYxUU1qSEZ6eTdUVytmdnJacGl2WDRhWjc1VXJoUjF4anowV243RU4KSy9HaE83cUR5MHNqMnJBRkxrRVRBaXdrc1k4bFZiY1NEMlFveHlwV3MyNGxqbWxYUndLZ3ROSDFNUXRjSzBqQwo1TkpPSTY3SEc5YkllRzV0bTVYUHdkaU9Pekk4bGpGdW1rQXFpNVRQQ2ZOZTdKUjg5ODY3aWFnbGZRMWQ0RW9NCk8zUFJ3ZVA3Q2ZndTR2MXVPVjZ1TFdab1YyalNVZEMrZURGdlpYeWdzdW4xak9zQnV0OXZyVnFuR2duSnBNU0cKa3l1RTBNTlNUZUh4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdmNOL2RtSy9aRFVvSnJGRnhCNXFEZE0vNlVzQ0txeFlXR0J2U1FzTXYvcDh0YzdUCjdRTStpVkRvUnF4d0w4c3VoUFNhOFRyb2ZONXErbjNEd2tLMVNGcXBoREJqZ05DU0ZLbWVNaUVwOTZiTDJ6RDEKcnBzK2VKV2lEL2VrN2YvVEZhbTNxTUVITENpejN1S2JhMnNKakRFdDd4MGpyckJnd2FYbkNhQUlROHJLdG1UZgpvQlFDQ2lzV0M1Mjd0dUlZeUdhMXlONTFNOVpNaTFpUGpXOW5zd3lkUDdxS2Q2V1F0Q3hSblBxbFF5YjU2SGxVCkRqVlM1R29DTUR5TFp4U0tiS3l3ZTJCcUswckpkRXBKRVJXSUQwTWhxN1V1Y1lEZkxtZGYwTDR3R1V1QTBkRXQKK2krakdzRDhVbWxPdFBmM2lzTzhJbGhSVkZHbTBxWW9CWmJpOXdJREFRQUJBb0lCQVFDTnRhbkJFYnNWclRDZgp2SEI2SmJCVFJMZU1rMnc1eTl4cG14SmYvTFYzeENwUFp2WVNJQU1hYm1ZWEtQemFaQ1FJTzlaZFlQMXZDblhmCk8vM3RXdjJmMjd5TnI4a08wRExXNVZmeTNadEdpclBmcXk4OVJrZWZxemFNTUFabGlVN3I5WUxtcmNlYWJZYnQKWWxKb0pGWEw4SW41Nzh2T3ozNWgvbStMVzR2d2V2ekNHVzhhbHlaZm5XYnhIV1k0T3hDQmdsT0szZndKNHFwRwovRGpoN2xnQysyOHFuR1pXc0lJMGM4cnpxa2xYNTRpZHZOZi9IS3NGZ2ppSGtmby9FNDdNTEtsYmNPL2xCVUZmCkJCOWY4WEVBS0RvKzMzZ0lPamRDNTZrS2hMSk1US25NNENPUkE4V3ZhV1h5Z1lvMk5Ld0hJNllXQ1pkbXhsQUcKbENtZlRCSlJBb0dCQVBJb01sajJsaUFWYkJ4R3ZseXhWRExMRTdBMHhRRW1vTnVHQTZNMHp5NmhFaFJEd2hFWQplZ3dJSklTVTFXMTgwaURCTVJBeEY4YS84S1MwV3FvYW9lRXpLcmx5QVBHT0hpRTN3aTkveGszYm1YOUNIYTVECi9TVHRmUWRDQ0FIelZhWkxUakhleWpiY09sd2lBV3dZUCtycmVFTExwVkVGZjlUN0piclAvYzE1QW9HQkFNaWMKajJNYnVHajlkTmpsWS94UVBPMWJVb3VuTHc2VjRBYnY0Z1RxRm5HNzBKVlpmOVl5WlM3WnhMd2ZucktaRGV2WQp6QkVRQTBNVDhZcldBRDJUSGVydUVuUEhxREZxL1U1WURGa01VVkhvNnpDVnN3VTJ5WlpmL2U5OXJTUjEvSVJoCnlyWlgyMnBRS0k4QVQ3Y1g1ajI5aG5YY29VaEFEMUJhcmFxb2c4ZnZBb0dCQUxyWTJVQmJ4Q3F0WE9YVWtEM2wKZGhwYko2M21pYndCbWt6SWN6WVRJV25SVHFua1BuSUNlT21mdnMydUthQjVsNGsraUNUK1BHSlc1OCt1ZWVhVwo5aUZWNGJtRmhjVGM2OUtsdTJmN0o0QWIyYXlmejFjUGp0eFhnd2wrb2I4Zml3N3RQRUN1cjBqMVZQS1NLcGJGCmYwdzh0R2FWeTlGZ2RPcFpmeHRPTVgvQkFvR0FGZ3JsMG16OFVVVHdMdGpkcUo2a1l5d3lvTGVvK3dCSzBsaFAKVEZ6d1JHVHZvVWxwTzM3a0VVYktVQ1ZsU1poNXFCMTFKcmJNdFBVZkNETkZhWDZkdmUrVXhYWDlyQmhtWnRKVAo0UUR5ZW42T1FSTmh6VVBjMkpJSmsrUUtQMFJiajZ3ekd1QUNjdWNGM2RpWjZiTk5rQ0VnQWhsUSsyQldqbXk0ClFsVXJ6YThDZ1lFQXgxelRHbStvSWFNVnloZmhGOENUSXVjZnJyTXpPdFYra1FnM2FCUS9XeGRHYW90Wnl0c0IKR0lCYUI5NjVuc2V2NFZseHNEYjBheE9jV2Y1UlMxZUJjV0lZRDQ5Z1NaSGw4UldnME1yMm8yN3pSVVVDNnR0bgpMWVNjajcrUGMrZTJBcFIrVkZtL3dvQWtrVFNscW9DdXc1U012dUZOY1NnclFkY0lFSmxoVTlNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.225.247\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-staging-default-pool-c40bd04d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-staging-default-pool-c40bd04d-grp"}], "kind": "compute#metadata"}, "name": "gke-staging-default-pool-c40bd04d-mwae", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.224.39", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "rLcGXM29VuI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-staging-default-pool-c40bd04d-mwae", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "MjMzJPoWHLo=", "items": ["gke-staging-9696e33a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/steady-circuit-182208/instance/2802842668288020561/,instance/2802842668288020561,project/steady-circuit-182208,2802842668288020561,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-12-12T11:32:14.968-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/disks/forseti-security-20171212112403-vm", "type": "PERSISTENT"}], "id": "2802842668288020561", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "TGzUNEynC_o=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=steady-circuit-182208:us-central1:forseti-security-20171212112403=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch release-1.1.9 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://steady-circuit-182208-data-112403/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://steady-circuit-182208-data-112403/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171212112403-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Ps1yqm1ObmI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/global/networks/default", "networkIP": "10.128.0.7", "subnetwork": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/instances/forseti-security-20171212112403-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-112403@steady-circuit-182208.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd7/instance/2821158852707259805/,instance/2821158852707259805,project/pso-cicd7,2821158852707259805,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:17:06.325-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/zones/us-west1-b/disks/deploygce-v000-koqj", "type": "PERSISTENT"}], "id": "2821158852707259805", "kind": "compute#instance", "labelFingerprint": "fECQG1TuVIk=", "labels": {"deploygce-1479607757632": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "QGoaD3KYf6A=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.65,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/401915208949/global/instanceTemplates/deploygce-v000-1479608416439"}, {"key": "created-by", "value": "projects/401915208949/zones/us-west1-b/instanceGroupManagers/deploygce-v000"}], "kind": "compute#metadata"}, "name": "deploygce-v000-koqj", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.199.119.142", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "RgsGYOgdRr8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/zones/us-west1-b/instances/deploygce-v000-koqj", "serviceAccounts": [{"email": "401915208949-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "fECQG1TuVIk=", "items": ["deploygce-1479607757632"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd7/zones/us-west1-b"}"
organization/660570133860/project/release-testing-1-1-10-b/instance/2864255353388926181/,instance/2864255353388926181,project/release-testing-1-1-10-b,2864255353388926181,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-01-29T16:19:22.593-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/zones/us-central1-c/disks/forseti-security-20180129161200-vm", "type": "PERSISTENT"}], "id": "2864255353388926181", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "ecAo26rwOzU=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=release-testing-1-1-10-b:us-central1:forseti-security-20180129161200=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch release-1.1.10 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://release-testing-1-1-10-b-data-161200/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://release-testing-1-1-10-b-data-161200/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180129161200-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.187.224", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "YwmMGtKOf0A=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/zones/us-central1-c/instances/forseti-security-20180129161200-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-161200@release-testing-1-1-10-b.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-10-b/zones/us-central1-c"}"
organization/660570133860/project/cicd-henry/instance/2934921476828602185/,instance/2934921476828602185,project/cicd-henry,2934921476828602185,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2017-02-15T19:51:02.749-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-henry/zones/us-west1-a/disks/deploygce-v005-6c3v", "type": "PERSISTENT"}], "id": "2934921476828602185", "kind": "compute#instance", "labelFingerprint": "p9E88w6L5Zs=", "labels": {"deploygce-1479231067109": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-henry/zones/us-west1-a/machineTypes/f1-micro", "metadata": {"fingerprint": "aCpddMS1em0=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"UTILIZATION\",\"capacityScaler\":0.4,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":null,\"maxUtilization\":0.8}"}, {"key": "instance-template", "value": "projects/376989022594/global/instanceTemplates/deploygce-v005-1479546036471"}, {"key": "created-by", "value": "projects/376989022594/zones/us-west1-a/instanceGroupManagers/deploygce-v005"}], "kind": "compute#metadata"}, "name": "deploygce-v005-6c3v", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.199.127.95", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "QMATbu-kP-g=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-henry/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-henry/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-henry/zones/us-west1-a/instances/deploygce-v005-6c3v", "serviceAccounts": [{"email": "376989022594-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "p9E88w6L5Zs=", "items": ["deploygce-1479231067109"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-henry/zones/us-west1-a"}"
organization/660570133860/project/henry-rc2ccc/instance/2997929329933419946/,instance/2997929329933419946,project/henry-rc2ccc,2997929329933419946,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T22:59:34.236-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/disks/forseti-server-vm-5102", "type": "PERSISTENT"}], "id": "2997929329933419946", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "2KDo_4_QAjE=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"henry-rc2ccc:us-central1:forseti-server-5102\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-5102@henry-rc2ccc.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\nchown ubuntu:root $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-5102/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-5102/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-5102\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"34 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-5102", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.6.180", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "_qr7KRx0TTI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/global/networks/default", "networkIP": "10.128.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/instances/forseti-server-vm-5102", "serviceAccounts": [{"email": "forseti-server-gcp-5102@henry-rc2ccc.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c"}"
organization/660570133860/project/cicd-canary/instance/3179284719181634433/,instance/3179284719181634433,project/cicd-canary,3179284719181634433,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-10-22T10:44:14.586-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/disks/gke-redditmobile-canary-west-default-pool-348ddeff-jb2u", "type": "PERSISTENT"}], "id": "3179284719181634433", "kind": "compute#instance", "labelFingerprint": "X2sEFXf0JF4=", "labels": {"gke-redditmobile-canary-west-09543119-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "wgfD0cVoOhU=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPVENDQWlHZ0F3SUJBZ0lRQXZMa1ZONlh5NTM3SWt5em4yd214VEFOQmdrcWhraUc5dzBCQVFzRkFEQkcKTVVRd1FnWURWUVFERER0MWN5MTNaWE4wTVMxaExUazRNVFkwTXpJMU9ERXpNQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM056RTFPREkwTkRBZUZ3MHhOakV3TWpJeE56UTBNRFJhRncweU1URXdNakV4Ck56UTBNRFJhTUVZeFJEQkNCZ05WQkFNTU8zVnpMWGRsYzNReExXRXRPVGd4TmpRek1qVTRNVE13TFhKbFpHUnAKZEcxdlltbHNaUzFqWVc1aGNua3RkMlZ6ZEVBeE5EYzNNVFU0TWpRME1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQXE4MEZxY2xsQ0F1bG5LeWNyTnhreVpXWXllTitacFpDUjNlcWcrdWsxUmphCkRiZHFyOGZSTG1IYnVJQkViTHYrZFRDbC9TS1F2NmFacXgwVTdMYzFRanVMZ05Cd1VuVGxvTFE4azNKT09LU0YKOVBCN3duMU42UWZOMFFmd2ZmcW9vbjFtd2pqaWc1c1gzdGIrYWZZcjlJcGc2K1hXTDlnblFKa2Jack9sL3BzeApxSC9KcVFROU53WHZVbUhEYTl0T0pMMFVMRnRrenR0aFluVC9wZjc5R3ExSCsxeDBPcCtXY1BFK0FMcHNCNEhmCnB6OW4xSHZEZ2krZnpxc2o1SlR0UlpMeHZvd0FFV1dhcGN4Si9OZlFDS1RicXM2eDlJMlBkVFhWTlRFeFVubWcKTTJPc3R4a25yOTk3dUlHNDNkWTV2dzlQbWIzWW55WS9tZHY2U055bElRSURBUUFCb3lNd0lUQU9CZ05WSFE4QgpBZjhFQkFNQ0FnUXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFDSTIyCnBTZXQ0bllqcDJjVTFmVU9HM3UwNmNWblBPNFlRWi9EbnM5OGV2S1JJdEE2Vzg4aW9DTzZvZy9JWHJoanEya3UKaU0wV0VTY1hNMnRWc0VmS2xmRS9OdmdSZUFRdFdvbDU2OTdMeDBwMFp5MFUxY1Y4c1J3NFdnYndqcTNwTFI3MQoxU3B1dWxXT3ROMGUwV0FvakVUZ2IwbmRwZGZWMERYNWFiajRleGZRNmMvQUpwa3plRTBSSXhIN1FKUko4ZW1LClAyUXAxZFdoRjF2MUxCbVVGTVFzV1lGMGhCOFdpZE5mUityYkcwQnBRN3E2b3F3Y3dTc2wwaWpHSkk0K1dMMnUKeFNGdFNpcGxLdkN5MktzL3VMQUxBYmE4MVBGNURkTkdOSzByWHFKVFNqRUNSSWpIWDNRcnZ5TEJXRE1NVE5XNwpJTHFjZVB3OXhuUUlQQXZ2OVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:58+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-west-09543119\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: MM239J49yDvwHB-eOn0OL2h-KPtUOPCI05ZMFzr7Pfg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lRWSt2eGNEeWNTZGRZQm5zY3VWNHpQREFOQmdrcWhraUc5dzBCQVFzRkFEQkcKTVVRd1FnWURWUVFERER0MWN5MTNaWE4wTVMxaExUazRNVFkwTXpJMU9ERXpNQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM056RTFPREkwTkRBZUZ3MHhOakV3TWpJeE56UTBNRFZhRncweU1URXdNakV4Ck56UTBNRFZhTUJJeEVEQU9CZ05WQkFNVEIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFETXNvdit2QXdCbXhCRDV6QnhMNlhNNnNCajNtalZCU3JqMkhTT3paTVNZWGw0aDlEYwpvZjRuY0hJWlR4ZTlFZmQzMXpSTkMxdkRCY1A4aEMxV3dGblpVdENSWHlTUC9KdkUrUk5FYVZ3Y0lTT0UzRWxVCllGcTBmZmg5a05COTBkUzIrUUFhNitlS3pJSFAvajk3ZWMzOUFaWC8wR2sxSk5xRzI4a25jRHU1cUloTjlkcXQKa0l0dW5KQmdBMU9uc3BRR1lNaDNDSDVmbmFZbWhwb2VKMENiaXBUdHRFUEVqWkFUMmJmMCtoYVZHT3o5V002NApYTm81ZzJua0NlYzJ1b3hyOUcxV0VjRENnTndIckI0T2diVXdlWlRMOWhoNnNLRnprRExUMEtRZnAwZXJnZHc2CjRkTmlCUjZYa0tvR0RVWk85M1V4SEI5M2dONmlhalBGSnJvMUFnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUUKQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUJ6N0JmcGR4eW9KR1hyaUxRMWpDdVBKaFNnSVRYWmRoS1h0M1g1cmduUXpsb05EK09EClVBWEczZk8yVzVac2JZTTJYbFFCaHFNWmIxMUpUeVRUbWU0V2owa0g3NjNwWUdqelQ1R3ZtN2lZNzF1S2NjWXAKa3EyVk9BUWN2Ty8vU1Blek5MNG9neVFua2dRbGN4czh6VVFjQXVjSlVQd2pKemJxT1hzL1JWTGFOdFdZTlpvNApSa1M4aEIzaHVnV3R2QjJ2cG9aOEE2QnQxU2pPQmY1YmhhK2FqZ0tvVnVsR3N2UjVoZmdSYmNPemFLWlhYV29PClZReWgrbzlNTWNCM1c0Nm4wWnhwdWlUT0g4bnpFZTh3L0k1Mjg2aXhOSkgvdWNpNklZU3BSeXh6TEN0SDl0VzcKTVNyQ01MUXE3MDEzQldNL3VWOGs1LytYZ3RLc2UxL2VLSVFtCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBekxLTC9yd01BWnNRUStjd2NTK2x6T3JBWTk1bzFRVXE0OWgwanMyVEVtRjVlSWZRCjNLSCtKM0J5R1U4WHZSSDNkOWMwVFF0Ynd3WEQvSVF0VnNCWjJWTFFrVjhrai95YnhQa1RSR2xjSENFamhOeEoKVkdCYXRIMzRmWkRRZmRIVXR2a0FHdXZuaXN5QnovNC9lM25OL1FHVi85QnBOU1RhaHR2SkozQTd1YWlJVGZYYQpyWkNMYnB5UVlBTlRwN0tVQm1ESWR3aCtYNTJtSm9hYUhpZEFtNHFVN2JSRHhJMlFFOW0zOVBvV2xSanMvVmpPCnVGemFPWU5wNUFubk5ycU1hL1J0VmhIQXdvRGNCNndlRG9HMU1IbVV5L1lZZXJDaGM1QXkwOUNrSDZkSHE0SGMKT3VIVFlnVWVsNUNxQmcxR1R2ZDFNUndmZDREZW9tb3p4U2E2TlFJREFRQUJBb0lCQVFDbUVIUGl4VXc0UVVTQQowaDVLdFEwZG9aVlRjQ3c4SldVV1U1UzhCYXM3VGpqdHY4R0NQU21qZFdZYmdqOFA5SE4vbGVlb1dYNm9TUlVtCjExU3cvSHZvQTNlUmVFNkJRYjVkbm5RekhBYk9DMVIxaFFFNG9yTHptdjd0WDM3RmxHV3R5M1I2WXNnRm9zUHQKcWFaMjFlcDNSOElaTjBzakFqTUhGV2VyeHpHcys4anVzbDVWSWRSdFpETEJmeURGTHU5dzhmVDJGYTBTMVo5dwpDZUVuZk5zZUl0ZForZVpwQ0tjRmxuQmppNnZhdFNTOE1xNlJ4MXRISHZOaTk4bDIrVjk4S0h5MWc3eXJqSUlpCjBXODJyQWJGU3pLZ1VjZTNSZUoxdjVzdlZpRHZjVUZ0OHJMSUlwU2o3Nmhvb3RyK0NRcUJ0cUpTMGx0R2FOSTUKWVV4NGh5d0JBb0dCQU5iMDdWL0xKa2s5eE1DNWNtK2MzdTZyVWpjMndwRXRMbFN0Skp1QlBVTVEwLzBTWWQxSQpYY3hmWm9lS2w2SzJaQmhoTXREbVZHaCtXVDBNYlpYSjh1L2xmYUtZUGlzbEZKdVo1NVNBS0JsWkdteThxQThiCit1aHNpbDhZL1FSR0h5T3pSL2VHY2lXM1ZBU0YzbnZqQ0I2Q051WEh0K2t0VGIyUkIzU09jaEJsQW9HQkFQUEkKSlU2TkRpYXhFalN5dXFLSjNYd1FQdGVnTmxsNC9VbzBpdEhGRDVLaTFoTmRndTdVWm9udkttK0tFUWFGYWQvWgo1ZGZsVjFpZnNJNnNHMTlNUVhTclozN2VMaitrbnN6ZnNPSDFKSXFVQjhHZXB5Ry9aN1p0M0JGSjlWMjVQZktyCkt0NEcvdnh5TTUrSmwxcHVDVm42TXhqMUhnbnpSN3ZueEk3YzhCMlJBb0dBWkhvMGd2U0l2dSthaXFPa3REdFYKa2FhUFZiUEpHdWROb3RNVUs0UXJ5SytUQjlhUjNFZTVZSkN2Y21mOEhWaTRUUlVTRmNlMGFPdTJkdXphUkl3VApmTU4vQ0lPMWU2Rm5rcHhNUFlQeU9uY0YvUkhxVkxXMWdQTkxjc3hSYUxBR1dqK3hRaWljTHJrVkV0QW9nU3hNClhVWnN0dGUyUmM2aGFoemlxVDcwWG1rQ2dZRUFxUkVXWm5yRzVLaUxFc2NkVHBwRVk4VTBnQUJaa1FXcXpDclMKVjViT0xRa0haSmpHdEhIVHh6ZDUrNjhLRGJhNjdZZEZzc3dZSHB0cExCbEtSbll4TXdPb25FRGtYRGtEOU52eAo1Vk5KQzE2TVhvaDBLcUIvQWZNQTIzQ3FYVnlhRE5FT3dycWhYbHlwVnF4cXJrbC83TW5yWkJTaXg0M1VJd29pCnRGMmZuVEVDZ1lFQWs1MFRDekxab3B0REdDeGNrUk1ESE04djJoVTlhRHBYWU0vN05OZ0xZR1hIQjVNVWNCN0QKdHYwNmNPTzk2RkgrTjR1N3lsZ3dOdjdlSU1oaXltUWkxNDl4TmNTRElDeWdXY094NU9pU3krUHlwVDdkckxOMgpoSjNlRno0TG1BdUNPdktwNld4emhqYTU5ZVJMQlhBc2tlaTBBdVpsNUsvL1YxNDh2bWxrNjJNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.6.35\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/981643258130/global/instanceTemplates/gke-redditmobile-canary-west-default-pool-348ddeff"}, {"key": "created-by", "value": "projects/981643258130/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-canary-west-default-pool-348ddeff-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary-west-default-pool-348ddeff-jb2u", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.15.18", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Z0XK5QOXaN0=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-canary/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-canary/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a/instances/gke-redditmobile-canary-west-default-pool-348ddeff-jb2u", "serviceAccounts": [{"email": "981643258130-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "X2sEFXf0JF4=", "items": ["gke-redditmobile-canary-west-09543119-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-canary/zones/us-west1-a"}"
organization/660570133860/project/pso-cicd8/instance/3204720103918033759/,instance/3204720103918033759,project/pso-cicd8,3204720103918033759,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:12.674-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-canary-west-default-pool-496ebc1d-vt51", "type": "PERSISTENT"}], "id": "3204720103918033759", "kind": "compute#instance", "labelFingerprint": "cireh9PCZXs=", "labels": {"gke-canary-west-69bb2963-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "taq0rcmX5S8=", "items": [{"key": "cluster-name", "value": "canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQUtjYjdIK2h3VlBvRUJGalJsZVFZQm93RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE1sb1hEVEl4TVRFeE9EQTFOVGd4TWxvd09ERTJNRFFHCkExVUVBd3d0ZFhNdGQyVnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdGQyVnpkRUF4TkRjNU5UTTEKTURreU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdHJ6N1daQ1cyQk42QmFjTQo0NXV6bGJOOWc5T0o1d3FKSWZKeDVoZ1RPQ3FCWW9tdmJVTWdGQ1JXUXFMcUlobXRyMzIzSktFdHBaTjc1dk9aCkVQMzZ4VzZ5NzFGam9GM1BsMThMcmtzNEEza1F5ejU1VkVYbnFPWm9ET0NHVS8wTEI0Ulh6ZEhaZU05VzdJWlAKM3lLeGVKcHNkMXBWRGgyNjhXdGhiS3dUMWRYenFBTWtjVHVrTW1EQmtsL3VoY3g0VHpxVjlRcWhKM1JTaUpMaApEY3lpem4vYkpYU0swNmpaYUtoL21zV2pSQ1FkMFplbkVKWWFyOVRJQ3Vkbms4eXo0YUZxWHAwOVkyb1c3SGlDCmQ3cmlPMTR0RnVLUllCNUU2WEtucHVVZzdadVVuVmtESFdSS0tONEp5aXU5N0tEZmJuZ2M1cGk5SzM0bFNJN1kKNGxaWFB3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFOMnlpZmIxM0VpMisydFRoWEkvWWtPelBERE5DeCtEVVNLWUxpVTRGCnVuUE5ZMVEvMCtwWUxPQW1DNysrekxmS1U3a2xuT2VCWUxiUHlmdW8wQzl3QjI4SFVQWVZkb2hKY241bExVU0MKYVFaRm9qTTgrYzAzN2ZuNVlCTFoyelBJSWhmKy9vaVhkbis2TDR0aHR1YUVVdmtBZm54Nkx2MUt1Ryt2dWJIcQpQZjJoZ1Vob3VrRnFWN3M5OVcvN1ZjT0djRWYybkxQdisvSTNqWjlJSkFrUm8vaFFtUHlWeHgzVUQ4LzlTUlV6CmhYc21NdTRPQUxVMnJ0aVRLejlhaDV3TEN4Q0dNTEhRRFFkbWRJUC94MG51ZmkrOU4rc0R6M1hSYSt6c3F2VGIKQmVVN21sajJleE9RZnAvM2dKbGVPRk5mT3BsNW1FT1FKK2hBbzZmdWs4TVBFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.44.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.47.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:02+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-west-69bb2963\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: qj61a229MxXzLhQ5LDHaDFU_rc8q7AcI41OGzPI1MyE=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZLZ0F3SUJBZ0lSQUxZb1dwWmord3VLdS9VVFV6WnM0b0F3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE0xb1hEVEl4TVRFeE9EQTFOVGd4TTFvd0VqRVFNQTRHCkExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPQzYKUktnZU5YeGZJYzQ1MjZUMjBzWWF6YkdwNU9JM0FIWjFyTlZsQnQ3YUE3OFFmQ1JOTzdBVGtkb25BMDRHZjlMdgpZb2RsamhxMVBTcVN3WWFyV1lrNHdOL205R1kxQ0RpS1NSQkQ0cERhcWJTK0VsK09JYlVudmo4c1gxMHh0ODFQCkZ1SWtOdW5iNGtpb2tJTXZSTU9IS3VKMktOa0VyVW5tb3EzREZoa3BPT09ET3VUQTVzNW9OQlp0bjhFa0JWU3kKRE5BV1A0SWs4WEladSt1RDRyekNodUhLVlNLV3dwdW5ERFNZMkZ5b3BXQXhCQkJERVZ4YkJpbWlidFVURG00VgppVGdKVXMvbnUyK0trYXN4a0haTUV4N1RxZVJ5ekRieFBkU1lkbXRkS0hjSG5JRFd4WWhWR3dkYkRzanZMcjJSClQ5cm9CSDRNdmErKzZaTlhPNDBDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUE5dgpDT0d2V0IxMWZPMmc5aTFLK0srMHh2SWNtUUlRTFY5NUZZd2dVcDJNOGdSZTEvWGdqVE1CbkNpNFFRU216M3ZsCmd3Y1RseUJLY0Vxc3ZoZFZ2S1VWVmJ4YUtsRlV0ZXJFUTlDc1JwMjlZbjJtQk9NUFBpRGFVd3cyUU9GUkwvYTEKNEVES2JwREFWbGt3UFVqaXd4Z3ZmWFV6SVVZb254RE0raGw1ZkxhdURTNnhETXhIbVgvZ3dOSlYwVWJqMFVYZApwVXJqR0hxN2V2Q2lCTTRaM3hFWjNjQ0hmb0Z6WVNWS0RiWVBMQ2tVQ2hvdmhQMU55SVRBL2FuYUgxQzk5K0ZLCnpKaW5DNXo2UVZSUUJLUlcweCtHV0F3UUNkSWEzVEdMU2RJYVN1YzZXT1E1UzFFdTlGdjFDQ2kvME5oM3JHOWgKWFlVNTN0bnJRQWppM3RQUkQ0cz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNExwRXFCNDFmRjhoempuYnBQYlN4aHJOc2FuazRqY0FkbldzMVdVRzN0b0R2eEI4CkpFMDdzQk9SMmljRFRnWi8wdTlpaDJXT0dyVTlLcExCaHF0WmlUakEzK2IwWmpVSU9JcEpFRVBpa05xcHRMNFMKWDQ0aHRTZStQeXhmWFRHM3pVOFc0aVEyNmR2aVNLaVFneTlFdzRjcTRuWW8yUVN0U2VhaXJjTVdHU2s0NDRNNgo1TURtem1nMEZtMmZ3U1FGVkxJTTBCWS9naVR4Y2htNzY0UGl2TUtHNGNwVklwYkNtNmNNTkpqWVhLaWxZREVFCkVFTVJYRnNHS2FKdTFSTU9iaFdKT0FsU3orZTdiNHFScXpHUWRrd1RIdE9wNUhMTU52RTkxSmgyYTEwb2R3ZWMKZ05iRmlGVWJCMXNPeU84dXZaRlAydWdFZmd5OXI3N3BrMWM3alFJREFRQUJBb0lCQVFDRzJKNXI5cnlIWlpvbQpZZWRmWkUveldaQUZ4SGs0R0dMcHNoREVkM3VZNjE4R0hnRXYwencybW5lUlhJbUtIekpDUXl4dkxFd0owS2prClMrMWVQcUZhU3JqSllZOVRhUTBHeUV1eE85ck9xcmJjWXBVcHkyS0VqbFdGR0w0Y2NNSG1xMGVDNk5JZW43ZDMKZTlaRE1YRGtsczN2MTVFSkw5by9sdW9VdEJRbGdjdWtiZkRnRjhQQUhsV1JWT1BzTmdnT0puNEl1cDdaWnJOMgp5WlVJaEJ3UU9iZk5uQXpOanI4SFVtYzBUSlBWTjd2cDdpWmFvcm91d2U1UkFabDlLNWNvQk8vaDBEMkl4Z3hyCjNZMEVSWnhrUXdqR2lHaUdTcnQ4ZkJtajFmQ3hQMkVxQWV6UUlibGg5SzNyNWFhMHZwMWpvMDZMY3h0NzY0TlAKQVFUZ003aGhBb0dCQU9WOWJDYllFcGk4ZjN0RDI3YklndVRIOFlpdTFiMGNWZThnbEFzQnNia2NwNS80QUNxVgprcXZLNDY0eHNuclYwMlBFdnZ6UkhCOGU4VTNHTlQvT3ZYblFuODhJRnFtSUVVNzkwN2JvVXcwSlRleElsT2FECmRtN0RadG5PbGwyQUNIeUxUL25OQ1ZNNUhOZzF4TXJUYlNHL201eVFJNG1MalAzY2s0cFVrbWFaQW9HQkFQcXcKQXlMN29KMmlWN2VPSjZrN2liajFFMHRTenFlZTh0UEFFb0FZWjQ5YVMzcDArbFIydmdBT2ZKMWQvbUVid3dQSwp0T0JMQ2VHRStaMFVlQkpLcis5bmJ4blU2YzQ2L3hIaTNMckpOS2tVWHhIMmJiNlRsM3U0Z2poVWFtVVFWUkRrCmdQcmd3WTVoekdtK2JtYldFNHVNWjJNalIrOGw0WjN4dVh1aUd2a1ZBb0dCQU1RR09sZUR3WDdOcEdiNk03Y1IKMXh6czNSZlBuNnNGaFRIWk5odWd1dHBQNjY3cys5ZGtKQUN5TVlFZDJrS3FXd0toa0RJTHZHV28zSjErYlFXdgo1cEVpN3g2ODNmNjV4MjhkeWJZM0JKbmlGTGw3MWhTQXZxMG1JN2h3aW1nYmNTUlJLMk5KREdvV0l0bGNORmk3CitFQVhseWhJeHRJNmJaaDZ6VndmbVY0aEFvR0JBTENNZ3prQTg2WHdya3dVYm5RdC9SbG9aL1UxVlZzUmd6eUQKMmNPaTdGUTJLRkFPMERucUFuZXh2Q3RzQmZuSC9uak9Lc0tIdG1iQUtyZG9zZ05YM0Q0RG4yZ1czYTZqTi80Vgp3cFE5bmJ1eUlCNWJhZ0M4bXdQRDl0bkxBYjg1V0Y5MFBpM3hXZjkzZXVuQjlxaXYvY1hhMVBrcDRNQlk4bU0wCjJRZHNMQWpkQW9HQWRXcXcweHNrbnh1Vk9yajhjSTJSclNWcnc5c3VieUYvQXpoR3g2UEFnd2taakc0MGVNVTcKZlZCL203bXIrOHREYmF6V0Jxa3hwUWxBUkk4Q3VGeVduSjJ0cUZaVlE0a1B3bzRkem1aRW8xSE51MzN3czM0Zgp0YUJhalFiMWh0czVlZTYxcXIwYWNVd2I5RDE2VUJmM0VNc2Y0ZndwRG1tSHRsa1lHdjNIYTRrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.229.72\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.47.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-west-default-pool-496ebc1d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-canary-west-default-pool-496ebc1d-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-west-default-pool-496ebc1d-vt51", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.246.102", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "AHLWxYtyCKQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.14", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-canary-west-default-pool-496ebc1d-vt51", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cireh9PCZXs=", "items": ["gke-canary-west-69bb2963-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/cicd-prod/instance/3239651807375058653/,instance/3239651807375058653,project/cicd-prod,3239651807375058653,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-12T09:58:10.421-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-canary--default-pool-1388e059-qgei", "type": "PERSISTENT"}], "id": "3239651807375058653", "kind": "compute#instance", "labelFingerprint": "CqL4JGj6GKw=", "labels": {"gke-redditmobile-canary-central-6b47a78a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "EWeHY5g-F90=", "items": [{"key": "cluster-name", "value": "redditmobile-canary-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRekNDQWl1Z0F3SUJBZ0lRV2RkSTNmZ09MVWdqZE9SeEFhdFNJVEFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVVrd1J3WURWUVFEREVCMWN5MWpaVzUwY21Gc01TMWlMVEkxTmpJeE9UUXpOamswTFhKbFpHUnBkRzF2WW1scwpaUzFqWVc1aGNua3RZMlZ1ZEhKaGJFQXhORGM0T1Rjek5EZ3hNQjRYRFRFMk1URXhNakUzTlRnd01Wb1hEVEl4Ck1URXhNVEUzTlRnd01Wb3dTekZKTUVjR0ExVUVBd3hBZFhNdFkyVnVkSEpoYkRFdFlpMHlOVFl5TVRrME16WTUKTkMxeVpXUmthWFJ0YjJKcGJHVXRZMkZ1WVhKNUxXTmxiblJ5WVd4QU1UUTNPRGszTXpRNE1UQ0NBU0l3RFFZSgpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMejN0REdNQUIrVG5zcFpNUVZ4ZWp6Y20yRnRFb2h6CnE0eVJvR2wraTN4dXgrNWd6RVBUVkUzcjIyaDhPRk4yMHZIOW90djNLNTNHRWpDd3VKQzNHRWIwTy9HeGdjWG8KaTdDTDJoUURCVjZXaVRGYkhabkd6NE9TNWdzOGhYc3g5U2FqMjM5eHBsaWhTMllrM0hjOFp0Z2ttWVJGRS9laApNUGN2eEpMS3d4Uzk3eU5jbDEvUUxUelpHRHFZSTJha0VXSDBwQmFFcDdBL0pMYkUxS2l2cmpRQzBRMXRwbVVsCmhLQkNsQkxYT2xsalNic0REUWRYdlBFSVFjSGlaQ1R4czhPR2grdE9Fdkc5L2g1WHhqRWhMQzRNb1R5WlNKdzUKQVQyQ1o4bXlXcmJIbmRZS3V5VW1PcmxUNG9mdk5mTXlvZENXb05oS3dReXMwTmF2WlZ2OXhUY0NBd0VBQWFNagpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0VCQUxBcE9GU0Y0eThBRTJ6aEk2VHQ1NVVJbU5lS1d5Ykk0UDJaa1ptZDhuajA2WDh4THNmOG9kcUEKdGZ0MDc4aFhpUnNBazgvWkhiSTNMN25QaTdrOTNoOWVhUkRUV3R6VkluZHBWRUxCbzVFTGNIR1VreGdqcXdLTQptZU1jUHRrZ25PTFhFUjBmY3V6Q3phSjYyLzlSZDM4d0hCRTE1dkZUUmx1V1cvQlhQNEl0a2JXU1FwY3ViT2RxCjRlMUZFeXVBMFhjUmVhb2YyeHAzalYyN09YWnRIQW5BeFhIREtxQ1FwKzhPUEVJdEVleFNuNkZhOTZVN1ExNksKcTFrL3lSZmNrTnFESHJaTW0zT0dVQ3N4ZjNnay9NQ1pSMy80L1AxTUVBcDNhNkpCYU9ucGxoRnk3bFNCeU93aApCK2J3M3hOWW1FVGcyVDhtUG9WOE1TZjh1ZE02N28wPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.60.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"1\"\nDNS_SERVER_IP: 10.63.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T17:57:49+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-central-6b47a78a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: BUKsHduYNklyd0kaMdL1NISkcAGaLgtNQhdup3FULrU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIRENDQWdTZ0F3SUJBZ0lRWFFZRnJXOTJVTncrQjZmeCtpcDNUVEFOQmdrcWhraUc5dzBCQVFzRkFEQkwKTVVrd1J3WURWUVFEREVCMWN5MWpaVzUwY21Gc01TMWlMVEkxTmpJeE9UUXpOamswTFhKbFpHUnBkRzF2WW1scwpaUzFqWVc1aGNua3RZMlZ1ZEhKaGJFQXhORGM0T1Rjek5EZ3hNQjRYRFRFMk1URXhNakUzTlRnd01sb1hEVEl4Ck1URXhNVEUzTlRnd01sb3dFakVRTUE0R0ExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUIKQlFBRGdnRVBBRENDQVFvQ2dnRUJBSnF6aWQ2WGVKbDVlMkRDcUk1SzFZUFg1ZExBSDk1cHd4SW80OHhENjJKcgphZ04wSm8zbmtFalRUdzJVYm5Sa2pNNlpxV0ludDFlek9TZVpzUlU2TlR4ZVM4cjNvNFVTWWl4M0NramJ4WU1ICnhmby9yUHRRWUJrbHgxc2ZyUkV5dWdrem1OY2E3YldXM1A5d3RGbnhSR1lYOXhvQlJ3S1l6aUlhdWVSd2pDc3cKMnEveVJZUWRTdGo2TFNtaVNPOEhmNHdWOTdDWVpxYSs5cUJxaDdNZHpCUXhXQ3NVYklTbk1JVXVGcFNCR0RMQgorcTBOU0djY2l4VnFmanJRVVJzdU51YXVXR003L24rYWtGT3Y5N3VVZ3RndVFoT0xDUDEvSFE4bUZQVHVpTW1DClNKNTFWKzB2ZzhMdnBKU3RlUXdFTExTYXp3ZkZOb0tDeDdhNFhsMzI2SWtDQXdFQUFhTTFNRE13RGdZRFZSMFAKQVFIL0JBUURBZ1dnTUJNR0ExVWRKUVFNTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSgpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBUFdkdmVBU2NnVThvUTIvVStyOFRBcVJ4aHhPMFMyOTNsL01VOUc4a2RSClZ5NnhuMUMxM0FrM1kzcVRCQ3FzNWpLR2hPdEFMM0xPakJVeEYycFljemh0Y0xWV29BelBEemxMTktUNEV3UGUKejZkYzJXTEhUaHMvdXQ1anVOS0t4ZHlGNFlVUmk5TnNSNnRqc3E4QU8vVVJoQU9nSGZoVkhVZGJBeTNRell6RAp2TVo5aHdKc1hiWXlZd0hmRUtaZWtpUTZTUm9HZWl5dGlpV1NXWGZmN0dCbnZHSFViQXBETTZUbUV1eXJOTnU1CnhlNHl5YnJTTmxFU2RLaTFDQ2hsK0xHOGFqNHBtZ0o1MmYyNWJTUEgzMVFhT2RaZWZrTFBaTlNoNVFxbFkvQngKeC9UTG1OZExIczdlL1V5OTc5UDZ3VlQyRmxZd01wdi9SVDIrU1RncG1GMD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBbXJPSjNwZDRtWGw3WU1Lb2prclZnOWZsMHNBZjNtbkRFaWpqekVQclltdHFBM1FtCmplZVFTTk5QRFpSdWRHU016cG1wWWllM1Y3TTVKNW14RlRvMVBGNUx5dmVqaFJKaUxIY0tTTnZGZ3dmRitqK3MKKzFCZ0dTWEhXeCt0RVRLNkNUT1kxeHJ0dFpiYy8zQzBXZkZFWmhmM0dnRkhBcGpPSWhxNTVIQ01LekRhci9KRgpoQjFLMlBvdEthSkk3d2QvakJYM3NKaG1wcjcyb0dxSHN4M01GREZZS3hSc2hLY3doUzRXbElFWU1zSDZyUTFJClp4eUxGV3ArT3RCUkd5NDI1cTVZWXp2K2Y1cVFVNi8zdTVTQzJDNUNFNHNJL1g4ZER5WVU5TzZJeVlKSW5uVlgKN1MrRHd1K2tsSzE1REFRc3RKclBCOFUyZ29MSHRyaGVYZmJvaVFJREFRQUJBb0lCQVFDTnZWM2VrZzJ2SUgwSQpaSkdtL2EydlJNcVBVL1JmQmF2eklYL0ZrWjFDNllPU2NvTTRsU2UvY2N3R2R5N1VlYVFCVHd6QW4vNzkzWG5LCmJLaXcrRW42YTdNcDNjYjJqNmRmY2huOE0xQStBNHREQThCcjZuS0IxL2xWNWluZGpncWhqNkxEd3lwMHJDc0QKNTdGMmp2WEtUTDdjRnJ1SEI1WWw3VExRdU1YVWMxdlAvWWRuUXZtbS9rZ1lzMG9CL24zUm8wbWFZVUoyZG0wZApBSnBsSk1ycVQwNm5KSklHZVpoblBYajRBVzkraTFMSjNmb1Zhbm0zWnVIRmpLSGpzT000SXZDZXRaVk9OZHgrCksyUEc0ZzNESkZuTk5EWUIyTmRGbS9EM3lnZCtyNmdLUm9USlFEVWhCaXJCWXZqWGxnTlc0RUJlSGQ4bDBnUUEKOERNS1ArY0JBb0dCQU1OMzJMSll0OFlvSWVQZnh2SXpGRzVkTEs4L25xaS9XaDIxY0JISUZFeFNSUDV6TDFPZApjZ3dlNjhUUFl5aEJETWxLTUVTdTBVQkg2ZXZHbzBBTzViOVFjUHB4ZkF0SVZ3S2h5ZnJrb2ZoT1l5cDUwS2V4CmhVMWlyQi8wdmNvWm9rdUc0T2d3ejNqcmpBRGplWnlLM0pWa0JRV3V1WFZGRktnTFVhRm0wR3paQW9HQkFNcWIKMEtnRG9EODdUYUxNY29IaUFLQWlhaStQd095VzJzUW1KOUUxQXJIRllDcHp6ODgxeXNyUU9OcVJUbkNZdC9tNgpDYnpma3gzNlY1UXFkYzEwWm9Vc21iNDR6WC9Ea1R6MmpGSHh4Z0RCMXVnRHJHWkVoUkRyT25zcG1jNTc3dTdhClJ6OVVpQmRSd0hJdDBxZW5MalpqREIvbTJxS1dZcUZkMXpsR2tzc3hBb0dBYTNNa0lkWDNIK3pMeEhJczhOTDMKZGp1dDVxQTRYVmJpK05YV1IxQVBLRzFKRS83SmsxTkhjRFpITUtjNFFOYVJhczFuZnpvQ09TM08veGJ3Z3JRdAp3MTg2MjlFcWVTRkpBMTlnb3BTd0hNa3FaaDBVZ0RwcnBzQ0pFZi85bkcwKzgvbXZCTFJnT0g1ek5jSFdCaUduClpFL1pHdWlUZGsyRkwyTVplbm9FTlBFQ2dZQVE3RWJYWWNZbXdldFFKOGVBdGNIYm5rUkVTTHVTaDE4cWR3MW8KV2djcGxoVGNOdVFxcUpHUnN5YXNpdXFFV1IwMHpLYzNrVzBXV2V5cXdZa3BhZ21PSWhXTlgrMDZPTG1PNEFFRQpieTljck5Rb2VQWVRiTEc0b2cwMmNGa2FlQnVTODhSenM3blNTTS9NT2F1WXVVd1EydUVPWVJmdDhLVzRXTUE3ClZudTRZUUtCZ0JnV0NiMmIwK09OOUlzeE9KY3Z2UGMzU3ArdWFjazN4a3NGVWZmejdUMEJpUWUxOEZNU3NNN3YKdElqSXA3OTNBWU1mMWVyUWY1Nzh6M0cyYnJXaWxFRmZYdjlEcHFnTVRURlZuU2RhK055WTZQcVUweUJhcXJaYQplMFhST3R0Sks1VDJ4ZnUyZzNVS01XMjFYcHZyOUxCNXZDZ3VybCtHYzVzTHYwV3F1MFY2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.197.231.35\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.63.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-1388e059"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-canary--default-pool-1388e059-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-1388e059-qgei", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.197.218.64", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "yykImnHuUsE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.8", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-canary--default-pool-1388e059-qgei", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "CqL4JGj6GKw=", "items": ["gke-redditmobile-canary-central-6b47a78a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/cicd-prod/instance/3295613835377463121/,instance/3295613835377463121,project/cicd-prod,3295613835377463121,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-10T14:16:30.716-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-prod-west-default-pool-481e7251-qqzj", "type": "PERSISTENT"}], "id": "3295613835377463121", "kind": "compute#instance", "labelFingerprint": "ZiCwJhcirGU=", "labels": {"gke-redditmobile-prod-west-3470febb-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "U4UDtSVhH6s=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURORENDQWh5Z0F3SUJBZ0lSQU85bEVwekFSMTFPNWJwekVIa1pLMWd3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qUTVXaGNOTWpFeE1ESXhNVGMwCk1qUTVXakJETVVFd1B3WURWUVFERERoMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXYKWW1sc1pTMXdjbTlrTFhkbGMzUkFNVFEzTnpFMU9ERTJPVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTVllMVZlRHU4eElhYkNvUi8zcUdxT2lldEoxajFlN1Q3aFFNU0VFQUw0OGRFWUZmM2dRClR4SmNGanhIWWcxTmRhSXkwUkdEQXFNVGZyTDRUdTlaL1cvc0Y4V3h2K29kMHdDQThsSmUwbVNJSjl1NDI0UysKMEQ0TFJJZ09OWmd4QUF2SFJTTE9DVTljVktOcW80S1FoL212WjBuYXdhVHQ4VnN2VzdWTHEwYXZmZXZVeGdqdwpETkRHUTJqbGZHN05seXF6WnN4eFZMNmNQU3NEWUlSS3g5TlpnbkdDMEZPZUdTOFMwM1NDazZyMkxXOXBqM0hkCk1DTk9ReEUweldKRkUxZTkzOXVVSE5MWlFHL09ieTF5RmFjb2ZpZjZXRkxPUHYwUWdIMXNHdmxZV096RGV4QWkKYkExKy8xN0VJUzJQb1JLWTVhdFgrS1FOSCtnVnFQenVBZ01DQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRRApBZ0lFTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdhMlJ0TkV1cGxFCkF3RFBlTkZ0ZlZhTmlkd1NLWGxkajNya2tIdFRIQUUyZ2dSVHFlVXJVQXZ3WVJDUlFtUnZ5T1dvaUhjdmpEMXUKVE1tTUhhdkZEQ3JlOTdIY21OUEdlTUtjeDhPQ0xBdDdSSXgycndTUmdJV2crWWE0UXpJVEtESUUrRmJZVGNyZApJVFozZGtDbDhibWdPMjhCWHh0eE16cWpTUUZsR0tCNklGTW9vUEE3ankwYWlBdW9xMWFRYmV1bVB0VkVESzhvCjdQSnR1anErSVR5NG9lYzhHblV1bnhPekdITEZoZytxQ25wN0sycWIrUHZ6TzlRZklsYytHVFV4WUpQRTRWZmIKWk43UDUzQlQ1d3pWTGhXYUt3aktVbFBHV3ZETXZTUys5QzlSb25GRmhXRU9QSzFzWkhtSzBtWTVVN0FqSUZlTgpmWDF1NEhmVlR6dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.56.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.59.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:42:43+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-west-3470febb\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: i9C4TB2r4rrZJ4jHOt8J340y25DJmBVG5rHUrZZfaIk=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQVBBSlJxdkZFME9KSmx6TWxpVkFySkF3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qVXhXaGNOTWpFeE1ESXhNVGMwCk1qVXhXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJMHVXSgp3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMycVNJClpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNkhxNVcKL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3bzBVVgpwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEJrSDd3Cnc2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFyOEZDRHhyMEcxY3hOQ091dDVnblhZKytmMUFvTFF5UWRZR3BpUEMwWXdaOFpqU1J2TW9nClczTEx6bnlqZ0FnTGRXOUpTZHFoYW40cE9nWG9DbzBvcG5WbTRoaVd6dVUwb3FUQUo1eE0rendwVGozYUU2cnAKUnpmYkVMWVpPbnEzMXoxRW01Wkl1N21MbzBEYjNWam5odG11bHhJUWZQUjZ5SDcvOTYxYmRmWExWeVB0TGxuUwpvbTRIblQ2V3VCNE1yODhMaSs5QjdOQjVLMkd4dVZpM0Q2UlUyTnIzRDhNUGVxRHRMell1MTAweWdldEQxMzhaClkzckhObklSNVh2aENyb3B2QzNLTDI3VTRVdGdEMFBKTENzRHFhaHZPUnZKS3RkZGgzV3pUenh5RHV1b2FGV3EKVHJKZEVtVlEyZ1NPZnV2QlFsNjhNdFpJY1NtczBlVHRFdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJCjB1V0p3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMKMnFTSVpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNgpIcTVXL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3Cm8wVVZwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEIKa0g3d3c2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJBb0lCQVFDbGx6Q3p1NUszeDZoaQpBUi9BcStROUtvajlPbDdaeGpyWFRsM1docDVQMGdjeDR3UU8wY2RqOG9kSWdEUjBPMXFUNStNKzFOVVh5RHFoCkNQOUdwY3h4dkh0aVJ4YnBQaC8yRkJic0YwdFlsQTRna2k5RjNOQitGU211ZkM4cVVqNGFiYXEyZG9iLzlOa1YKZ2dZcnNFRWJza0dFOVdkdFVEdENrVnNkbnlnS2tyMHJtajFXem16V01jenFvMEU3TDZyWTlhWWJURkI0Ky9jcApxM293bjhlZVh4cXVGcjlOVGNiY2p5Nzl4V1JwOE9mZ0IzTzI2M3laRjhxRzVWTEpTYytlQ0crRGJmUjRWZXgzCmRmcTBxTnVqQmRZSllvKytneVlocVdtZVM2cFpvdW1mK3JUclFnaUZxWjlXT1l4aHRPRDFMM2tPaXVBQWZEQVEKSzhJU2JnM1pBb0dCQU5PUzZ6d1g4ZFJ2bWNUZ2ttamx4MlpBSE9PR1h2Zm5rQUMrM0pyOW9sVUpqblhqbnBzQgpUS0JueUxibkRVbk9NYVVsS0w1R2crSGd2dS9FMWZmdnp0d2lZTStwTDNtbEhBSkh3NmFqUFltd3hZYnprZlNGCjFza1NPMzB6SlZPYjFSeHdPblNsTDRYcmQ4bHhuSXN5OGFtZDVsZ3M2anRobHhCQ0JkcFhPTGNMQW9HQkFOM3YKb1ZpcnJPUkloNFh0OVJKd3FsYjhPMklSM09mL1NsSld4ZnVYUk41Um9wMTE4V3RMYkhQbmFNZUxlc05tenNuZwpOUUFCSC83OWUzanA1bDJtSGtXMTNRMVRacXl1ekRXMVFIdTBYVit5UTd5U0pGYVRUeFNqQ1lxV29CcXNhVWpCCmRsMkZjL2lnYnFrODRoM3NIYkV4NWxvY1hyS1JKZE02VHpNMmJraWpBb0dBV1BDa0Rxa0tNZ0dRSktFN0t2bWQKTHpDNGREVWlheGhmQXRFNUw3WjdyVC9OTVdXMFlQalUyNEdGY000RVdnaGgra2g2cmpJNmNwUGw4Q2xRd1YrQQpHQzRqZ0doZzJzUTcyQUdQRDlnRG9JUTlKUlB6UVZXYUN3Q3RIVjZJekhMdnpYcW9PQ3pRbzMxdTU3SG8ydU5aCmo3SWZDT1lvdVRtM0pWQjc0V05WSmkwQ2dZQVNxbnpmZ0ZEaVFsZGpwRWZnYlNsbWQ0Qm5GeW1GT2F0K2tWM0YKYzB1UGh6NHVFQ1ZsNk1vT1ZZQXlpRUNpL3BxVjBBMmxHbk1lZHlOVFlCakg5NWpFTkMrTFYyQmpWYkJITkI5ZwpTQ015VVVQeE1EbHVMcVdRRHNaV3FhUjltZEtoRStSb3FUaS95SDZHTFdDM000eXJ3bzZsTlkyaFp5UFBTREF4CkZucmdFUUtCZ0dnT2RFeENVUGNUVEIxWHQ4NDlaeWQ1ajJheHA2UWRnRXg5emIyM1MyMUV3WFZXNGY4bWdMb2kKTHBocjljZWZOVUZGOXBwWlF2WUxLaUR0bkNxUlBFeDUwekhTRXZvR3ZlWHpDSjkvMHo1bXU1ZVljdTVURC9ZegpKOThIYWk0V1JLbUs4aFZWdzJJUTVzUkc1OTB6WEkvWVdiUWZxbXBNTDgxTEFKaUhEcU1sCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.102.233\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.59.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-west-default-pool-481e7251"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-prod-west-default-pool-481e7251-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-west-default-pool-481e7251-qqzj", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.234.65", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "2Jz_dZP0J54=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.7", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-prod-west-default-pool-481e7251-qqzj", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "ZiCwJhcirGU=", "items": ["gke-redditmobile-prod-west-3470febb-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/iam-explain-deployment-test/instance/3427882099157834167/,instance/3427882099157834167,project/iam-explain-deployment-test,3427882099157834167,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-02-26T16:33:29.001-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/disks/forseti-security-server-20180226162534-vm", "type": "PERSISTENT"}], "id": "3427882099157834167", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "qB6cK3j9nGA=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"iam-explain-deployment-test:us-central1:forseti-security-20180226162534\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Set ownership of the project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-gsuite-reader-162534@iam-explain-deployment-test.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Download server configuration from GCS\nsudo su $USER -c \"gsutil cp gs://iam-explain-deployment-test-server-data-162534/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\"\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=iam-explain-deployment-test-server-data-162534\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\"\n(echo \"52 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-server-20180226162534-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.59.10", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "rbur_mNbsVk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/instances/forseti-security-server-20180226162534-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-162534@iam-explain-deployment-test.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c"}"
organization/660570133860/folder/138672061205/folder/37188445764/project/jiyun-test/instance/3724434773369874731/,instance/3724434773369874731,project/jiyun-test,3724434773369874731,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-07-31T09:16:04.064-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/disks/forseti-security-0731-vm", "type": "PERSISTENT"}], "id": "3724434773369874731", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "9ndc8daHk1k=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=jiyun-test:us-central1:forseti-jiyun0731=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\nwget -qO- https://github.com/GoogleCloudPlatform/forseti-security/archive/v1.1.0.tar.gz | tar xvz\nmv forseti-security-1.1.0 forseti-security\n        \ncd forseti-security\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://scanner-jiyun-0731/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://scanner-jiyun-0731/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n/bin/sh $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-0731-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "-E2xoiMNGMQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/jiyun-test/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/jiyun-test/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c/instances/forseti-security-0731-vm", "serviceAccounts": [{"email": "forseti-service-0707@jiyun-test.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/jiyun-test/zones/us-central1-c"}"
organization/660570133860/project/forseti-demo-184803/instance/3735289581647898027/,instance/3735289581647898027,project/forseti-demo-184803,3735289581647898027,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-01T21:12:52.932-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/zones/us-central1-c/disks/forseti-security-20171101210431-vm", "type": "PERSISTENT"}], "id": "3735289581647898027", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "W6G_ps23-ss=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=forseti-demo-184803:us-central1:forseti-security-20171101210431=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.7 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://forseti-demo-184803-data-210431/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://forseti-demo-184803-data-210431/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171101210431-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.212.255", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "cFyI9u0LzAM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/zones/us-central1-c/instances/forseti-security-20171101210431-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-210431@forseti-demo-184803.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti-demo-184803/zones/us-central1-c"}"
organization/660570133860/project/trusty-charmer-23817/instance/3784432155022119243/,instance/3784432155022119243,project/trusty-charmer-23817,3784432155022119243,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-10T01:21:41.098-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/zones/us-central1-c/disks/forseti-security-20171110011437-vm", "type": "PERSISTENT"}], "id": "3784432155022119243", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "HGy1Q22FGzI=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=trusty-charmer-23817:us-central1:forseti-security-20171110011437=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.7 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://trusty-charmer-23817-data-011437/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://trusty-charmer-23817-data-011437/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171110011437-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.164.40", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "z0tfAb79jt8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/zones/us-central1-c/instances/forseti-security-20171110011437-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-011437@trusty-charmer-23817.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/trusty-charmer-23817/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/400608833364712239/,instance/400608833364712239,project/pso-cicd8,400608833364712239,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:29.006-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-prod-west-default-pool-75f1642f-ttx8", "type": "PERSISTENT"}], "id": "400608833364712239", "kind": "compute#instance", "labelFingerprint": "h2CDrYm_xXo=", "labels": {"gke-prod-west-9cf5507e-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "u9PNIVkqDmM=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRR0xRNHZ3ZUNlWmVWZmtwc2JYeGZXREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdGQyVnpkRUF4TkRjNQpOVE0xTVRFMU1CNFhEVEUyTVRFeE9UQTFOVGd6TlZvWERUSXhNVEV4T0RBMU5UZ3pOVm93TmpFME1ESUdBMVVFCkF3d3JkWE10ZDJWemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMWGRsYzNSQU1UUTNPVFV6TlRFeE5UQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOeUFJR1lkMTEva1RaVWt4WnBqd2JlZwpvWmgrQ0hVRjZ2NTAxV3dXRHIzY2FHV3pEYmRvOXN4WWxtSmpvZk5ReTdPNDNXMXlqQWRpT0xSY3NjTjF0Y2ZpCjNBTkFuZGxiVUNMbHdXTDkrTTRUNjF2UlFqSUQ5MmtkRHpTMjJiV0dOWk5zemNWa01aSDhGSU41L2I1aFFnV3EKTGFIT0cyVkxEaUxKUjNyby9obnh3YkhFNEN4Vm5VZnpQTnJqU0hKcHdhV0hzVEROUVF4bG1FdmE2WEdndXRUMAp4ajhLQURiUTEvdDhQZlJrdEIrOVhXOTJ3VytQRktucDhHTHNsMHNmM08vUGFCMkNWS2pwMHVISktlV0YrUUVuCnczTkMwMVNWUXJRbWl4NllkdHdaeDRhNkhKUFYrZ3RKNTF6REV2R0VqenVCNDVvZWtxOW9ZR0krVlRrNDJhc0MKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUFaYVJFSytFMFlIcU92dTlpWmZWNXo3cUhkaEFXTzNCZm41UWdtWFlOT2xlVHMvCkRROUMvdDJxdWYxOWk4aVZ3ajNoVzQyRm1PL000cVJVOWxqZWlmTm1Tei9UQUYxZTlHb1lxVU4xWTBUTFJFQ0gKVGtUUnc0MW9SRXdMYU1KajAwODhaZ0ovaGRlZ1ZKTkpZbDdIeU9Jc0FMK3JyR1JsYms4NkdId1hYdHQxRzdDdwpVZEhCVXFJMU1ENHQ2V01TNG5zbDdVRmxXV0pXYURoRHlqdlVoK1gxUWg3Y1YzYUpPRnJqcXFIQnZiY0hEQUpOCkV3ZDBBVUxoYkVQQnRqeVRNZWl1cFMvMDNpTy9YRzA0RC9NZUlMcURlQWpZaDFvNGsxVFNWVm4yRllXcUN1MHoKblludTZMaXhUTFVpUDdOOUhuYWdGemp2cm9rR3R2YXQxaVFxeXBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.120.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.123.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:18+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-west-9cf5507e\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: Z_vlAxXbJ1RWwVZ4bimoPobeEpu9OxYV5V8hLL6SLxU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQWZDZ0F3SUJBZ0lSQU1nNThMWVo0UUc0ZlNzekFEQ1NHZ2t3RFFZSktvWklodmNOQVFFTEJRQXcKTmpFME1ESUdBMVVFQXd3cmRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTF3Y205a0xYZGxjM1JBTVRRMwpPVFV6TlRFeE5UQWVGdzB4TmpFeE1Ua3dOVFU0TXpaYUZ3MHlNVEV4TVRnd05UVTRNelphTUJJeEVEQU9CZ05WCkJBTVRCMnQxWW1Wc1pYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDWmc0bzQKUVZUM2JCRkVsQUl4cSt5ZGVlcGgvbUVhWWFjaVFZZWkrZ3FZZllweUpJWCtQODd1eUl5d0lJUmo5dnVnUGZVbQovbFNjTkk5QWptdVY1bEMwQ1QwSUY4OEMydDB5dTFjd3VrWjYvb0ZPUmErN2ZkZ0xYbG8rc2cvMDZGODdUdFhICmlhY3Fibk9vOFJPdVRpZGlZTitrR0Z2djFvamh4T09qcU5yUHByWEVjY1FZTDEzelFsYTNDSWZhcXY1c3B4Q3oKdk9OTDBpdWJZWHJBRVFqQ2lkalpvaUJWcW9weTVaY1dNL3FKLzVqYm1DMndZZTI0NGorTG1JZzUxWDkrZjgvRwpVTURrSktuc3I0TjNHNzhBaFhETGF1UnpaNXhEdEJmWWFFaExSMjVYV2JpczhRd25lNTVraDBYWkQ0eGZVaVdDCk91N2FIYTJLMFQ3Uzl4Yy9BZ01CQUFHak5UQXpNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURPQW44VwpabUtMREZsaVlocTZJeDVuSUhSWjg4dDRKQzBZM0RKRlUvZUtVSEltYTE2NXp1WDI4Y004SXl6L2ZwbmQ2cmVwCi94WlFxU3Q5elQ5VlcydHhCcHpFenRJWXBOYUR2LzdMT09OdXFJM0pJc0pIVm5USU9iZTlTNFlOd2VBZWhrQW8KV21SbXliWk1xdkc5WVNhSE5lczFIMU1Kb04zV3lkNHBmT3hCaW4zS1RBeDUvUzNYdzRWbGlMTmVCYjI2djdvNgpoL2hRcDFJbHUyblEwdFZFQWlxR2lpMmpyU1Yvajc5THBPMUVLZ21BOUk3OXZUZXBKUGVuRkJKbElFdHVMd2NyCklYYktGbTBkWitBcERBOURPcTdhZXE5OUN2RGc0MVhwMjFiZ0tRajdodWNrWHA0T3NXV0xXWG9kckJhMG9TY2gKd3dzS0lYbk5pUUk0V2lYWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbVlPS09FRlU5MndSUkpRQ01hdnNuWG5xWWY1aEdtR25Ja0dIb3ZvS21IMktjaVNGCi9qL083c2lNc0NDRVkvYjdvRDMxSnY1VW5EU1BRSTVybGVaUXRBazlDQmZQQXRyZE1ydFhNTHBHZXY2QlRrV3YKdTMzWUMxNWFQcklQOU9oZk8wN1Z4NG1uS201enFQRVRyazRuWW1EZnBCaGI3OWFJNGNUam82amF6NmExeEhIRQpHQzlkODBKV3R3aUgycXIrYktjUXM3empTOUlybTJGNndCRUl3b25ZMmFJZ1ZhcUtjdVdYRmpQNmlmK1kyNWd0CnNHSHR1T0kvaTVpSU9kVi9mbi9QeGxEQTVDU3A3SytEZHh1L0FJVnd5MnJrYzJlY1E3UVgyR2hJUzBkdVYxbTQKclBFTUozdWVaSWRGMlErTVgxSWxnanJ1MmgydGl0RSswdmNYUHdJREFRQUJBb0lCQUNobmI1eW96VlVsczFISwpadDF0ODZQcTc1NkZGa2VjUmlJRS8wOE00bmNLSzhNcEM3OUVTaEdjNVRLQ0RIWkhEaWs1eFdsUzdUQUR3V1JyClY3T25YN3hTNWlaWUpkc0pnY2lWZURoUi9yVG1nVi81aFd3aWpoZEg2UmF4UlBQZnFSanlBZUEzd2JDd1MyNisKck1CbXY0VHNIRkNUUExkZVRyNmxWSWpCcTMyVmFjMUN3Zi9Nc3l6TkZDZDJVc2xGMFl1TC9KV055UkE1MTJRYgpzL1Nzb1dZN0tsYXdWY08vMldBVHJEN0tuQXdpWWNnb3Rzb0R4QnVTbmc3SGpxRUxXZHhSZGpwc1M3SnlTWXZGCmgxaVhSc1A3Wkc4ZU43b3Q4bWlyUHlzbkxSS1NnWE9nK3AvQXFCVFEzdmJ6QkdTY0thQnd6eDVzUThsZXptemgKMVFXT055a0NnWUVBeGNkZDVpRDVzUDJWQXFLaFVTdzMxMlNxaTdUY2FTbUY5VFN3bVdHaWFLd0FlYkYrY2xJegpjV24xR2VTeDc0VVZCQU9jYmlnNlVtdkFGaDFIeitDR0dNVWtXSHBkNFhtT3VqTHpybkNLOHVSZmVaTitOYWhTCmYxRG56SVcvMGQ1R1RJUUNTdFo0U3picmJJSVZpTkw0N2l3T2l4OVE0NXVYZXJJdEVKd1VxUU1DZ1lFQXhyUmMKY0JZUnloWURScUFWYnY3dzJPcFBlekUycXNFZUMrVmdSb21SUjIxbEtqd0FoMHA4dkZZZE95L0dFRkpIUkhnaApTRzd1VFZIQTBvTjRWemV4MFBiSC9rdk9zQUIwYkxDSDZqOUQrUVF0VWlUMlhKaHl4TWY0Z21EeCs5YllVVnhXCklsUVpybzhacU5kalA0QWJQcmRnU0lSK3BlMVkrdE1Pbi9CSHZoVUNnWUJiUXdpNEpTVXluNEMvNjQxbXFISEkKQ1dLTS90THFEOGdKZ3R1dW14ZlhGdTlOT0RMeHk2NkRPZkpvbFZmcC8wM1lRVlpRbW0xM0ZOTlpJUCsvRTRxdApLV01CRk0zM09pRTdHRUhMajVEK1RaVWt3NE5zZlJROFBYZ0lydnI1ZTRpU3pDTkdwenB3OHBHbHkwem1pdnRrCjQ1MStZdC92ZHg5cDlZZkg3MDIxUXdLQmdCQ1J6N2VGRDV5emN6aDdkdTRYa2t2MFZnWm0xekVzQTI1b2hUdTgKa3dIS3pJbldFUkUzRSttOG9KbGo1WGRNOVNadmdnOEJPUnYzZWtYVHNzQkxJNmZTUEdFblB5Z01FYWxTbXpMYwpiYldoTklwS0RNVXg3VGdkbU1wK2ZROU1IaVBDdUdnS2JVM1NId2ltVlY5aE5tUm5kRDczMVh2T3JBSFdnYnl5Cms3ajFBb0dBZTVWNWM0OUZZV1A2bldLZmk5NmQ3NGwrMmk1c0JlOUtsSVBCUlYwYkxPSHIrRittRFpwRnlxQmIKY1JzbVJPN05pdlBDRVhmY0tYVko2L3IzN3d1NURyTmx1Kys1cmJaSm4zTmpEd0swRUwrSVQ5L2tMaVo1WHhiawpGdmdtMGpNU2FVWE9IVmhaUTBCaWgxZzVlSWtqWWhoVHZZM1d4Z1g5cGwvdEx3Ni9tQWc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.232.221\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.123.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-west-default-pool-75f1642f"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-prod-west-default-pool-75f1642f-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-west-default-pool-75f1642f-ttx8", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.104.36", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "CDzVdeG9j1c=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.21", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-prod-west-default-pool-75f1642f-ttx8", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "h2CDrYm_xXo=", "items": ["gke-prod-west-9cf5507e-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/cicd-staging/instance/4125715341635106701/,instance/4125715341635106701,project/cicd-staging,4125715341635106701,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-12T13:28:02.682-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/disks/gke-redditmobile-staging-default-pool-cb6fb0ef-hvso", "type": "PERSISTENT"}], "id": "4125715341635106701", "kind": "compute#instance", "labelFingerprint": "PmdZM3nQwE0=", "labels": {"gke-redditmobile-staging-27f4251f-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "USR_oPvUSa8=", "items": [{"key": "cluster-name", "value": "redditmobile-staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQVBCOVFGaGI3ODBoT01kdGI4Mm05all3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UaGFGdzB5TVRFd01qRXhOelF4Ck5UaGFNRUl4UURBK0JnTlZCQU1NTjNWekxYZGxjM1F4TFdFdE5UVTJPRGt3TVRjMk9UQXlMWEpsWkdScGRHMXYKWW1sc1pTMXpkR0ZuYVc1blFERTBOemN4TlRneE1UZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdwpnZ0VLQW9JQkFRREJiYUprcmszeXNvVUZIbGViY3ZKTjhvY0x1Z2xQL3ExbVlxVzYwanJpRWtKTktROW15VVN1CjlacmZhN0JSNXVmS0NrWExhcDJmV0ZpZG1WeXZVMWFZbEFhaGhiL0oxUVNXZFdIMVYxeFIyMjJML2xtenRWQkYKWHJ1cTlaRzdiWjBYWm5UbExGcUNoUGx4UmFYNE1ERDR5MUZRUWhmUEgxS04wU242T1prNS84ZDJYaVd3YmFOagpucjlkL1ZHQlNOc2tBWVN2aHM1d2JTNHFWWitWVmtxY1Y5djIvREtDY3hiY2dYekxueWRkMStNZFdYenpLWGdXClh5STZmay8wZlQ4V2ZzbW9yZTFrSU5peWNSa1ArdVFPYUFYNWpiQ2NZVTdndUJxSC9ONnY1NXRXUFRlNGQ2VCsKNTZVajVRUVB1ank5VWRWYjc5bHFFZnNkZytrY280VEpBZ01CQUFHakl6QWhNQTRHQTFVZER3RUIvd1FFQXdJQwpCREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFOeS9yUGdkdStQM2hlClQzdDlqSzY2OEhCZjlucEV0aTdKUDQrOHFKejZZdnNjUHVYYTQ0K3MzZ2l6U2owd0R5YktwSnlKNXB6Wlo5V0wKNWd6MWZud2NmZ3I2Q2YvbnF1bTduZm1nUU1Qb0hTc0loK1FxMk02bmJnWHV0eTBhKzBXS2lnRUNqQklucHhITApLODFPNW95YW5YNmZtUGEwVjhwWkk4R0lhZmRoR0dHNjJJVFR2QlhVbHRia05obzY1VEdEQkkyNlU3VlJuUFZICkxpVENqZ0tmQXA2QXBpVE9ncDljMGdVWVE0WHZoSkVSWHN1SHFWTTJyWWw0aThlSHhidXMwUXpYWGJ2MnlYc0kKL3pKTWVQdXBuZUJZWG0rUjQ3ZWlPYkVqS0lTMFBjQ1djOGRQUlUxRXRNWkNkMzV2SFo0QnV0V2s0UzdNSk5Odwp1bTF0dERUdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:41:48+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-staging-27f4251f\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: kXWELnGQVn9EVh6g9yUjBkP03kKgmfocRiapcKgjTbU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxFYi9yc3BYd3UzUUVoRzg2Q0ttRzR3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UbGFGdzB5TVRFd01qRXhOelF4Ck5UbGFNQkl4RURBT0JnTlZCQU1UQjJ0MVltVnNaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURJbnJLdy9RenJhKzlleHJYeVZoNUVDU2d4UkE1dnNicHJrZDYwNmZvMkFMcTU5bWNrV2t5WQpBMlNSeTUweXEyMU12aGk5YzdoWXc0c0JjL3lxQllmWGMzSTNUL0tMYzNPTis5U2hNN0J6VzJqWENuekpUZkF3ClZnWS9pUnpRUlJJNlMxTEFLV0FSVkMxUHhUc0tua1N5bmw2TzBaWk1jdnRKMVV4WHE5NFpKSDV5SkRhSUZvK3AKZ1pHdTdKSGdBNGkrbW9Pem5JclJtLzJGOUlFb21hTGdWQ2docVMxUW0zRGVuczBNS0R2MFR5ZHY2RDJqWW94cQpWdE56cVBoK25obG1Hc1ZxZ0FMWno2REp6OEY2bWFsbkYxV0hJS3lHdml5a1FNUXZoeFdyb3NnWXFVWndML2pEClUzbm1sd1QxdDhvS1pXNURtUDJPOFNIZFpQQzlrN3E1QWdNQkFBR2pOVEF6TUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0wzSCt6aDlJLzkxUDVUbTY3YlF1MzJyNktnbUJSSXhHUExqUkdmK2pIOXJ6b2t3U1NUcU9ICk5NaVFPSEpvWURDNGF3Uk8vMlg1SGJHN3hscHZjMjMzYnVVWDFxRWoyd0UrUE5vRi9ZY2tMZGpKSXp5RVJGb2kKMzFnemhhQnZBY3BZVnowb1ZReVNEd1VJL0ZsdEpCRXBQVHF0S2tLMzcwRC9EdzNOWlZLQjZzREg2aFF0d1ZZTwpra05QZlVUMUFnK3NKTTdOVmlMeUhsRytuZHlSWHF1Q0xsdFR4Y3c2U3oxdmdRUkFzQVpvR1lYcks1UmtIK1hNCkRoS2xOb2ZHNWd2VjAwekJMRnhTcDBxVzJmR1h3Z09Ia3BPcEVwL3F4YWNlb3ZpVXVLVy94WVRDMWJxdU1tS1IKUDYycGdKdTZJaHp6OS9pbWNaUG5yTjJoMFNMS2cvM0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeUo2eXNQME02MnZ2WHNhMThsWWVSQWtvTVVRT2I3RzZhNUhldE9uNk5nQzZ1ZlpuCkpGcE1tQU5ra2N1ZE1xdHRUTDRZdlhPNFdNT0xBWFA4cWdXSDEzTnlOMC95aTNOempmdlVvVE93YzF0bzF3cDgKeVUzd01GWUdQNGtjMEVVU09rdFN3Q2xnRVZRdFQ4VTdDcDVFc3A1ZWp0R1dUSEw3U2RWTVY2dmVHU1IrY2lRMgppQmFQcVlHUnJ1eVI0QU9JdnBxRHM1eUswWnY5aGZTQktKbWk0RlFvSWFrdFVKdHczcDdORENnNzlFOG5iK2c5Cm8yS01hbGJUYzZqNGZwNFpaaHJGYW9BQzJjK2d5Yy9CZXBtcFp4ZFZoeUNzaHI0c3BFREVMNGNWcTZMSUdLbEcKY0MvNHcxTjU1cGNFOWJmS0NtVnVRNWo5anZFaDNXVHd2Wk82dVFJREFRQUJBb0lCQVFERy9wTWtkM3lQTC9xNQpPY1ZUNFJRWVREVHYyUit3cnN2STAySGlkWXRZY1pURnpLRTJMOU4xblRmdVhkZEpZVDBET0RQMkI0aTlrd2lZCm9tSG1pNkhZbFl5ZlRNKzZmd1FKdTllSEpteEpvRXYzc1ZGaG84c3hSc0xmMXJNYjZzZFB4MU1IaElMajdXa2MKalBncGFoK2VSUFJxR1g1SnltdHpLdjJVb01lbWl3aHlNQm9aTzI5YUJBZkFCWXBGOERhdVNKQXpNOXNZRkRaMwpRMSthTy9Kc2gyQXFsUUh2UjBneEdoQThROU56akJJYkpnek14Z2pSTER4NTdBS0puVW5tbEFmaCtXbk9MRWI5CmVzanZ1eDJGWEJ0dHFhVHdvNHlNMmFnMmpuTW1LeVFGTVlhVmRMVCtCdHFDT0NoS21wR0RJN3VQUkZXditrbmMKM25IVXVEdDVBb0dCQU5vK1pydExPMVQrMTJUSjVFMk92S0hjLzJ1VG9WWk1FUDNhWkFZV1gwdTZSUGk1Q0hwTgptWDdpQzBKUWk4OS9zUGlCNUx3TDM2cTRURnpIbXRMMjMxWGxEZ0JWSEVCQS9DNlhQUmVRQzVMblJCbWJmbzVuCnVWTll2bTZVY0R3aWd5N2l1TDFGY1ZJRnd5QjhpdHk5NUFXY0l1OFhETTU1enVZcXJOVElOZVd6QW9HQkFPdFQKeFQ4RzNldW5vb1ZIOTgzd3VJTjVUZW5hYXlIektLRjVFaHFRMHVKTnJXaElhdGI5TkxlaFlIbXI5ZlljTzYxVwpmNnF4eUhBYnJCbXBWZ2ZrdzRQVFdUam5Lc1RUMjVQZWh1TWVkNEtBOC9EWWIweE9XbHNoNmdNd1B2enR4N01MCkZrV0RzNGREcWlKQ3lqY3dEdEtUMXc0SlVWcFVXeVd2L2loSHRqL2pBb0dBZnV0bFVTektQMzdKQXN0S296UU0KVFZHNWxQVlJFVi9CVGZBUTFWMXpaQlhhZ0k4UytCVmkyK0JYVGVTTHVrdDNQcjVEcUh4N1FjeFdWR3FjaG0yZApxbFZBRkQ5cTQ0OG5XVzBJMFVnckF1N05zdHF6K2RzbWN1c2NMRERWS0pPbG1NR3ZVQnN2Y05UN0NreURjU1paCmtrMmdIMDFYWEVpSVkyQ1VERmEyeVhNQ2dZQnRMVWMwajNZRDc1ajU1c0t6Mjd0dTI2ZG5HRHRkMjliODJ4T28KR1lxTkRXYW5HL25kVmtuUDYrRzdjU2xDamlTdHJaUzdWNUhiV1N0R0dJYmVVS2JZa1FReTN5UzdmbUsvdnB5cgo0Q1duK1RXemhtWlVhNEdHQ0R6dVQ4TFpTMk83MENmOEJqY1RTVFEwZ3ZJWUdvYTE4WHJ6ZXlVd0dEVFZUa3BHCjI4WlU2d0tCZ0FVNmpweGVIYi9aaGkyRnhUZ21yM3dyVVRqUDZVRTdUOGQwS2p0L3pCYXVlYkNtdmFMSkVsTTIKelEyMVIxSjZzVksxSUlQbUxoSEZJcUU0VTdaYW1sNGJoclFzeTMwODNzalFUb3JtYWExOTFZVGYzckxvTUZRcAo3UlRWbFV1SmJiQ3Jxd0VaMHVzd3AwajNQZ05jNkwvSE5EUFRSUWlnTHFxcmhWOC9GTktwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.199.113.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/556890176902/global/instanceTemplates/gke-redditmobile-staging-default-pool-cb6fb0ef"}, {"key": "created-by", "value": "projects/556890176902/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-staging-default-pool-cb6fb0ef-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-staging-default-pool-cb6fb0ef-hvso", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.238.165", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "rDi5eCBXyqc=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-staging/global/networks/default", "networkIP": "10.138.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-staging/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/instances/gke-redditmobile-staging-default-pool-cb6fb0ef-hvso", "serviceAccounts": [{"email": "556890176902-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "PmdZM3nQwE0=", "items": ["gke-redditmobile-staging-27f4251f-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a"}"
organization/660570133860/project/clouddevdemo-197919/instance/4140648925701200790/,instance/4140648925701200790,project/clouddevdemo-197919,4140648925701200790,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-13T16:57:46.065-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/disks/forseti-server-vm-5008", "type": "PERSISTENT"}], "id": "4140648925701200790", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "T6z9d0jKFzw=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"clouddevdemo-197919:us-central1:forseti-server-5008\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Set ownership of the project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-5008@clouddevdemo-197919.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Download server configuration from GCS\nsudo su $USER -c \"gsutil cp gs://forseti-server-5008/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\"\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-5008\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\"\n(echo \"7 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-5008", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.154.151.16", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "WFChhxHOzlY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/instances/forseti-server-vm-5008", "serviceAccounts": [{"email": "forseti-server-gcp-5008@clouddevdemo-197919.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c"}"
organization/660570133860/project/joe-test-proj45/instance/4175556641771659159/,instance/4175556641771659159,project/joe-test-proj45,4175556641771659159,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-18T11:54:49.728-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/disks/forseti-server-vm-4735", "type": "PERSISTENT"}], "id": "4175556641771659159", "kind": "compute#instance", "labelFingerprint": "01Uz82x-BbI=", "labels": {"goog-dm": "forseti-server-4735"}, "machineType": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "xSZPyCbDPGY=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get update && sudo apt-get --assume-yes install google-cloud-sdk\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch inventory_bug_fixes --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat install/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Setup Forseti logging\ntouch /var/log/forseti.log\nchown ubuntu:root /var/log/forseti.log\ncp $USER_HOME/forseti-security/configs/logging/fluentd/forseti.conf /etc/google-fluentd/config.d/forseti.conf\ncp $USER_HOME/forseti-security/configs/logging/logrotate/forseti /etc/logrotate.d/forseti\nchmod 644 /etc/logrotate.d/forseti\nservice google-fluentd restart\nlogrotate /etc/logrotate.conf\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/install/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"joe-test-proj45:us-central1:forseti-server-db-4735\"\nexport FORSETI_DB_NAME=\"forseti_security\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-4735/configs/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-4735/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./install/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-4735\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n\n# Use flock to prevent rerun of the same cron job when the previous job is still running.\n# If the lock file does not exist under the tmp directory, it will create the file and put a lock on top of the file.\n# When the previous cron job is not finished and the new one is trying to run, it will attempt to acquire the lock\n# to the lock file and fail because the file is already locked by the previous process.\n# The -n flag in flock will fail the process right away when the process is not able to acquire the lock so we won't\n# queue up the jobs.\n# If the cron job failed the acquire lock on the process, it will log a warning message to syslog.\n\n(echo \"28 */2 * * * (/usr/bin/flock -n /tmp/forseti_cron_runner.lock $FORSETI_HOME/install/gcp/scripts/run_forseti.sh || echo '[forseti-security] Warning: New Forseti cron job will not be started, because previous Forseti job is still running.') 2>&1 | logger\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-4735", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.154.68.31", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "00k_-IpBf0c=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/instances/forseti-server-vm-4735", "serviceAccounts": [{"email": "forseti-server-gcp-4735@joe-test-proj45.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/4181630691934094165/,instance/4181630691934094165,project/pso-cicd8,4181630691934094165,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-25T01:00:42.037-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/deploygce-deploygce-v003-jau1", "type": "PERSISTENT"}], "id": "4181630691934094165", "kind": "compute#instance", "labelFingerprint": "6MINBjI4qfY=", "labels": {"deploygce-1479820963077": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "gSJ6H2hquGM=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.8,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":10.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/deploygce-deploygce-v003-1480064436442"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/deploygce-deploygce-v003"}], "kind": "compute#metadata"}, "name": "deploygce-deploygce-v003-jau1", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.237.36", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "mCNCUjFP0cg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.15", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/deploygce-deploygce-v003-jau1", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "6MINBjI4qfY=", "items": ["deploygce-1479820963077"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/steady-circuit-182208/instance/418536851457136491/,instance/418536851457136491,project/steady-circuit-182208,418536851457136491,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-12-11T12:24:37.485-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/disks/forseti-security-20171211122050-vm", "type": "PERSISTENT"}], "id": "418536851457136491", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "6vPuwGpVVjw=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch deployment-2.0 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"steady-circuit-182208:us-central1:forseti-security-20171211122050\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"carise@henrychang.mygbiz.com\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-122050@steady-circuit-182208.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=steady-circuit-182208-data-122050\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"10 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171211122050-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "lu_aM_YhM0g=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/global/networks/default", "networkIP": "10.128.0.8", "subnetwork": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/instances/forseti-security-20171211122050-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-122050@steady-circuit-182208.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c"}"
organization/660570133860/project/mwwolters-forseti/instance/4197519335047865531/,instance/4197519335047865531,project/mwwolters-forseti,4197519335047865531,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-10-25T16:12:21.273-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/zones/us-central1-c/disks/forseti-security-20171025160447-vm", "type": "PERSISTENT"}], "id": "4197519335047865531", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "-ZDKcM3hYR4=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=mwwolters-forseti:us-central1:forseti-security-20171025160447=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://mwwolters-forseti-data-160447/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://mwwolters-forseti-data-160447/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171025160447-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.86.205", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "2RMdnUDM_-E=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/zones/us-central1-c/instances/forseti-security-20171025160447-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-160447@mwwolters-forseti.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/mwwolters-forseti/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/4254928200080011240/,instance/4254928200080011240,project/cicd-prod,4254928200080011240,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-08T09:53:12.021-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-prod-west-default-pool-481e7251-sd1a", "type": "PERSISTENT"}], "id": "4254928200080011240", "kind": "compute#instance", "labelFingerprint": "ZiCwJhcirGU=", "labels": {"gke-redditmobile-prod-west-3470febb-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "U4UDtSVhH6s=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURORENDQWh5Z0F3SUJBZ0lSQU85bEVwekFSMTFPNWJwekVIa1pLMWd3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qUTVXaGNOTWpFeE1ESXhNVGMwCk1qUTVXakJETVVFd1B3WURWUVFERERoMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXYKWW1sc1pTMXdjbTlrTFhkbGMzUkFNVFEzTnpFMU9ERTJPVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTVllMVZlRHU4eElhYkNvUi8zcUdxT2lldEoxajFlN1Q3aFFNU0VFQUw0OGRFWUZmM2dRClR4SmNGanhIWWcxTmRhSXkwUkdEQXFNVGZyTDRUdTlaL1cvc0Y4V3h2K29kMHdDQThsSmUwbVNJSjl1NDI0UysKMEQ0TFJJZ09OWmd4QUF2SFJTTE9DVTljVktOcW80S1FoL212WjBuYXdhVHQ4VnN2VzdWTHEwYXZmZXZVeGdqdwpETkRHUTJqbGZHN05seXF6WnN4eFZMNmNQU3NEWUlSS3g5TlpnbkdDMEZPZUdTOFMwM1NDazZyMkxXOXBqM0hkCk1DTk9ReEUweldKRkUxZTkzOXVVSE5MWlFHL09ieTF5RmFjb2ZpZjZXRkxPUHYwUWdIMXNHdmxZV096RGV4QWkKYkExKy8xN0VJUzJQb1JLWTVhdFgrS1FOSCtnVnFQenVBZ01DQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRRApBZ0lFTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdhMlJ0TkV1cGxFCkF3RFBlTkZ0ZlZhTmlkd1NLWGxkajNya2tIdFRIQUUyZ2dSVHFlVXJVQXZ3WVJDUlFtUnZ5T1dvaUhjdmpEMXUKVE1tTUhhdkZEQ3JlOTdIY21OUEdlTUtjeDhPQ0xBdDdSSXgycndTUmdJV2crWWE0UXpJVEtESUUrRmJZVGNyZApJVFozZGtDbDhibWdPMjhCWHh0eE16cWpTUUZsR0tCNklGTW9vUEE3ankwYWlBdW9xMWFRYmV1bVB0VkVESzhvCjdQSnR1anErSVR5NG9lYzhHblV1bnhPekdITEZoZytxQ25wN0sycWIrUHZ6TzlRZklsYytHVFV4WUpQRTRWZmIKWk43UDUzQlQ1d3pWTGhXYUt3aktVbFBHV3ZETXZTUys5QzlSb25GRmhXRU9QSzFzWkhtSzBtWTVVN0FqSUZlTgpmWDF1NEhmVlR6dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.56.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.59.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:42:43+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-west-3470febb\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: i9C4TB2r4rrZJ4jHOt8J340y25DJmBVG5rHUrZZfaIk=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQVBBSlJxdkZFME9KSmx6TWxpVkFySkF3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qVXhXaGNOTWpFeE1ESXhNVGMwCk1qVXhXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJMHVXSgp3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMycVNJClpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNkhxNVcKL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3bzBVVgpwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEJrSDd3Cnc2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFyOEZDRHhyMEcxY3hOQ091dDVnblhZKytmMUFvTFF5UWRZR3BpUEMwWXdaOFpqU1J2TW9nClczTEx6bnlqZ0FnTGRXOUpTZHFoYW40cE9nWG9DbzBvcG5WbTRoaVd6dVUwb3FUQUo1eE0rendwVGozYUU2cnAKUnpmYkVMWVpPbnEzMXoxRW01Wkl1N21MbzBEYjNWam5odG11bHhJUWZQUjZ5SDcvOTYxYmRmWExWeVB0TGxuUwpvbTRIblQ2V3VCNE1yODhMaSs5QjdOQjVLMkd4dVZpM0Q2UlUyTnIzRDhNUGVxRHRMell1MTAweWdldEQxMzhaClkzckhObklSNVh2aENyb3B2QzNLTDI3VTRVdGdEMFBKTENzRHFhaHZPUnZKS3RkZGgzV3pUenh5RHV1b2FGV3EKVHJKZEVtVlEyZ1NPZnV2QlFsNjhNdFpJY1NtczBlVHRFdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJCjB1V0p3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMKMnFTSVpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNgpIcTVXL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3Cm8wVVZwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEIKa0g3d3c2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJBb0lCQVFDbGx6Q3p1NUszeDZoaQpBUi9BcStROUtvajlPbDdaeGpyWFRsM1docDVQMGdjeDR3UU8wY2RqOG9kSWdEUjBPMXFUNStNKzFOVVh5RHFoCkNQOUdwY3h4dkh0aVJ4YnBQaC8yRkJic0YwdFlsQTRna2k5RjNOQitGU211ZkM4cVVqNGFiYXEyZG9iLzlOa1YKZ2dZcnNFRWJza0dFOVdkdFVEdENrVnNkbnlnS2tyMHJtajFXem16V01jenFvMEU3TDZyWTlhWWJURkI0Ky9jcApxM293bjhlZVh4cXVGcjlOVGNiY2p5Nzl4V1JwOE9mZ0IzTzI2M3laRjhxRzVWTEpTYytlQ0crRGJmUjRWZXgzCmRmcTBxTnVqQmRZSllvKytneVlocVdtZVM2cFpvdW1mK3JUclFnaUZxWjlXT1l4aHRPRDFMM2tPaXVBQWZEQVEKSzhJU2JnM1pBb0dCQU5PUzZ6d1g4ZFJ2bWNUZ2ttamx4MlpBSE9PR1h2Zm5rQUMrM0pyOW9sVUpqblhqbnBzQgpUS0JueUxibkRVbk9NYVVsS0w1R2crSGd2dS9FMWZmdnp0d2lZTStwTDNtbEhBSkh3NmFqUFltd3hZYnprZlNGCjFza1NPMzB6SlZPYjFSeHdPblNsTDRYcmQ4bHhuSXN5OGFtZDVsZ3M2anRobHhCQ0JkcFhPTGNMQW9HQkFOM3YKb1ZpcnJPUkloNFh0OVJKd3FsYjhPMklSM09mL1NsSld4ZnVYUk41Um9wMTE4V3RMYkhQbmFNZUxlc05tenNuZwpOUUFCSC83OWUzanA1bDJtSGtXMTNRMVRacXl1ekRXMVFIdTBYVit5UTd5U0pGYVRUeFNqQ1lxV29CcXNhVWpCCmRsMkZjL2lnYnFrODRoM3NIYkV4NWxvY1hyS1JKZE02VHpNMmJraWpBb0dBV1BDa0Rxa0tNZ0dRSktFN0t2bWQKTHpDNGREVWlheGhmQXRFNUw3WjdyVC9OTVdXMFlQalUyNEdGY000RVdnaGgra2g2cmpJNmNwUGw4Q2xRd1YrQQpHQzRqZ0doZzJzUTcyQUdQRDlnRG9JUTlKUlB6UVZXYUN3Q3RIVjZJekhMdnpYcW9PQ3pRbzMxdTU3SG8ydU5aCmo3SWZDT1lvdVRtM0pWQjc0V05WSmkwQ2dZQVNxbnpmZ0ZEaVFsZGpwRWZnYlNsbWQ0Qm5GeW1GT2F0K2tWM0YKYzB1UGh6NHVFQ1ZsNk1vT1ZZQXlpRUNpL3BxVjBBMmxHbk1lZHlOVFlCakg5NWpFTkMrTFYyQmpWYkJITkI5ZwpTQ015VVVQeE1EbHVMcVdRRHNaV3FhUjltZEtoRStSb3FUaS95SDZHTFdDM000eXJ3bzZsTlkyaFp5UFBTREF4CkZucmdFUUtCZ0dnT2RFeENVUGNUVEIxWHQ4NDlaeWQ1ajJheHA2UWRnRXg5emIyM1MyMUV3WFZXNGY4bWdMb2kKTHBocjljZWZOVUZGOXBwWlF2WUxLaUR0bkNxUlBFeDUwekhTRXZvR3ZlWHpDSjkvMHo1bXU1ZVljdTVURC9ZegpKOThIYWk0V1JLbUs4aFZWdzJJUTVzUkc1OTB6WEkvWVdiUWZxbXBNTDgxTEFKaUhEcU1sCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.102.233\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.59.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-west-default-pool-481e7251"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-prod-west-default-pool-481e7251-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-west-default-pool-481e7251-sd1a", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.228.238", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "0h0OJlnWKq4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.6", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-prod-west-default-pool-481e7251-sd1a", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "ZiCwJhcirGU=", "items": ["gke-redditmobile-prod-west-3470febb-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/inventoryscanner-henry/instance/4282792071019590346/,instance/4282792071019590346,project/inventoryscanner-henry,4282792071019590346,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-06-30T15:09:41.538-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-central1-c/disks/forseti-security-vm", "type": "PERSISTENT"}], "id": "4282792071019590346", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "QTFdfmSNWlc=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=inventoryscanner-henry:us-central1:cloudsqlhenry20170630aaa=tcp:3306 &\n\n# Check if rules.yaml exists\nRULES_FILE=$(gsutil ls gs://scannerbuckethenry20170630aaa/rules/rules.yaml)\nif [ $? -eq 1 ]; then\n        cd $USER_HOME\n        read -d '' RULES_YAML << EOF\nrules:\n  - name: sample whitelist\n    mode: whitelist\n    resource:\n      - type: organization\n        applies_to: self_and_children\n        resource_ids:\n          - 660570133860\n    inherit_from_parents: true\n    bindings:\n      - role: roles/*\n        members:\n          - serviceAccount:*@*.gserviceaccount.com\nEOF\n        echo \"$RULES_YAML\" > $USER_HOME/rules.yaml\n        gsutil cp $USER_HOME/rules.yaml gs://scannerbuckethenry20170630aaa/rules/rules.yaml\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\nrm -rf run_forseti.sh\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools\n\n\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch moveinventoryflags --single-branch forseti-security\ncd forseti-security\n        \n# Prevent namespace clash\npip uninstall --yes protobuf\n\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config /home/ubuntu/forseti_conf_prod.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --rules gs://scannerbuckethenry20170630aaa/scanner_violations --engine IamRulesEngine --forseti_config /home/ubuntu/forseti_conf_prod.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n/bin/sh $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.192.59.87", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "1iEZaGk0qQg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-central1-c/instances/forseti-security-vm", "serviceAccounts": [{"email": "inventoryloader@inventoryscanner-henry.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-central1-c"}"
organization/660570133860/project/joe-test-proj45/instance/4284166353118731274/,instance/4284166353118731274,project/joe-test-proj45,4284166353118731274,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-18T12:00:54.202-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/disks/forseti-client-vm-4735", "type": "PERSISTENT"}], "id": "4284166353118731274", "kind": "compute#instance", "labelFingerprint": "HKvlxhzAJ9I=", "labels": {"goog-dm": "forseti-client-4735"}, "machineType": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "FTM9A-tgiv0=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch inventory_bug_fixes --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4735/configs/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4735/configs/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-4735", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.232.214.161", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "-2hfndfZQ6U=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c/instances/forseti-client-vm-4735", "serviceAccounts": [{"email": "forseti-client-gcp-4735@joe-test-proj45.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/joe-test-proj45/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/4390815515013422011/,instance/4390815515013422011,project/cicd-prod,4390815515013422011,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-10-22T10:43:48.451-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-prod-centra-default-pool-6e93e17e-uc5b", "type": "PERSISTENT"}], "id": "4390815515013422011", "kind": "compute#instance", "labelFingerprint": "cufmmA7pYqw=", "labels": {"gke-redditmobile-prod-central-f140a72b-node": "", "goog-gke-node": "", "redditmobile-prod-tcp-80": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "pz0pNzCHFZ8=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lSQU02TDNHYUliTFBRaFJ5VExjL2pYWDR3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQkpNVWN3UlFZRFZRUURERDUxY3kxalpXNTBjbUZzTVMxaUxUSTFOakl4T1RRek5qazAKTFhKbFpHUnBkRzF2WW1sc1pTMXdjbTlrTFdObGJuUnlZV3hBTVRRM056RTFPREl5TVRDQ0FTSXdEUVlKS29aSQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ySjFCMlJ3cnhJSHNxUUNxVFovWXEvYXZQdVUydWpVR2FqCkVESndrRFNIUTRFZEliSndFSlpENG9tSVlVVzJDVVlEM1hweW1SMnNTd2VtaHAvbUlWcEhOOGF1Qk1GZ0VuUk0KSlUrdUQ1di9IZFB3Nm5hNHpobWpSTVg0Q0ZmV0UzYVkrSDJidTFjY0hKenRwVTZhYWh5b3dsSUVQckNwZjArQgpQTHI5VlRLZU9NMlg3aXVKNkduSlZEK29ETlhlNVRPQVNnUWVuckpJb0ZIVFM4L0RaZlFTbEFFVzRsWlpQMnpYClJwa2ZuTDFFTUhBVU5wc2N6RGNvelM2VVVBVHhjYnhhQlVUYjVCL1BuWEMzWmVCZ0tsY29QWDhmNWEvNldaMTYKckYvMDF2RmloK2FHWEF3cC9FaVZiUk43a21xZmFkNm5EaktKU1BsNjVrbFdWbzRFa09VQ0F3RUFBYU1qTUNFdwpEZ1lEVlIwUEFRSC9CQVFEQWdJRU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSHU4QlNSUjl5KzEvK0QyMktSMTRORlRQZXIyODczbzdjTnE4L3c0WVVXdytSaWtxYS9QYjhWLzYxRXEKYnplbkplQ3NUUjdWS21kQ1RYM01uMFhYQ1JKbXpEUEMyanhqSWt2K2YvWlV0NkxUMXBZdFhNYkFnTHZoSEx0cgpiK0YwZU90MWhTelFTZXRDazBZblUyQzc0U0t2VHlxZ1B2blJwalRlanZRZmZNL0JQeDNVVFlqQ0U3QzkwMjVCCkh0SlY2S0h5OXpCNzM4ZG50eTBaZTRmSkl5WjkydWhYSGg3cGtsdkdzV05zTUVLN2xHdHVDNldNRlhxNGljeWMKN3RWRzk5c09XOFVtL0lFbjB2R2RTRUFxVzhaMUQvQkppd2gyeEJSMHdoaXdYRkRob1lLbHpWNHBPUktiVXJyUgpWM0xTYnJrTXIxQTJoZXRTdU1nUmpmVm1YdXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.4.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.7.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:18+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-central-f140a72b\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: X6lvXl1D5ck0ETLYV2tObZafr6dMn8235hgKku_XEP0=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lSQU0yZVdaaFR0WWZ1RVNwcWVYSzUycWt3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQVNNUkF3RGdZRFZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxRXdkdElZTFZ1Z3R2ZmJIVUxaQW5pSUhJUGdXMFJpR054VFFuaWFiV0JCcQpMM3R2cmV2Z01mUHo0SDRITmg0dG9jOWYxUXpsL2l6OVFNdEE5VE1aUGQxalpaOHFtYWFQcDNYUFVYM0JoQjhxCjF5SmlNTk03bW9zcENhRTRGcmRlSmczNHZyZFF4RUlZNldXMUN6Y0JxUmxhd1ZrdjBaY2o1aTc3aHBwMnU3QUsKTzlQUGsvY0MwMWM1VFEwbXhacDZ0a3IyRStWeHl5emVLUndISThkanhRRUh2RFVhazlSTWRwMU5QOWgvRGNBbApvY1ZkT21rRDZoWlJNeUQzd1MyUG1JYkxjNmxKdXpPNTAxdEZCcExUa0l3OWxzRVU2dldDcTBMRzdCZEhqODdPCi96MmkxWlMrWWJoTHZxMmMwUTZXZk9aRlJicFFVV0tRZXlCZGZveFBIUUlEQVFBQm96VXdNekFPQmdOVkhROEIKQWY4RUJBTUNCYUF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVlUVnFqYUtOY2FmRTVZa0pUSFVKbG42YlVUUld4VnRDNlhRcEYxdU85aHRuCmZYT3BtRWFBT0dXemlKenBrR0s1OC9vWFE1M1JiL3B5Q3hjMU5RNGkwOGxoTWpjd2FrQlM4Q0EzVEhhUlM1b0oKWlZIZzE5UUdxeTRHN3M5Y29wNGdkQ0hZUUYwZmdGVHBybFhocVl6bTFDWU5GQXdnN2kxblNkNCs5MUZndEhCcApCMkFjS3hIVGpHdmdPekhGWUN0NzRlT0hVSnk5bmhTUmk3R1lKcjlxZjFxelhmeFdPNzdDZzJFek9RVWVTWlBlCnZGVVA2a2ozczAyazE4Q2tMUjI5NDE1eGY1bmJCNGRWZTVNUTBLbUgyTFcvQXk2S21UQkNKem10QWdOMUtCVXkKTmZVcFN6NDJWWWx5Mi9ZelFCb3ZvUnVLdC9HbFF3QUgzY0ZBUWphYU9nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcUV3ZHRJWUxWdWd0dmZiSFVMWkFuaUlISVBnVzBSaUdOeFRRbmlhYldCQnFMM3R2CnJldmdNZlB6NEg0SE5oNHRvYzlmMVF6bC9pejlRTXRBOVRNWlBkMWpaWjhxbWFhUHAzWFBVWDNCaEI4cTF5SmkKTU5NN21vc3BDYUU0RnJkZUpnMzR2cmRReEVJWTZXVzFDemNCcVJsYXdWa3YwWmNqNWk3N2hwcDJ1N0FLTzlQUAprL2NDMDFjNVRRMG14WnA2dGtyMkUrVnh5eXplS1J3SEk4ZGp4UUVIdkRVYWs5Uk1kcDFOUDloL0RjQWxvY1ZkCk9ta0Q2aFpSTXlEM3dTMlBtSWJMYzZsSnV6TzUwMXRGQnBMVGtJdzlsc0VVNnZXQ3EwTEc3QmRIajg3Ty96MmkKMVpTK1liaEx2cTJjMFE2V2ZPWkZSYnBRVVdLUWV5QmRmb3hQSFFJREFRQUJBb0lCQUhZeGpxTWJpSmN1VkFHWApjSDlFbjdqdTJPYlVsT0dnUVpJcGNpRy9wMVYvb2JOYkV5R29DRG5NeERlakN0bDg5RHN4Y25JanJ0cUZLZzc1Ckw5T0VZWFBMS1dWVEZRMzNwZWZMbXgvMkc1UDRkNVBET0FabU12UGtTNXZSdDV4c2h4aGVzNVR0RlRIZjRiTDQKbE44ZGNITWJ0VnNZa2JhMldLWHQxUVBCTXlXMzVuZE9uMlZhbDlKaGFQTTNNVVROQW93UDZCQnRIdllMMkVxbApuRG1kcVdQdVh2RW9HNm83bmFuRkRlK0VUWUY3dTBlV3hlS3M1Zms2c3FCUWlGOWVDTFZjYUVHRmdlNmU1S1hqCmZ1bUtVTjRqZFZmTnl2WWZBcHVRd3Q4T3JGYlJEeG5aQUhYc0lEY0xjRlQ3RzBRY2pyNWNwbGV3QTk3YTdRemEKZUZ1UnRFRUNnWUVBMmFoRjdXQlR5RjRzZmdDa0J3ZHlDWVJ3S1NrdkI0ZmpLWlkyUm8rMVNBMGpEZWUrZ3U1RwpHckNHeFpLaWF6WG5kUVBBNGx5ZnQrVitaREZSeGkwb054SFlQK1dlcDRYcXNFRWtmRkZGamI0bXFRcFpQSmdaCjVFdkZnaWl5WWs0WG5KSUVBMnRIWVFGcUM3SmNDd05GcVFkNHQwVUlMWW9yZTJPQ1dMNWdyd2tDZ1lFQXhmSFkKK3BNcEpUbzJsU09nOUJIRzBmMjVjeFptMEdqT0lCWUIyTlZXTkdlc3FGN1VwMUdZS1lqQnNCQ3hjeUkvdldGagovcXNXMXZybWpWVnlBNVNXQVBpblUrUFg2Um9EOHdwWHhoYVpFZ1o2YmdlV2orckU5MEJ5QWkrdDJkNVFSdDRvCkovV0JxM00zK05RNUFZemRobFV1c3doN0V1TlgvUGNYeWJFOTBIVUNnWUVBcXVWTnFsamt6OERwakRGeW1MWkcKMnFRcThKYU9mNG81V1ZEQTR0dzVDUTZQaEg1OS9nMlo2NkRJNE40R09zbURKMFJBTVR0cWlKaGZpY21UbkZlZQphTWJSRlRKMFJMS0lGOFcrSVFJcTYyVHVzL0VWS2RkL0ZOcE5oS254amZBazUrRloxMWxuSFFwZ09qamJ2aVhlCmp4MzNzV1k1U3BCZkhhMS9EYkRFOXdrQ2dZQlRpOEZGK1lqYlFwZTVHT0dkUWtlRmFDNjJ5WlM1a0JLMzdqSDMKWUF2VGNKS3FPZVJOZnAzWG9mWUdKdldPbjcwQlpMSzgwVitCZTBLR0VyTmRtWUE2aHJpeEtyQjluVkpmYVZVawpzWE1IN1o0TkJMemluM2RrMkZtR1hMTm5Dbk1kaGpTeXNPZDdBdFZ6KzdiWDFhbkdRZnZFNnVadlVXOVl3TDNVCmppK0Y1UUtCZ1FDeUpIUUZHMVFUTG9uWUU2K2MxOEhvMS8vNDAvNVBMZWJUZ0RWdWRuM2RCQlhLbGZ5N1kzRTgKd0JXaXJQeTBHYkVaVWx5SkhyZWpSenByb3B6OGRYdi9yZ2VDUE9TcFdlV2VOY3hRVCtNeStRTjhNNnMrYzF2bgpSRnZlMmRjRlk3RStndWp2ejRhZXcrY0pGdzhaSEw0VStybUE0a3lZOUQ3ZWhIQnllYjl6ekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.154.131.245\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.7.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-centra-default-pool-6e93e17e"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-prod-centra-default-pool-6e93e17e-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-centra-default-pool-6e93e17e-uc5b", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.221.68", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "F9p8_38hTxY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-prod-centra-default-pool-6e93e17e-uc5b", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cufmmA7pYqw=", "items": ["gke-redditmobile-prod-central-f140a72b-node", "goog-gke-node", "redditmobile-prod-tcp-80"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/james-forseti-testing-182820/instance/4531530368847460743/,instance/4531530368847460743,project/james-forseti-testing-182820,4531530368847460743,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-08T10:56:41.084-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/disks/forseti-server-vm-4801", "type": "PERSISTENT"}], "id": "4531530368847460743", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "zYIHg5LHxu8=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc1 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"james-forseti-testing-182820:us-central1:forseti-server-4801\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Set ownership of the project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-4801@james-forseti-testing-182820.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Download server configuration from GCS\nsudo su $USER -c \"gsutil cp gs://forseti-server-4801/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\"\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-4801\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\"\n(echo \"28 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-4801", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.184.83.216", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "qIlMd5_RkdI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/instances/forseti-server-vm-4801", "serviceAccounts": [{"email": "forseti-server-gcp-4801@james-forseti-testing-182820.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c"}"
organization/660570133860/project/stable-glass-185623/instance/4537429145661519217/,instance/4537429145661519217,project/stable-glass-185623,4537429145661519217,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-09T18:14:55.548-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/disks/forseti-security-20171109180840-vm", "type": "PERSISTENT"}], "id": "4537429145661519217", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "pFr0U25aG2s=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=stable-glass-185623:us-central1:forseti-security-20171109180840=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch master --single-branch forseti-security\n        \ncd forseti-security\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://stable-glass-185623-data-180840/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://stable-glass-185623-data-180840/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n/bin/sh $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171109180840-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.154.163.246", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "P420PY3-KFI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/instances/forseti-security-20171109180840-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-180840@stable-glass-185623.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/4661771369491864539/,instance/4661771369491864539,project/cicd-prod,4661771369491864539,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-10-22T10:43:16.849-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-prod-east-default-pool-5adc0ee7-mbkx", "type": "PERSISTENT"}], "id": "4661771369491864539", "kind": "compute#instance", "labelFingerprint": "nww71BRklHE=", "labels": {"gke-redditmobile-prod-east-1325891c-node": "", "goog-gke-node": "", "redditmobile-prod-tcp-80": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "dK-rpqn48TU=", "items": [{"key": "cluster-name", "value": "redditmobile-prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNekNDQWh1Z0F3SUJBZ0lRSXV5VUZ6bXFwTVZpai9lWGw1VGZYVEFOQmdrcWhraUc5dzBCQVFzRkFEQkQKTVVFd1B3WURWUVFERERoMWN5MWxZWE4wTVMxaUxUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxdwpjbTlrTFdWaGMzUkFNVFEzTnpFMU9ERTRPREFlRncweE5qRXdNakl4TnpRek1EaGFGdzB5TVRFd01qRXhOelF6Ck1EaGFNRU14UVRBL0JnTlZCQU1NT0hWekxXVmhjM1F4TFdJdE1qVTJNakU1TkRNMk9UUXRjbVZrWkdsMGJXOWkKYVd4bExYQnliMlF0WldGemRFQXhORGMzTVRVNE1UZzRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUF4RW9lRlZsS2VGVnRyUStVQ3NJY01kbDQzTjlUaGNZcU10YU0zNkxYN3Voajd5OUFOTndpCnlSemdTcnVQK0E2YlZDQmpHa3E5V25pcVYydEw0dFBwQXc0QWozNHp2QmVvWUJDVE5EU2dLKzhHUU51bEtoangKcS9jdlJwMThaWWpnbTcyRTBXQUJHN0RZNUR1dDRxazlEYmIvSTBPQUpVOU9xYkp2OE84d3RPY1UzM0VUd0xnbwpGL09RWEZWYWJzaUMyY1pnVkxGTWlkT09aYmljN2NrcncrRmgzeWFYek1FOG5KK3NQNm00WnJtZ3lmL0MxVnFtCm9EVldZaWYwWU9PUFNJaEVXQ3VDS050RFE4ODdPY21rWmlOZXZqNms1YzRHK3U0R1VubkE0NCtXQWY5eGVubXcKMkErRlhQMkYzMVZqL3dwR3kvUng2bGNTR1RjQlFGNCt2UUlEQVFBQm95TXdJVEFPQmdOVkhROEJBZjhFQkFNQwpBZ1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBV2hzd054OW8wU1phClZCbHlUUm5CR1VyT3M2SkFmM1RQaGplZS9JZi9UWWJuNGdTV2EwbFNGOHo1ajQvMnpLQWVrbmcyNGxGeWZwdngKZDhYVWYvUVRKd0U4RzZrcXcrVmJlZ2Y1WEdiS2ExUmNTN1ZWV250Z3ZlODY5MVk4cnh4SjJudUpkVC83Y2dGUwpIdU1USGZ3OWJVRFg2TkFmZGkrcTlQSFVrMytoZUZ6eW13LythdENLQVZpUVpBNnNEUGhESlk0Vm5jcjdQNGorCmlYK1pWTW5jUjFibUp5NGE0eDhhWFdYcTZaalY5Z2pGL1VpUGlDVHpaRzhuNDhNYzFDd1lRL0k0NTVLeCsvS1IKNmpQODAxNlBLZ1p4TzI5TXNpakdaNU5vRDlpQzlVTWQzeXBXT0lpV0dCSG43V2w0aXBlajdtRUJVT0Rma3lucgpzZWxacTh2M2h3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:01+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-east-1325891c\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: VxapZpZNKAFLBBTKxwwXjFfd-yQeeACylgRYq3yS4GI=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQUw5RkRMYmZhUFV0VU5mVVZ6U1ZKUGN3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxbFlYTjBRREUwTnpjeE5UZ3hPRGd3SGhjTk1UWXhNREl5TVRjME16QTRXaGNOTWpFeE1ESXhNVGMwCk16QTRXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlZ3F0bgowdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFBhU2FnCjVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eXduYmkKd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1N3pmQgprclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3NEVS9hCjVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFtTWxsL2N3MmFDUUN4TDlENTVLMitQRENPNkJaNnAwQnQ2Rkk0S2duQk9yeDQ5YWpJa2lTCjI4ajNjc09MbmdzaDk4a1ZjOFpaRFVmcmd1RHo1ams0ejRvWW9IU3NlYmdlclN2Q2tPTThrR1ZGQURaUWxCd1QKVGhEbjFRNUhoY1JvUXdWU2lNQ2swTDVtMHZjTG5YVklWT2gwNnN0R3NQdkRpSlQybjRCVk85MGZmME9uK3JmWAplUkJaQXR2SGUwZ3QvSUtjaFI5eERITXJvNEEvdTh6TVhKM2kxeGl4aDR6MndOV21Rd1dKbzBDUHBFUGtDQXEzCmxOT3Z4MndsVHEzaWZiRFJsd1MxOEZIMmF1R0xzRjloUW9oR2hDWlhTY0JldEZCMnB5R25WWklTdE5RR0o0S3cKYm5RRjE2TThQNEtFdnlWVVE3aER0dGNCZHdueFZHd0xOZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlCmdxdG4wdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFAKYVNhZzVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eQp3bmJpd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1Cjd6ZkJrclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3MKRFUvYTVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJBb0lCQVFDb3k5YldrUFUzckEvRwpLZzNwQ0YxUkkrWWFPdGJJSDBldC9RZTRNSU83d2JLZzBzTjNWNW5TNk9GdkxSSTNmTkViSklSdE4xNkRCTjNjCjYyU0ZNMGlhUHo5TmQ1SVJNbytyQytkbXM3VVpYTlJkV09xcTRqTDhOelg1V05UOEtMUDJqbXZGMHFGc3RzbjIKY0l6UzdUYzN2dVAxdENMTzFUcTlEdDhTdGZRSFVWN0ZOdVFVdjhmUWFCSDVpRG92NnpSWlM2SUdrVUtTNWsvOQo1KzdjNXpIL0c5amxkZjdPVnhmQTFBVVU4N2F2Z0JHTTlYNzVmTVVpNE5CajdFNFRXZThaNmtmTjl2aWo5R3dHCjVsMFN6djlFemdBa05pWU9UcWNCZElJZ25KSlROVjhmb2pXK2RLYUVXeUtCUkxTRHRIZUNQMk1vSEtyS3FmOW8KWGJoK2IvRkZBb0dCQU9uQk5uYkhnZGU5aXR6allxekhiU3BqVFhraFpRdjlEUTZJRWhrUkZqdHhDZEtpY3krcgo3VjA3ejZLMmZRUkxpUGxZWDh5dTFud1QxYmM4aWo1eWVCV3gzeFhrOHR6Y05wRkdSamVWdkhaTjZKTGlwd3U4Ck5LWVN2RkJMK1JORDRHRmk5R1RTcURQYnRKbVRmTHhpeGFnSnltREVDN3VVN0NBWjA2ME1oYVF2QW9HQkFQN3UKc2ZCQ3F2czZEbWdEaGF0Z2FrUThoWHBNaE1idDdjNHhWKzdxaFJrYXc5RTg4QUs5dXgzQUh0RnJaR2s4U080VAp0Qjk4bmdWcnRGTGZKOStqL29jOWdpT0Q1SmpTS0FGeE1zSzNwcHA4akJRT3k3elExV3lGRmlxTXY4bmRib0M3CmNaVXFWMklLMGxxVHQ3Ni9YUFZSb0JtTktGK2dMUmpmY05tNkFreDdBb0dBRDJNU2pMc1JSdnhKR2NVMkI1MlIKQ0F0RlhFWGdldXVMWW50K2hYdmtkTUU2SGsxbk82b2JrOW1PRDIzbnlOS1lENkhMbkpPZHRza3Zka0piNzBSbAp0emZnTVhiQ3Jkc3BGR01GMkQ3WkN3aVIyS2xteVpUMytqNmRlc09sZjZrbUtnTHpoM2QrYnZ0MVplNlpkV1VqCkVhNmpUYjlaN2wwZE5mZTlRVlRqcnkwQ2dZQkZvUlJndHhUVVFXc2w1YkJndXBqTHdtd0NsMXU4cWNmR0Jad3EKMlVzNUxDSkh5QWtWOXBSZzc5UjdCb1lLYURqVExmYUlreFRtRGlEV2NiVUdWRmgwdjh3SHYwSjBxeEhhTXZ6VwpTaXJyRHhHRGVQY1V2MFZMdXAzdlNUb28vSjN0ODBSMnBYWHdoVndtK1NtNm83SFVIMU5ISjFMYnEzZ2x6d0dYCnRrSmllUUtCZ0Z6MjhGSXVBaEFJeFlVeE1wbnhEeS93WHErTURiSXB4VkRJa0J0Mm5mMFA5K1dtVjZDVE1pMFQKNHlQd3FtWVpYcE9KU05ZdDQ1MlcvQzZ1a3RmNFBKMmtrNm03WVVWZC9pa0M0VWZ2UGZyVUpDVlp2VlZSNDZGRApHbStqWVhmREdmanNFOXRwTFpkTUN1MDNBVTgyeVAwYkN1NlI2OUZiQjNtTTdOQVBXdyt4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.40.126\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-east-default-pool-5adc0ee7"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-prod-east-default-pool-5adc0ee7-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-east-default-pool-5adc0ee7-mbkx", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.187.127", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "WG-gaq7Kt9Q=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-prod-east-default-pool-5adc0ee7-mbkx", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "nww71BRklHE=", "items": ["gke-redditmobile-prod-east-1325891c-node", "goog-gke-node", "redditmobile-prod-tcp-80"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/release-testing-1-1-11bbb/instance/4804269845935613517/,instance/4804269845935613517,project/release-testing-1-1-11bbb,4804269845935613517,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-20T11:53:23.478-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/disks/forseti-security-20180320114325-vm", "type": "PERSISTENT"}], "id": "4804269845935613517", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "z6dldHNmQvU=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=release-testing-1-1-11bbb:us-central1:forseti-security-20180320114325=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch release-1-1-11 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://release-testing-1-1-11bbb-data-114325/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://release-testing-1-1-11bbb-data-114325/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180320114325-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.237.39", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "O4sZaTmM8BI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c/instances/forseti-security-20180320114325-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-114325@release-testing-1-1-11bbb.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/release-testing-1-1-11bbb/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/495685489308290855/,instance/495685489308290855,project/cicd-prod,495685489308290855,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-10T14:16:40.501-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-prod-east-default-pool-5adc0ee7-xep5", "type": "PERSISTENT"}], "id": "495685489308290855", "kind": "compute#instance", "labelFingerprint": "UkEjw7weYjQ=", "labels": {"gke-redditmobile-prod-east-1325891c-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "dK-rpqn48TU=", "items": [{"key": "cluster-name", "value": "redditmobile-prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNekNDQWh1Z0F3SUJBZ0lRSXV5VUZ6bXFwTVZpai9lWGw1VGZYVEFOQmdrcWhraUc5dzBCQVFzRkFEQkQKTVVFd1B3WURWUVFERERoMWN5MWxZWE4wTVMxaUxUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxdwpjbTlrTFdWaGMzUkFNVFEzTnpFMU9ERTRPREFlRncweE5qRXdNakl4TnpRek1EaGFGdzB5TVRFd01qRXhOelF6Ck1EaGFNRU14UVRBL0JnTlZCQU1NT0hWekxXVmhjM1F4TFdJdE1qVTJNakU1TkRNMk9UUXRjbVZrWkdsMGJXOWkKYVd4bExYQnliMlF0WldGemRFQXhORGMzTVRVNE1UZzRNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QQpNSUlCQ2dLQ0FRRUF4RW9lRlZsS2VGVnRyUStVQ3NJY01kbDQzTjlUaGNZcU10YU0zNkxYN3Voajd5OUFOTndpCnlSemdTcnVQK0E2YlZDQmpHa3E5V25pcVYydEw0dFBwQXc0QWozNHp2QmVvWUJDVE5EU2dLKzhHUU51bEtoangKcS9jdlJwMThaWWpnbTcyRTBXQUJHN0RZNUR1dDRxazlEYmIvSTBPQUpVOU9xYkp2OE84d3RPY1UzM0VUd0xnbwpGL09RWEZWYWJzaUMyY1pnVkxGTWlkT09aYmljN2NrcncrRmgzeWFYek1FOG5KK3NQNm00WnJtZ3lmL0MxVnFtCm9EVldZaWYwWU9PUFNJaEVXQ3VDS050RFE4ODdPY21rWmlOZXZqNms1YzRHK3U0R1VubkE0NCtXQWY5eGVubXcKMkErRlhQMkYzMVZqL3dwR3kvUng2bGNTR1RjQlFGNCt2UUlEQVFBQm95TXdJVEFPQmdOVkhROEJBZjhFQkFNQwpBZ1F3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBV2hzd054OW8wU1phClZCbHlUUm5CR1VyT3M2SkFmM1RQaGplZS9JZi9UWWJuNGdTV2EwbFNGOHo1ajQvMnpLQWVrbmcyNGxGeWZwdngKZDhYVWYvUVRKd0U4RzZrcXcrVmJlZ2Y1WEdiS2ExUmNTN1ZWV250Z3ZlODY5MVk4cnh4SjJudUpkVC83Y2dGUwpIdU1USGZ3OWJVRFg2TkFmZGkrcTlQSFVrMytoZUZ6eW13LythdENLQVZpUVpBNnNEUGhESlk0Vm5jcjdQNGorCmlYK1pWTW5jUjFibUp5NGE0eDhhWFdYcTZaalY5Z2pGL1VpUGlDVHpaRzhuNDhNYzFDd1lRL0k0NTVLeCsvS1IKNmpQODAxNlBLZ1p4TzI5TXNpakdaNU5vRDlpQzlVTWQzeXBXT0lpV0dCSG43V2w0aXBlajdtRUJVT0Rma3lucgpzZWxacTh2M2h3PT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:01+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-east-1325891c\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: VxapZpZNKAFLBBTKxwwXjFfd-yQeeACylgRYq3yS4GI=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQUw5RkRMYmZhUFV0VU5mVVZ6U1ZKUGN3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxbFlYTjBRREUwTnpjeE5UZ3hPRGd3SGhjTk1UWXhNREl5TVRjME16QTRXaGNOTWpFeE1ESXhNVGMwCk16QTRXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlZ3F0bgowdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFBhU2FnCjVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eXduYmkKd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1N3pmQgprclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3NEVS9hCjVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFtTWxsL2N3MmFDUUN4TDlENTVLMitQRENPNkJaNnAwQnQ2Rkk0S2duQk9yeDQ5YWpJa2lTCjI4ajNjc09MbmdzaDk4a1ZjOFpaRFVmcmd1RHo1ams0ejRvWW9IU3NlYmdlclN2Q2tPTThrR1ZGQURaUWxCd1QKVGhEbjFRNUhoY1JvUXdWU2lNQ2swTDVtMHZjTG5YVklWT2gwNnN0R3NQdkRpSlQybjRCVk85MGZmME9uK3JmWAplUkJaQXR2SGUwZ3QvSUtjaFI5eERITXJvNEEvdTh6TVhKM2kxeGl4aDR6MndOV21Rd1dKbzBDUHBFUGtDQXEzCmxOT3Z4MndsVHEzaWZiRFJsd1MxOEZIMmF1R0xzRjloUW9oR2hDWlhTY0JldEZCMnB5R25WWklTdE5RR0o0S3cKYm5RRjE2TThQNEtFdnlWVVE3aER0dGNCZHdueFZHd0xOZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNk1lb0pIVUxiYzZ2aHQ2NXliNjJqQ1AxYVAxY1NaNERDTVNzUWNraEJINjJRRkRlCmdxdG4wdVRwUzI5Y0FWb3ZTU0tzUlVDZjhDakZ4YkJGZU9LMTVyRVRHYXhSWTQ3YjQ4VkExWTFWaUhSTkN6MFAKYVNhZzVhb242Mi95UEl2emtDano1YU9MNjVpQUd6VFl1TGRBVENOM0xVUXZMdkpkRUtZUkprZDZGdU03TUt4eQp3bmJpd0cvRDhaUi9ETEdmaDJxQnRyVW00a0lMTFNmdGZxZEJtTVRFbXRnc2xKK0xTaXRJR1piT21sNzRXUTA1Cjd6ZkJrclNXSGVXNVEreFM2SEFyMmlSeVYwT2ZYZVdBV3ZrWWVMQ2M3MzAydklCZXNFRWZzNUtiSGtkeUlEY3MKRFUvYTVxQ3MzWlFWL2VSc3FlYnBReXQ0ZWpYN3dRSUpIMUhXbFFJREFRQUJBb0lCQVFDb3k5YldrUFUzckEvRwpLZzNwQ0YxUkkrWWFPdGJJSDBldC9RZTRNSU83d2JLZzBzTjNWNW5TNk9GdkxSSTNmTkViSklSdE4xNkRCTjNjCjYyU0ZNMGlhUHo5TmQ1SVJNbytyQytkbXM3VVpYTlJkV09xcTRqTDhOelg1V05UOEtMUDJqbXZGMHFGc3RzbjIKY0l6UzdUYzN2dVAxdENMTzFUcTlEdDhTdGZRSFVWN0ZOdVFVdjhmUWFCSDVpRG92NnpSWlM2SUdrVUtTNWsvOQo1KzdjNXpIL0c5amxkZjdPVnhmQTFBVVU4N2F2Z0JHTTlYNzVmTVVpNE5CajdFNFRXZThaNmtmTjl2aWo5R3dHCjVsMFN6djlFemdBa05pWU9UcWNCZElJZ25KSlROVjhmb2pXK2RLYUVXeUtCUkxTRHRIZUNQMk1vSEtyS3FmOW8KWGJoK2IvRkZBb0dCQU9uQk5uYkhnZGU5aXR6allxekhiU3BqVFhraFpRdjlEUTZJRWhrUkZqdHhDZEtpY3krcgo3VjA3ejZLMmZRUkxpUGxZWDh5dTFud1QxYmM4aWo1eWVCV3gzeFhrOHR6Y05wRkdSamVWdkhaTjZKTGlwd3U4Ck5LWVN2RkJMK1JORDRHRmk5R1RTcURQYnRKbVRmTHhpeGFnSnltREVDN3VVN0NBWjA2ME1oYVF2QW9HQkFQN3UKc2ZCQ3F2czZEbWdEaGF0Z2FrUThoWHBNaE1idDdjNHhWKzdxaFJrYXc5RTg4QUs5dXgzQUh0RnJaR2s4U080VAp0Qjk4bmdWcnRGTGZKOStqL29jOWdpT0Q1SmpTS0FGeE1zSzNwcHA4akJRT3k3elExV3lGRmlxTXY4bmRib0M3CmNaVXFWMklLMGxxVHQ3Ni9YUFZSb0JtTktGK2dMUmpmY05tNkFreDdBb0dBRDJNU2pMc1JSdnhKR2NVMkI1MlIKQ0F0RlhFWGdldXVMWW50K2hYdmtkTUU2SGsxbk82b2JrOW1PRDIzbnlOS1lENkhMbkpPZHRza3Zka0piNzBSbAp0emZnTVhiQ3Jkc3BGR01GMkQ3WkN3aVIyS2xteVpUMytqNmRlc09sZjZrbUtnTHpoM2QrYnZ0MVplNlpkV1VqCkVhNmpUYjlaN2wwZE5mZTlRVlRqcnkwQ2dZQkZvUlJndHhUVVFXc2w1YkJndXBqTHdtd0NsMXU4cWNmR0Jad3EKMlVzNUxDSkh5QWtWOXBSZzc5UjdCb1lLYURqVExmYUlreFRtRGlEV2NiVUdWRmgwdjh3SHYwSjBxeEhhTXZ6VwpTaXJyRHhHRGVQY1V2MFZMdXAzdlNUb28vSjN0ODBSMnBYWHdoVndtK1NtNm83SFVIMU5ISjFMYnEzZ2x6d0dYCnRrSmllUUtCZ0Z6MjhGSXVBaEFJeFlVeE1wbnhEeS93WHErTURiSXB4VkRJa0J0Mm5mMFA5K1dtVjZDVE1pMFQKNHlQd3FtWVpYcE9KU05ZdDQ1MlcvQzZ1a3RmNFBKMmtrNm03WVVWZC9pa0M0VWZ2UGZyVUpDVlp2VlZSNDZGRApHbStqWVhmREdmanNFOXRwTFpkTUN1MDNBVTgyeVAwYkN1NlI2OUZiQjNtTTdOQVBXdyt4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.40.126\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-east-default-pool-5adc0ee7"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-prod-east-default-pool-5adc0ee7-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-east-default-pool-5adc0ee7-xep5", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.209.164", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "76XzyJuoHIc=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-prod-east-default-pool-5adc0ee7-xep5", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "UkEjw7weYjQ=", "items": ["gke-redditmobile-prod-east-1325891c-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/pso-cicd8/instance/5097619844619196176/,instance/5097619844619196176,project/pso-cicd8,5097619844619196176,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-18T21:58:23.353-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-canary-west-default-pool-496ebc1d-pn6y", "type": "PERSISTENT"}], "id": "5097619844619196176", "kind": "compute#instance", "labelFingerprint": "cireh9PCZXs=", "labels": {"gke-canary-west-69bb2963-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "taq0rcmX5S8=", "items": [{"key": "cluster-name", "value": "canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQUtjYjdIK2h3VlBvRUJGalJsZVFZQm93RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE1sb1hEVEl4TVRFeE9EQTFOVGd4TWxvd09ERTJNRFFHCkExVUVBd3d0ZFhNdGQyVnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdGQyVnpkRUF4TkRjNU5UTTEKTURreU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdHJ6N1daQ1cyQk42QmFjTQo0NXV6bGJOOWc5T0o1d3FKSWZKeDVoZ1RPQ3FCWW9tdmJVTWdGQ1JXUXFMcUlobXRyMzIzSktFdHBaTjc1dk9aCkVQMzZ4VzZ5NzFGam9GM1BsMThMcmtzNEEza1F5ejU1VkVYbnFPWm9ET0NHVS8wTEI0Ulh6ZEhaZU05VzdJWlAKM3lLeGVKcHNkMXBWRGgyNjhXdGhiS3dUMWRYenFBTWtjVHVrTW1EQmtsL3VoY3g0VHpxVjlRcWhKM1JTaUpMaApEY3lpem4vYkpYU0swNmpaYUtoL21zV2pSQ1FkMFplbkVKWWFyOVRJQ3Vkbms4eXo0YUZxWHAwOVkyb1c3SGlDCmQ3cmlPMTR0RnVLUllCNUU2WEtucHVVZzdadVVuVmtESFdSS0tONEp5aXU5N0tEZmJuZ2M1cGk5SzM0bFNJN1kKNGxaWFB3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFOMnlpZmIxM0VpMisydFRoWEkvWWtPelBERE5DeCtEVVNLWUxpVTRGCnVuUE5ZMVEvMCtwWUxPQW1DNysrekxmS1U3a2xuT2VCWUxiUHlmdW8wQzl3QjI4SFVQWVZkb2hKY241bExVU0MKYVFaRm9qTTgrYzAzN2ZuNVlCTFoyelBJSWhmKy9vaVhkbis2TDR0aHR1YUVVdmtBZm54Nkx2MUt1Ryt2dWJIcQpQZjJoZ1Vob3VrRnFWN3M5OVcvN1ZjT0djRWYybkxQdisvSTNqWjlJSkFrUm8vaFFtUHlWeHgzVUQ4LzlTUlV6CmhYc21NdTRPQUxVMnJ0aVRLejlhaDV3TEN4Q0dNTEhRRFFkbWRJUC94MG51ZmkrOU4rc0R6M1hSYSt6c3F2VGIKQmVVN21sajJleE9RZnAvM2dKbGVPRk5mT3BsNW1FT1FKK2hBbzZmdWs4TVBFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.44.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.47.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:02+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-west-69bb2963\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: qj61a229MxXzLhQ5LDHaDFU_rc8q7AcI41OGzPI1MyE=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZLZ0F3SUJBZ0lSQUxZb1dwWmord3VLdS9VVFV6WnM0b0F3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE0xb1hEVEl4TVRFeE9EQTFOVGd4TTFvd0VqRVFNQTRHCkExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPQzYKUktnZU5YeGZJYzQ1MjZUMjBzWWF6YkdwNU9JM0FIWjFyTlZsQnQ3YUE3OFFmQ1JOTzdBVGtkb25BMDRHZjlMdgpZb2RsamhxMVBTcVN3WWFyV1lrNHdOL205R1kxQ0RpS1NSQkQ0cERhcWJTK0VsK09JYlVudmo4c1gxMHh0ODFQCkZ1SWtOdW5iNGtpb2tJTXZSTU9IS3VKMktOa0VyVW5tb3EzREZoa3BPT09ET3VUQTVzNW9OQlp0bjhFa0JWU3kKRE5BV1A0SWs4WEladSt1RDRyekNodUhLVlNLV3dwdW5ERFNZMkZ5b3BXQXhCQkJERVZ4YkJpbWlidFVURG00VgppVGdKVXMvbnUyK0trYXN4a0haTUV4N1RxZVJ5ekRieFBkU1lkbXRkS0hjSG5JRFd4WWhWR3dkYkRzanZMcjJSClQ5cm9CSDRNdmErKzZaTlhPNDBDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUE5dgpDT0d2V0IxMWZPMmc5aTFLK0srMHh2SWNtUUlRTFY5NUZZd2dVcDJNOGdSZTEvWGdqVE1CbkNpNFFRU216M3ZsCmd3Y1RseUJLY0Vxc3ZoZFZ2S1VWVmJ4YUtsRlV0ZXJFUTlDc1JwMjlZbjJtQk9NUFBpRGFVd3cyUU9GUkwvYTEKNEVES2JwREFWbGt3UFVqaXd4Z3ZmWFV6SVVZb254RE0raGw1ZkxhdURTNnhETXhIbVgvZ3dOSlYwVWJqMFVYZApwVXJqR0hxN2V2Q2lCTTRaM3hFWjNjQ0hmb0Z6WVNWS0RiWVBMQ2tVQ2hvdmhQMU55SVRBL2FuYUgxQzk5K0ZLCnpKaW5DNXo2UVZSUUJLUlcweCtHV0F3UUNkSWEzVEdMU2RJYVN1YzZXT1E1UzFFdTlGdjFDQ2kvME5oM3JHOWgKWFlVNTN0bnJRQWppM3RQUkQ0cz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNExwRXFCNDFmRjhoempuYnBQYlN4aHJOc2FuazRqY0FkbldzMVdVRzN0b0R2eEI4CkpFMDdzQk9SMmljRFRnWi8wdTlpaDJXT0dyVTlLcExCaHF0WmlUakEzK2IwWmpVSU9JcEpFRVBpa05xcHRMNFMKWDQ0aHRTZStQeXhmWFRHM3pVOFc0aVEyNmR2aVNLaVFneTlFdzRjcTRuWW8yUVN0U2VhaXJjTVdHU2s0NDRNNgo1TURtem1nMEZtMmZ3U1FGVkxJTTBCWS9naVR4Y2htNzY0UGl2TUtHNGNwVklwYkNtNmNNTkpqWVhLaWxZREVFCkVFTVJYRnNHS2FKdTFSTU9iaFdKT0FsU3orZTdiNHFScXpHUWRrd1RIdE9wNUhMTU52RTkxSmgyYTEwb2R3ZWMKZ05iRmlGVWJCMXNPeU84dXZaRlAydWdFZmd5OXI3N3BrMWM3alFJREFRQUJBb0lCQVFDRzJKNXI5cnlIWlpvbQpZZWRmWkUveldaQUZ4SGs0R0dMcHNoREVkM3VZNjE4R0hnRXYwencybW5lUlhJbUtIekpDUXl4dkxFd0owS2prClMrMWVQcUZhU3JqSllZOVRhUTBHeUV1eE85ck9xcmJjWXBVcHkyS0VqbFdGR0w0Y2NNSG1xMGVDNk5JZW43ZDMKZTlaRE1YRGtsczN2MTVFSkw5by9sdW9VdEJRbGdjdWtiZkRnRjhQQUhsV1JWT1BzTmdnT0puNEl1cDdaWnJOMgp5WlVJaEJ3UU9iZk5uQXpOanI4SFVtYzBUSlBWTjd2cDdpWmFvcm91d2U1UkFabDlLNWNvQk8vaDBEMkl4Z3hyCjNZMEVSWnhrUXdqR2lHaUdTcnQ4ZkJtajFmQ3hQMkVxQWV6UUlibGg5SzNyNWFhMHZwMWpvMDZMY3h0NzY0TlAKQVFUZ003aGhBb0dCQU9WOWJDYllFcGk4ZjN0RDI3YklndVRIOFlpdTFiMGNWZThnbEFzQnNia2NwNS80QUNxVgprcXZLNDY0eHNuclYwMlBFdnZ6UkhCOGU4VTNHTlQvT3ZYblFuODhJRnFtSUVVNzkwN2JvVXcwSlRleElsT2FECmRtN0RadG5PbGwyQUNIeUxUL25OQ1ZNNUhOZzF4TXJUYlNHL201eVFJNG1MalAzY2s0cFVrbWFaQW9HQkFQcXcKQXlMN29KMmlWN2VPSjZrN2liajFFMHRTenFlZTh0UEFFb0FZWjQ5YVMzcDArbFIydmdBT2ZKMWQvbUVid3dQSwp0T0JMQ2VHRStaMFVlQkpLcis5bmJ4blU2YzQ2L3hIaTNMckpOS2tVWHhIMmJiNlRsM3U0Z2poVWFtVVFWUkRrCmdQcmd3WTVoekdtK2JtYldFNHVNWjJNalIrOGw0WjN4dVh1aUd2a1ZBb0dCQU1RR09sZUR3WDdOcEdiNk03Y1IKMXh6czNSZlBuNnNGaFRIWk5odWd1dHBQNjY3cys5ZGtKQUN5TVlFZDJrS3FXd0toa0RJTHZHV28zSjErYlFXdgo1cEVpN3g2ODNmNjV4MjhkeWJZM0JKbmlGTGw3MWhTQXZxMG1JN2h3aW1nYmNTUlJLMk5KREdvV0l0bGNORmk3CitFQVhseWhJeHRJNmJaaDZ6VndmbVY0aEFvR0JBTENNZ3prQTg2WHdya3dVYm5RdC9SbG9aL1UxVlZzUmd6eUQKMmNPaTdGUTJLRkFPMERucUFuZXh2Q3RzQmZuSC9uak9Lc0tIdG1iQUtyZG9zZ05YM0Q0RG4yZ1czYTZqTi80Vgp3cFE5bmJ1eUlCNWJhZ0M4bXdQRDl0bkxBYjg1V0Y5MFBpM3hXZjkzZXVuQjlxaXYvY1hhMVBrcDRNQlk4bU0wCjJRZHNMQWpkQW9HQWRXcXcweHNrbnh1Vk9yajhjSTJSclNWcnc5c3VieUYvQXpoR3g2UEFnd2taakc0MGVNVTcKZlZCL203bXIrOHREYmF6V0Jxa3hwUWxBUkk4Q3VGeVduSjJ0cUZaVlE0a1B3bzRkem1aRW8xSE51MzN3czM0Zgp0YUJhalFiMWh0czVlZTYxcXIwYWNVd2I5RDE2VUJmM0VNc2Y0ZndwRG1tSHRsa1lHdjNIYTRrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.229.72\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.47.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-west-default-pool-496ebc1d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-canary-west-default-pool-496ebc1d-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-west-default-pool-496ebc1d-pn6y", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.14.192", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "SesFA7suwNI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.7", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-canary-west-default-pool-496ebc1d-pn6y", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cireh9PCZXs=", "items": ["gke-canary-west-69bb2963-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/clouddevdemo-197919/instance/5178964764227131816/,instance/5178964764227131816,project/clouddevdemo-197919,5178964764227131816,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-13T17:05:28.386-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/disks/forseti-client-vm-5008", "type": "PERSISTENT"}], "id": "5178964764227131816", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "MFlay3q5AW4=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-5008/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-5008/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-5008", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.35.128", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "u4yFHIxpx9Y=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c/instances/forseti-client-vm-5008", "serviceAccounts": [{"email": "forseti-client-gcp-5008@clouddevdemo-197919.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/clouddevdemo-197919/zones/us-central1-c"}"
organization/660570133860/project/henry-rc3/instance/528953038930695353/,instance/528953038930695353,project/henry-rc3,528953038930695353,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-17T22:53:27.670-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/disks/forseti-server-vm-4330", "type": "PERSISTENT"}], "id": "528953038930695353", "kind": "compute#instance", "labelFingerprint": "GpBbugSWnNE=", "labels": {"goog-dm": "forseti-server-4330"}, "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "rimpm_pj1rM=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get update && sudo apt-get --assume-yes install google-cloud-sdk\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc3 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat install/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Setup Forseti logging\ntouch /var/log/forseti.log\nchown ubuntu:root /var/log/forseti.log\ncp $USER_HOME/forseti-security/configs/logging/fluentd/forseti.conf /etc/google-fluentd/config.d/forseti.conf\ncp $USER_HOME/forseti-security/configs/logging/logrotate/forseti /etc/logrotate.d/forseti\nchmod 644 /etc/logrotate.d/forseti\nservice google-fluentd restart\nlogrotate /etc/logrotate.conf\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/install/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"henry-rc3:us-central1:forseti-server-db-4330\"\nexport FORSETI_DB_NAME=\"forseti_security\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-4330/configs/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-4330/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./install/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-4330\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n\n# Use flock to prevent rerun of the same cron job when the previous job is still running.\n# If the lock file does not exist under the tmp directory, it will create the file and put a lock on top of the file.\n# When the previous cron job is not finished and the new one is trying to run, it will attempt to acquire the lock\n# to the lock file and fail because the file is already locked by the previous process.\n# The -n flag in flock will fail the process right away when the process is not able to acquire the lock so we won't\n# queue up the jobs.\n# If the cron job failed the acquire lock on the process, it will log a warning message to syslog.\n\n(echo \"57 */2 * * * (/usr/bin/flock -n /tmp/forseti_cron_runner.lock $FORSETI_HOME/install/gcp/scripts/run_forseti.sh || echo '[forseti-security] Warning: New Forseti cron job will not be started, because previous Forseti job is still running.') 2>&1 | logger\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-4330", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.14.228", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "aXUEKX4rKNg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc3/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc3/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/instances/forseti-server-vm-4330", "serviceAccounts": [{"email": "forseti-server-gcp-4330@henry-rc3.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/5301082250841612976/,instance/5301082250841612976,project/cicd-prod,5301082250841612976,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-12T10:15:59.869-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-canary--default-pool-275d4b28-3x0q", "type": "PERSISTENT"}], "id": "5301082250841612976", "kind": "compute#instance", "labelFingerprint": "3e1MlB0crYY=", "labels": {"gke-redditmobile-canary-east-d3566425-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "0SbGHL4pwAY=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPRENDQWlDZ0F3SUJBZ0lSQUtKTUZjcU1hZ0t4UmZaUUt5OGM5bGt3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxXVmhjM1JBTVRRM09EazNORFUxTWpBZUZ3MHhOakV4TVRJeE9ERTFOVEphRncweU1URXhNVEV4Ck9ERTFOVEphTUVVeFF6QkJCZ05WQkFNTU9uVnpMV1ZoYzNReExXSXRNalUyTWpFNU5ETTJPVFF0Y21Wa1pHbDAKYlc5aWFXeGxMV05oYm1GeWVTMWxZWE4wUURFME56ZzVOelExTlRJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQQpBNElCRHdBd2dnRUtBb0lCQVFERnczeU9JY2J6ZGVaK2Q0SnJnNjhNdVYvUWtpZ2Y4WDMvVmdLbVFVYWg1bHhBCklQckJ5VTgwNlRkYUhIVjlhQUJ5WjNMNlNQdnZyQTlIV1hMZkRUQVJBOTV6dW42cG9qb0ZUaHBXdzhteXZMWWQKK3krYXhMSW9CN2xxeHFzMmFYZFJIYzUySlhCbXN2NjJITUQvbGF4TitQUlZSNERSTElWUTJjTVNvRk9VQjFaSQpJZWQzbGJEN1JQSkYwdGFscGxVNi9rNzdsc2Y0NFBOKzhldnAwQ3RhRkhZQUM4TkVWSUoyekQvYmQyYS9rTkVVCmNRbFRyVkpOSkp0ZVpYK2FOUzRoclg3RFY3K0hMQzFQVlo0OUdNc0hyOU5WRXRLeEFkV3g4czgyZDFjR1VHYzkKclMvTDlBSXlUUTVIenAzTXRRdlRmMjFBUW13cGJpYVNPMk1pZWEzTEFnTUJBQUdqSXpBaE1BNEdBMVVkRHdFQgovd1FFQXdJQ0JEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVlNQjJvCmdXTUZFR3J2b1ZLdEZ3bHFIb1RHbzJuTllDajd5ZSsrMjlnWUdWMHpMSS83L291aGVwR0I3djFBUjFZbG9BMDIKNmc1c0x0cE9Sc1dMY1g2SDArcG5DaG5WbUZWZk8yZ2FOOXVRcFpvR1doL1N1aUdoTjd1SGFZb1JhSk5oaVJ5QgpUdFZhRGM5SmsvdGpwRmVwV0tpMkNMTXdwVnRQTWtiZXpiNnM0Q2t6bWNMS1MvWGFzS3hqU082UFJ2cmFPdWovClBWckZMcjc4VVlta2Z4K3VOVVJjd0YwS0Q4RHNLYWh5WWd5YkpkUHV4Z1l3YUxPa1BPK2UyeUU0U2UralB1NkQKcGNZYkpmUkdaaGxpMkRWT3dhS0kvdkgzVWVGQlJMajhtUEtLNUlDdG03WkpXYlAvSCs3Nk1Kd1Bldy83T1lTdwovSGhPdjZOMEVIbHV2UUxWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.116.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.119.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T18:15:39+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-east-d3566425\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: jUKkii-e88ZVqeluYnbNapLpq-BSS-Q5JNhFEZCUXb4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lSQUpkdDlhbDFyNFd1MmpDV3dJRnVUQlV3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxXVmhjM1JBTVRRM09EazNORFUxTWpBZUZ3MHhOakV4TVRJeE9ERTFOVEphRncweU1URXhNVEV4Ck9ERTFOVEphTUJJeEVEQU9CZ05WQkFNVEIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDeThpK2hYZHZjdTRHaGN1WnZDcjNsc3VoZTA2b0VTaDBSS01waVFFWGcvaDNRNGZqZgpCbFBxLzZtZWRZSGcvVG5OQ0NxL1NwRVlxck9SMTlIOWR2ZE5xQ2xJRnNRTEhWSHVvM0h2bFYvMHdHVURyelZvCkRSOUZuVjFEQ0doMThBS0pyemhNc2ppcHJyR3FCTVhHVkh2aldvTnhiL0lmYUxPK2pCTnA1T2FBZE9oeCtRR0cKVmdPRGhEL29ZdzlpaGloZDNLSWZjUDBNWTJTbXQ4bEFlOHlmWm5JN3BseHhuWTFaSTdUTkNibElIN016WTZHagp3OG1nc2dBMUlNSk8rSVQ3d3NYMTNZQWhpRDhnMW1tU21Qcjg0ak9LQkphd3kvcFR5NGt2SHZZWXpGVGE4U2tNCjBjMFFpUGRDYlAvU2ZtdXpkWXZqTEtVUWhLSFJHeEVUZzFVREFnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUUKQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNyZ2ZHbXphdVBNVEc2b2xQbjcwYllyVFYvYnM5Yi9ST0t1eU9DMjQ2SHIyUHVrcldLCnZyTGRqK0NranE5bHk0SW5YM1BPY3BBVkFKSU1SZklaa21vajdLSUthZnpvcCs0RGpaUnZLUUZVdDI5RFYvY0QKdEFlTkZyYmY4Q3VtOVVQMDA2QksyaUdXWnNQNk9pdXNlQ2lXSUo1YkZjeXp0NFIybW9qR0dxU2RTOG5PYnM4TQpmQ05jQWptY3FlWTRqUFhRVUp3K0pMSmlpZ04wSnRtQ1hSVWVHQUdBZ3BhY3lpTXVkWHI3NlovSTdOaU1FQkhUCnJoenVGSFpEdGFoRFJ1M3Njck00WHJiYm1yVzJ0VUFXZU1xc3d6YStrYlZvcTlNUW9FSWhwWWdxY1NnYTdOZkEKNmwzU2poOEZoRDhTcHhkME5hUjM4Q2cvMnJzWnFQWmkxTzU1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3ZJdm9WM2IzTHVCb1hMbWJ3cTk1YkxvWHRPcUJFb2RFU2pLWWtCRjRQNGQwT0g0CjN3WlQ2ditwbm5XQjRQMDV6UWdxdjBxUkdLcXprZGZSL1hiM1RhZ3BTQmJFQ3gxUjdxTng3NVZmOU1CbEE2ODEKYUEwZlJaMWRRd2hvZGZBQ2lhODRUTEk0cWE2eHFnVEZ4bFI3NDFxRGNXL3lIMml6dm93VGFlVG1nSFRvY2ZrQgpobFlEZzRRLzZHTVBZb1lvWGR5aUgzRDlER05rcHJmSlFIdk1uMlp5TzZaY2NaMk5XU08welFtNVNCK3pNMk9oCm84UEpvTElBTlNEQ1R2aUUrOExGOWQyQUlZZy9JTlpwa3BqNi9PSXppZ1NXc012NlU4dUpMeDcyR014VTJ2RXAKRE5ITkVJajNRbXovMG41cnMzV0w0eXlsRUlTaDBSc1JFNE5WQXdJREFRQUJBb0lCQUVLZGIrZkZkZ3lVN092NgpSeGc5U25ZUkJQb1FGN0dqR1hFQzIxeDZDc2w0TUFkTHFBYjJaeFVMZWN4WWVESVdjb2NHTEV1cjZabmlLaGozCjI5OWNnekd3a1RXWjYvOHJPZzM1WUhmTkJyeXBSckY1YndzK0gwOGVCdExtZFdTNkpXZTJCK0pkVWtTd21NanYKSCtUMkhHeUZqSHNWTG5CTTNPVHBabXk4WHFhZ3ZzYTRKaEtTYXUvd2lvSFd4eTl2SWJhMzEvNWMyRG5qeDMvRgpocUdLOHRSK0FZU3ZlNnMyVDgybzFUVXliekczdnBQd0xLU2diYVdHNi9OZ3NhVHVqdjlrTFNnQldvMEN3SHBtCm5aT2lBTXVmZkZsbWZTV21CeEVPenQreGdTYmFkeG9KeGg1T1BMYXlOaFpUa2tZcWVnWlhKbTBHMkxhVWdmUDAKVXVSbTE3a0NnWUVBNm5jOWZHd3h5Rko1bkJkZldjL0tTa3NIQ2lveU5tL01wclBITjR0L1AxVDlGRGZhdTdWZwp3SXNjK1Z4cUdqRTRwZGxLTVhKV1FhekRKZGlWSFRUWXVVS0gxTk45czliditRWTl2VmsxZVdNRFNNSzBMWS9kClVZZDhuakU1TFVqZWh1VGpCbVdLeFBWM0RMWUF4TW9aUEFkRUtGd0xnVm1lSGIvUEMrTTdjZWNDZ1lFQXcyR1EKeTFNbjVnRkFRVUxuVGVEUjlESFFpZmZ4a212OEdlZVlyMjdscHU1ZzNpT0VHbTFKcExZQzdMRzNSMzNVZHoyMwoyS3pGL3RjUGdLSEZxK2ZPeE5TQ3JXNVJYK28yYTYyVktHV1hDempPaEVYU0RyMWNpUmo0M1dNeHBxOVhaYUl2CmF2WGpVM3B6OTBnUVdNWGgxT2pIT054dmVTSmVUMWh0UGpZQW1JVUNnWUVBNktNN1RMTUZpaC9iTGZjNjBxQUwKdFQ5UVV0T2ZVc2dISlBpSUdDSy9OUldjcm16bENRNWtXMmNzYm5jMWg1dUMrM3ZuMDd3QXZkVXZJK1FMd0JqcApXSmdjc2h6T1FweG5Lb3o0d1dFOFg1N1FhV2RXNDBZMWNHbWdTazNJejVmWHc3eGpUYnQrdndKWEJ6T20rNXNUCkFxNnEvK2lrT2Ntenl3eS80S21zRjgwQ2dZQlBTZlRjenE1T1pRdVNjSGcxM3ByVm9yR2lqQUI1RDJHTGtiVWcKM0x4TjlrZFJYdEJwZVJoOXcyK0Vac3FlTks1WWhhOXFPeE5PekMvNlg2dzhpeUlhTnJPaGRqZUgyU0NrcWhqeAovK2hBSVptTmpGZ21xeW8yYU8vMXlCK0tLWFlxUkp0QnFPL01ITkdhOUovTnB1Qnk2dFNPZXNheVBnUlA1dTdPClpGUHhrUUtCZ0YzZ3RCYjdtR3FYSVIrZlJkYVFBTGVXQkxFWmprZFpNWnZwVndBOWlaN1JSd2NnM3J6YVpNMHIKOGZOZm9mZDgyc2VYYStxOXdsTFdsKy8zVkFIOGxvQ3R1OUx2UllMVGlFNjl1L01vcnYrM0I2V08wSVVtNHpwTgpFckg4dWpnVWg4cGZMM3h3aTZKUjN6VGRwRGxZWkhkcFhyY1J0NUtNWkJacjY4WGhsTi9QCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.47.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.119.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-275d4b28"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-canary--default-pool-275d4b28-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-275d4b28-3x0q", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.140.27", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "kBUoAqgi9K4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.9", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-canary--default-pool-275d4b28-3x0q", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "3e1MlB0crYY=", "items": ["gke-redditmobile-canary-east-d3566425-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/iap-1-174217/instance/5370625360591465042/,instance/5370625360591465042,project/iap-1-174217,5370625360591465042,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-07-19T10:19:57.613-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "i-defaultnet", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/disks/i-defaultnet", "type": "PERSISTENT"}], "id": "5370625360591465042", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/machineTypes/f1-micro", "metadata": {"fingerprint": "hJ37NzJU6z0=", "kind": "compute#metadata"}, "name": "i-defaultnet", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.200.12", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "z7_2yFsPnug=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/instances/i-defaultnet", "serviceAccounts": [{"email": "941750202210-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c"}"
organization/660570133860/project/cicd-staging/instance/5402946905030662656/,instance/5402946905030662656,project/cicd-staging,5402946905030662656,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-10-22T10:42:07.444-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/disks/gke-redditmobile-staging-default-pool-cb6fb0ef-o60e", "type": "PERSISTENT"}], "id": "5402946905030662656", "kind": "compute#instance", "labelFingerprint": "PmdZM3nQwE0=", "labels": {"gke-redditmobile-staging-27f4251f-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "USR_oPvUSa8=", "items": [{"key": "cluster-name", "value": "redditmobile-staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQVBCOVFGaGI3ODBoT01kdGI4Mm05all3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UaGFGdzB5TVRFd01qRXhOelF4Ck5UaGFNRUl4UURBK0JnTlZCQU1NTjNWekxYZGxjM1F4TFdFdE5UVTJPRGt3TVRjMk9UQXlMWEpsWkdScGRHMXYKWW1sc1pTMXpkR0ZuYVc1blFERTBOemN4TlRneE1UZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdwpnZ0VLQW9JQkFRREJiYUprcmszeXNvVUZIbGViY3ZKTjhvY0x1Z2xQL3ExbVlxVzYwanJpRWtKTktROW15VVN1CjlacmZhN0JSNXVmS0NrWExhcDJmV0ZpZG1WeXZVMWFZbEFhaGhiL0oxUVNXZFdIMVYxeFIyMjJML2xtenRWQkYKWHJ1cTlaRzdiWjBYWm5UbExGcUNoUGx4UmFYNE1ERDR5MUZRUWhmUEgxS04wU242T1prNS84ZDJYaVd3YmFOagpucjlkL1ZHQlNOc2tBWVN2aHM1d2JTNHFWWitWVmtxY1Y5djIvREtDY3hiY2dYekxueWRkMStNZFdYenpLWGdXClh5STZmay8wZlQ4V2ZzbW9yZTFrSU5peWNSa1ArdVFPYUFYNWpiQ2NZVTdndUJxSC9ONnY1NXRXUFRlNGQ2VCsKNTZVajVRUVB1ank5VWRWYjc5bHFFZnNkZytrY280VEpBZ01CQUFHakl6QWhNQTRHQTFVZER3RUIvd1FFQXdJQwpCREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFOeS9yUGdkdStQM2hlClQzdDlqSzY2OEhCZjlucEV0aTdKUDQrOHFKejZZdnNjUHVYYTQ0K3MzZ2l6U2owd0R5YktwSnlKNXB6Wlo5V0wKNWd6MWZud2NmZ3I2Q2YvbnF1bTduZm1nUU1Qb0hTc0loK1FxMk02bmJnWHV0eTBhKzBXS2lnRUNqQklucHhITApLODFPNW95YW5YNmZtUGEwVjhwWkk4R0lhZmRoR0dHNjJJVFR2QlhVbHRia05obzY1VEdEQkkyNlU3VlJuUFZICkxpVENqZ0tmQXA2QXBpVE9ncDljMGdVWVE0WHZoSkVSWHN1SHFWTTJyWWw0aThlSHhidXMwUXpYWGJ2MnlYc0kKL3pKTWVQdXBuZUJZWG0rUjQ3ZWlPYkVqS0lTMFBjQ1djOGRQUlUxRXRNWkNkMzV2SFo0QnV0V2s0UzdNSk5Odwp1bTF0dERUdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:41:48+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-staging-27f4251f\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: kXWELnGQVn9EVh6g9yUjBkP03kKgmfocRiapcKgjTbU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxFYi9yc3BYd3UzUUVoRzg2Q0ttRzR3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UbGFGdzB5TVRFd01qRXhOelF4Ck5UbGFNQkl4RURBT0JnTlZCQU1UQjJ0MVltVnNaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURJbnJLdy9RenJhKzlleHJYeVZoNUVDU2d4UkE1dnNicHJrZDYwNmZvMkFMcTU5bWNrV2t5WQpBMlNSeTUweXEyMU12aGk5YzdoWXc0c0JjL3lxQllmWGMzSTNUL0tMYzNPTis5U2hNN0J6VzJqWENuekpUZkF3ClZnWS9pUnpRUlJJNlMxTEFLV0FSVkMxUHhUc0tua1N5bmw2TzBaWk1jdnRKMVV4WHE5NFpKSDV5SkRhSUZvK3AKZ1pHdTdKSGdBNGkrbW9Pem5JclJtLzJGOUlFb21hTGdWQ2docVMxUW0zRGVuczBNS0R2MFR5ZHY2RDJqWW94cQpWdE56cVBoK25obG1Hc1ZxZ0FMWno2REp6OEY2bWFsbkYxV0hJS3lHdml5a1FNUXZoeFdyb3NnWXFVWndML2pEClUzbm1sd1QxdDhvS1pXNURtUDJPOFNIZFpQQzlrN3E1QWdNQkFBR2pOVEF6TUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0wzSCt6aDlJLzkxUDVUbTY3YlF1MzJyNktnbUJSSXhHUExqUkdmK2pIOXJ6b2t3U1NUcU9ICk5NaVFPSEpvWURDNGF3Uk8vMlg1SGJHN3hscHZjMjMzYnVVWDFxRWoyd0UrUE5vRi9ZY2tMZGpKSXp5RVJGb2kKMzFnemhhQnZBY3BZVnowb1ZReVNEd1VJL0ZsdEpCRXBQVHF0S2tLMzcwRC9EdzNOWlZLQjZzREg2aFF0d1ZZTwpra05QZlVUMUFnK3NKTTdOVmlMeUhsRytuZHlSWHF1Q0xsdFR4Y3c2U3oxdmdRUkFzQVpvR1lYcks1UmtIK1hNCkRoS2xOb2ZHNWd2VjAwekJMRnhTcDBxVzJmR1h3Z09Ia3BPcEVwL3F4YWNlb3ZpVXVLVy94WVRDMWJxdU1tS1IKUDYycGdKdTZJaHp6OS9pbWNaUG5yTjJoMFNMS2cvM0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeUo2eXNQME02MnZ2WHNhMThsWWVSQWtvTVVRT2I3RzZhNUhldE9uNk5nQzZ1ZlpuCkpGcE1tQU5ra2N1ZE1xdHRUTDRZdlhPNFdNT0xBWFA4cWdXSDEzTnlOMC95aTNOempmdlVvVE93YzF0bzF3cDgKeVUzd01GWUdQNGtjMEVVU09rdFN3Q2xnRVZRdFQ4VTdDcDVFc3A1ZWp0R1dUSEw3U2RWTVY2dmVHU1IrY2lRMgppQmFQcVlHUnJ1eVI0QU9JdnBxRHM1eUswWnY5aGZTQktKbWk0RlFvSWFrdFVKdHczcDdORENnNzlFOG5iK2c5Cm8yS01hbGJUYzZqNGZwNFpaaHJGYW9BQzJjK2d5Yy9CZXBtcFp4ZFZoeUNzaHI0c3BFREVMNGNWcTZMSUdLbEcKY0MvNHcxTjU1cGNFOWJmS0NtVnVRNWo5anZFaDNXVHd2Wk82dVFJREFRQUJBb0lCQVFERy9wTWtkM3lQTC9xNQpPY1ZUNFJRWVREVHYyUit3cnN2STAySGlkWXRZY1pURnpLRTJMOU4xblRmdVhkZEpZVDBET0RQMkI0aTlrd2lZCm9tSG1pNkhZbFl5ZlRNKzZmd1FKdTllSEpteEpvRXYzc1ZGaG84c3hSc0xmMXJNYjZzZFB4MU1IaElMajdXa2MKalBncGFoK2VSUFJxR1g1SnltdHpLdjJVb01lbWl3aHlNQm9aTzI5YUJBZkFCWXBGOERhdVNKQXpNOXNZRkRaMwpRMSthTy9Kc2gyQXFsUUh2UjBneEdoQThROU56akJJYkpnek14Z2pSTER4NTdBS0puVW5tbEFmaCtXbk9MRWI5CmVzanZ1eDJGWEJ0dHFhVHdvNHlNMmFnMmpuTW1LeVFGTVlhVmRMVCtCdHFDT0NoS21wR0RJN3VQUkZXditrbmMKM25IVXVEdDVBb0dCQU5vK1pydExPMVQrMTJUSjVFMk92S0hjLzJ1VG9WWk1FUDNhWkFZV1gwdTZSUGk1Q0hwTgptWDdpQzBKUWk4OS9zUGlCNUx3TDM2cTRURnpIbXRMMjMxWGxEZ0JWSEVCQS9DNlhQUmVRQzVMblJCbWJmbzVuCnVWTll2bTZVY0R3aWd5N2l1TDFGY1ZJRnd5QjhpdHk5NUFXY0l1OFhETTU1enVZcXJOVElOZVd6QW9HQkFPdFQKeFQ4RzNldW5vb1ZIOTgzd3VJTjVUZW5hYXlIektLRjVFaHFRMHVKTnJXaElhdGI5TkxlaFlIbXI5ZlljTzYxVwpmNnF4eUhBYnJCbXBWZ2ZrdzRQVFdUam5Lc1RUMjVQZWh1TWVkNEtBOC9EWWIweE9XbHNoNmdNd1B2enR4N01MCkZrV0RzNGREcWlKQ3lqY3dEdEtUMXc0SlVWcFVXeVd2L2loSHRqL2pBb0dBZnV0bFVTektQMzdKQXN0S296UU0KVFZHNWxQVlJFVi9CVGZBUTFWMXpaQlhhZ0k4UytCVmkyK0JYVGVTTHVrdDNQcjVEcUh4N1FjeFdWR3FjaG0yZApxbFZBRkQ5cTQ0OG5XVzBJMFVnckF1N05zdHF6K2RzbWN1c2NMRERWS0pPbG1NR3ZVQnN2Y05UN0NreURjU1paCmtrMmdIMDFYWEVpSVkyQ1VERmEyeVhNQ2dZQnRMVWMwajNZRDc1ajU1c0t6Mjd0dTI2ZG5HRHRkMjliODJ4T28KR1lxTkRXYW5HL25kVmtuUDYrRzdjU2xDamlTdHJaUzdWNUhiV1N0R0dJYmVVS2JZa1FReTN5UzdmbUsvdnB5cgo0Q1duK1RXemhtWlVhNEdHQ0R6dVQ4TFpTMk83MENmOEJqY1RTVFEwZ3ZJWUdvYTE4WHJ6ZXlVd0dEVFZUa3BHCjI4WlU2d0tCZ0FVNmpweGVIYi9aaGkyRnhUZ21yM3dyVVRqUDZVRTdUOGQwS2p0L3pCYXVlYkNtdmFMSkVsTTIKelEyMVIxSjZzVksxSUlQbUxoSEZJcUU0VTdaYW1sNGJoclFzeTMwODNzalFUb3JtYWExOTFZVGYzckxvTUZRcAo3UlRWbFV1SmJiQ3Jxd0VaMHVzd3AwajNQZ05jNkwvSE5EUFRSUWlnTHFxcmhWOC9GTktwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.199.113.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/556890176902/global/instanceTemplates/gke-redditmobile-staging-default-pool-cb6fb0ef"}, {"key": "created-by", "value": "projects/556890176902/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-staging-default-pool-cb6fb0ef-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-staging-default-pool-cb6fb0ef-o60e", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.10.119", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "fXuc5RsGrwY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-staging/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-staging/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/instances/gke-redditmobile-staging-default-pool-cb6fb0ef-o60e", "serviceAccounts": [{"email": "556890176902-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "PmdZM3nQwE0=", "items": ["gke-redditmobile-staging-27f4251f-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a"}"
organization/660570133860/project/james-forseti-testing-182820/instance/5493219167564478411/,instance/5493219167564478411,project/james-forseti-testing-182820,5493219167564478411,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-08T11:04:04.815-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/disks/forseti-client-vm-4801", "type": "PERSISTENT"}], "id": "5493219167564478411", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "qP711fhtkw4=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc1 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4801/configs/client/forseti_conf_client.yaml\n\n\nsudo echo \"export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4801/configs/client/forseti_conf_client.yaml\n\" >> $USER_HOME/.bashrc\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-4801", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.202.198.127", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "f6rKOxH6zho=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c/instances/forseti-client-vm-4801", "serviceAccounts": [{"email": "forseti-client-gcp-4801@james-forseti-testing-182820.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/james-forseti-testing-182820/zones/us-central1-c"}"
organization/660570133860/project/iap-1-174217/instance/5495953820548737545/,instance/5495953820548737545,project/iap-1-174217,5495953820548737545,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-07-19T10:20:38.727-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "i-othernet", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/disks/i-othernet", "type": "PERSISTENT"}], "id": "5495953820548737545", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/machineTypes/f1-micro", "metadata": {"fingerprint": "hJ37NzJU6z0=", "kind": "compute#metadata"}, "name": "i-othernet", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.109.91", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "iVmNTLccQHs=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/global/networks/othernet", "networkIP": "10.0.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/regions/us-central1/subnetworks/othernet-us-central1"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/instances/i-othernet", "serviceAccounts": [{"email": "941750202210-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "TT8q1SuDCVI=", "items": ["othertag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/5527382132048922716/,instance/5527382132048922716,project/pso-cicd8,5527382132048922716,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-21T19:08:35.234-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/click-to-deploy-images/global/licenses/c2d-spinnaker"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/spinnaker-1", "type": "PERSISTENT"}], "id": "5527382132048922716", "kind": "compute#instance", "labelFingerprint": "CY5BmM-TyiU=", "labels": {"deployed-from-google-developer-console": "", "spinnaker": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-highmem-4", "metadata": {"fingerprint": "XEeSlSUhmJU=", "kind": "compute#metadata"}, "name": "spinnaker-1", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.198.107.107", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "U46mQlzrmZA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.13", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/spinnaker-1", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.full_control", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "CY5BmM-TyiU=", "items": ["spinnaker", "deployed-from-google-developer-console"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/cicd-prod/instance/5603681826629149345/,instance/5603681826629149345,project/cicd-prod,5603681826629149345,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-12T10:15:42.557-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-canary--default-pool-bb6ef461-7pxv", "type": "PERSISTENT"}], "id": "5603681826629149345", "kind": "compute#instance", "labelFingerprint": "BCsawV--MPw=", "labels": {"gke-redditmobile-canary-west-157b3db4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "20N449Qj-Go=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPRENDQWlDZ0F3SUJBZ0lSQUtGenkvcmNMWjZwUXg3NU80dCtGeFl3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxYZGxjM1JBTVRRM09EazNORFV6TVRBZUZ3MHhOakV4TVRJeE9ERTFNekZhRncweU1URXhNVEV4Ck9ERTFNekZhTUVVeFF6QkJCZ05WQkFNTU9uVnpMWGRsYzNReExXRXRNalUyTWpFNU5ETTJPVFF0Y21Wa1pHbDAKYlc5aWFXeGxMV05oYm1GeWVTMTNaWE4wUURFME56ZzVOelExTXpFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQQpBNElCRHdBd2dnRUtBb0lCQVFEeVB3UkxpUnQ4QVBYSHhocDBKUTgxWTIvTmpEZnpUbjRGTzMyL21LZ3RoVnU0CkhZcTNiUTRweXl1YTR0TjkyOTNpb3p0UUtIa1o3SXhUQi9kL2ZMVFBiTnhPYmJCSFVEMzVwSnZ0RmFCQVhQZHMKT08rcUF5SWMxUmFTVzFmTlM3WG5MeFBhV2JmcFA1M0F2MFB3MDZ3T245dnpZMVR6c0p3bEhjUXpwU3pnNXowUwowdCsxNW9MYU9ycUlJMWJzNW1WSlUzZ2lNdHByZkpITDFRWktoK2FiQmJCQWlqYVVVVEs0MHNmVnZJeHAyQXlKCjl2NDl6V2hpczRHMjE3SE5DVEFYVHlGR2FQTWdzWXZyVTg2amZDaE45RXNRLzV3RTl2ejZCZlgvSFd1TmI0SE8KV2trdWdXdGhXa1ptc2xvWnZZZGY2c3dNR2JHTjJEVm52NTVPV2sxNUFnTUJBQUdqSXpBaE1BNEdBMVVkRHdFQgovd1FFQXdJQ0JEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTFrY0RkCnRCUXExY2JQOC8zTDltTXFubHNwOVpwV3U0cjBDNGdEWWtjZFRzcm9rMWh4bmd3SHdsRmFOM0RYbUxXMzdkWVkKVU9KS1dZSXRjNWdvdURFVWFZWDlhOVRSeE5QeVBab0g0RW5acUVHWDIrQnl3Tkx1VU40Q1R1dzNNaTBrMytOMwpLWGErcGNkc0RMTnc3VWFzdkRtK2tGbmYwODNpL0Q1YURXcHh3dGJqK2ZieEU4ekN0UlMydzJWdzhyWkV0UGJCCnZqa29Oem96cHB2Mytzdm5HQVhIRWZ6SWlqZnUyaWFZS2NldEdKZENZbDB2MHc0VmI4ZVExNFRyQ29tMk0veW8KZ0ViUnBMQ28yMmx0d3JMR2xLMjFnT0FFN2FHNk9FOWpSM2hRWm1IM01EOWttVDFqcHFBWVJXQzlET0kwRHBadAppL2k0ZnBYdVh1UDFKREtHCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.8.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.11.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T18:15:16+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-west-157b3db4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: mtGaISCgsMB-bWH6k4_j8WaBp_-bDNnPVXK1bP9ssfw=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGakNDQWY2Z0F3SUJBZ0lRUXE3cHVuQ0w1RGNDM3hhMHNWSGFKVEFOQmdrcWhraUc5dzBCQVFzRkFEQkYKTVVNd1FRWURWUVFERERwMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXZZbWxzWlMxagpZVzVoY25rdGQyVnpkRUF4TkRjNE9UYzBOVE14TUI0WERURTJNVEV4TWpFNE1UVXpNVm9YRFRJeE1URXhNVEU0Ck1UVXpNVm93RWpFUU1BNEdBMVVFQXhNSGEzVmlaV3hsZERDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxaQ2NTMm5TVnk1a0xoeFl4NzdKdHJUSkhHTzZQbTJ6clp5YWxDTU1ISzFUaTFWallvYwo1UzQ5ZkJuK05DazNhcGZkS1hiOG1TNC8vOW40SlFrdGd6SkRDZUpVZnRiUVFHZ29GS0hjNHhJVENGQlkyeThoCmhFRDRVZUlqNUhIblVGSy9nQ1dFQnhsUCt0OEs0SVU4VmZETkZIU2FyY25NMmZUQWVRZjVFb2ZqOERTMW5CNloKeFFJYktyWGUrcC9pelBXYzdab0tlcDREK3JMMFQ2S2I3Zm0ybStaZUVhVWxpa3VqOEZJUUpIZTBOd0czSWhWOQozZVR4M2gyS0VhWS95bkF0VFZVZ2p1VTlmV2FaYkkvd0VTZzd5TncyWmQrUUFxL1NZbzVLaG52bmI2ZmdKSFNtCmFDZCsvaVJVZWFNdDdhQXVwR0twUFVpVzNlZDZvOXpGalAwQ0F3RUFBYU0xTURNd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CTUdBMVVkSlFRTU1Bb0dDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQUc2NFBHM3B0cXdIb0pEUml3NUNaajkyZkNzUnN5Z1A3RjhNbS92aVR1c01iaElqTkRyCmV0NWV4dTV3c2J2TUJMWFh1N2xRMlZLNDhLTjM1eVRzaEIycll2WWpydGdvSE50NjZHV2dLNm1DZDNNeER5cTMKdDh5UTR0OXZuaDBwV2tXNGtLT0RNQU5TMlNUSFFEdkVJa2lnSFhsN3pUaTFIOGdHcStmcTEvdk9lWElaeUU4ZQprVWMzTTFtRzErWThwUVBNNk1CL2Q0Q1hmNkY2ZmdQYThTanZCdE11OS9kT3N4WFNlUG8zVGdCQzlrdEZra3orClJrU0JYVW16SmtWVXBkUFRzbmpJUFc5WlYxUm9neDI1ZDh0WkZrdlVMUEJYalFSMm80Y2JqSUhvdEV4Y3NqdDEKNXRCd3J5czFUcTZvbU1XWGtJaTNIZWZCSmhvL2UwdWRPcTg9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdGtKeExhZEpYTG1RdUhGakh2c20ydE1rY1k3bytiYk90bkpxVUl3d2NyVk9MVldOCmloemxMajE4R2Y0MEtUZHFsOTBwZHZ5WkxqLy8yZmdsQ1MyRE1rTUo0bFIrMXRCQWFDZ1VvZHpqRWhNSVVGamIKTHlHRVFQaFI0aVBrY2VkUVVyK0FKWVFIR1UvNjN3cmdoVHhWOE0wVWRKcXR5Y3paOU1CNUIva1NoK1B3TkxXYwpIcG5GQWhzcXRkNzZuK0xNOVp6dG1ncDZuZ1A2c3ZSUG9wdnQrYmFiNWw0UnBTV0tTNlB3VWhBa2Q3UTNBYmNpCkZYM2Q1UEhlSFlvUnBqL0tjQzFOVlNDTzVUMTlacGxzai9BUktEdkkzRFpsMzVBQ3I5Smlqa3FHZStkdnArQWsKZEtab0ozNytKRlI1b3kzdG9DNmtZcWs5U0piZDUzcWozTVdNL1FJREFRQUJBb0lCQVFDdktaSHVSMjBaUVhwVgoyUnRqSmdzRW1aSFgxWG9RckdGa05QZjZLNUZRWFBFaVhxdW1CZms0aEh6bDJrbzFKbjQ2TDZKdktYcnFXVFhDClBWc1N3L3ZuN1VmdGpqbE1xRjZOKzU5QXBMSlNwNW9BNWpUWXlnUjZFRzFad2hjR1pVSHNGUUhLakdYcUxOUzEKVVpYUVZ0bGRrU3RNbVcvV2x4c052NEZTYVUwbTdRZUpBWlRnK2ZvNUVEcGNTNFdVUld3TjZvclMvbmJGRWFQdQpzaXB3ZWxGcm1QSjZEMGtuLzJrYWUzbHZ0NnRrVFBXaTN2NmkwMUxrZFUvYllpNFVRN2VHTFgrN0t3RlRKTTZOCld0dnhWeks2b2lhQ2RoSHR5T1ZBbklJMEgwcDZobkp4YzBtaUZ0Y3VlOE11T2c2NW5yUmZrY3RUU1ZsRVpRRzEKRThPTmdQWjlBb0dCQU85TjRDYUNIYWVMUHI1UmkzeGhmb0tKTzJHcng3ZTZGK2pLb0p6MEhoZGtUeHBuNmU3aAo1NTViZjQxcU1qaTg4TEFMQXlpOUN0V1BtZWFJTGpvOXRmMGROSG1ZUTlwY1VVNGJua2tFaG9EU2xiSnE1ZktpCmNya2FIZnVNb1NWNlN2bUxJSDByeExiZnFmZlNzMkRMbU9BbjVVbkppc2dObXdrMDRwdEpSTzduQW9HQkFNTDUKdG5mbnlhUEpVYWNrTy9HMUxmNEZ0KzhHTE1ZRm1ETW5SKzAvYzVXQStwbzJ4eUtma2VPT3ZUUEdBbTV4VkdyVgprU1hNbW9nNDlPUDhZRnYyLzVsZFRzeUdVWEphUjBBTXpSMmlVS1R5TlV4ZkdGR0JHZkUybHRTQ004VjIxN3E5CnVndE9NaTBEZlF2MzhCa2Z0bU9zQUlYMUcyNkZZZTMrbHRnWUhweDdBb0dCQU1QbVNvTDdyVzhFeko1Y2Z3V1oKZ2trMk1vaG9hWng4R1NxWEJoaTJ0eE9MS0Q2RHBydko3eVJ4M3Q5VGVqMThYc1Nlbnoxd1ZEZ3owRmNxVUQyWgpXeXdVQm1zc1BRKzYxMHhMeTY0V3FFMDVGeGJ4NzhCTFFBTkw0Qk9YTWl4T0NxWnlRR3gzc2hmS3pZZDAweWVBClJHdnIvUVlFbVRuZitYVDErRFFMTFFVdEFvR0FKNkNwUFdXV3pmczA1VXV3QTBoWHVMRmcyT3ZnWGI3MVdEQTcKcGpTblFWT2RtNHBXbnVyZnMraG0vQWJhcDZmUkNJV3Zvb2NiUVdTU0lXUkNFVzc2TkNtS3duYnFSdHVpYjVvcQpka052TUpjcHpnUGw1V3JmNHU2OWFTT3RjZ3pkZTg3ajZUaFRhbUt6SDZPYzRQNVpDNWtCNGpnWEF6ZUkxOTVPCnVrenNxOUVDZ1lFQWtiN2IwdTlwZHRuSGtyYU9lYWoyUWthUlVzdit3bDlVZUFMa3A4TGVhOGlzVmpPZ3F6SnoKRHNqVXJsTkRJaUsrd2F3ZFZxbFlPOXdEL3R2Q3Z2dzdKaTdhQzhqdG1tNWVkZ3pnM1lJZXZHeEpyRDhFSnBOagovSjlOMFpMRlpmaWlHS3JZclJpVnJrdE8xSFVrSnNuUmpxY3ZDcm9rcXJQV0pOM0l5eEhOL3FBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.104.76\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.11.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-bb6ef461"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-canary--default-pool-bb6ef461-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-bb6ef461-7pxv", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.13.23", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "b108H5t0iek=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.8", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-canary--default-pool-bb6ef461-7pxv", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "BCsawV--MPw=", "items": ["gke-redditmobile-canary-west-157b3db4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/henry-rc2bbb/instance/5654096930102928917/,instance/5654096930102928917,project/henry-rc2bbb,5654096930102928917,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T06:54:03.088-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/disks/forseti-server-vm-4322", "type": "PERSISTENT"}], "id": "5654096930102928917", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "J42AnopeTAU=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"henry-rc2bbb:us-central1:forseti-server-4322\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-4322@henry-rc2bbb.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-4322/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-4322\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"45 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-4322", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.226.124.49", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "KUcIvaYBd5Y=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c/instances/forseti-server-vm-4322", "serviceAccounts": [{"email": "forseti-server-gcp-4322@henry-rc2bbb.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2bbb/zones/us-central1-c"}"
organization/660570133860/project/henry-vpc3/instance/5700997096797929719/,instance/5700997096797929719,project/henry-vpc3,5700997096797929719,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-02-11T23:11:21.094-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-vpc3/zones/us-central1-c/disks/forseti-security-20180212011504-vm", "type": "PERSISTENT"}], "id": "5700997096797929719", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-vpc3/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "woEMVPAUB7g=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=henry-vpc3:us-central1:forseti-security-20180212011504=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.10 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://henry-vpc3-data-011504/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://henry-vpc3-data-011504/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180212011504-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.155.131.118", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "b4jf6rQYyME=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/global/networks/test11111", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/regions/us-central1/subnetworks/test22222"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-vpc3/zones/us-central1-c/instances/forseti-security-20180212011504-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-011504@henry-vpc3.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-vpc3/zones/us-central1-c"}"
organization/660570133860/project/felix-test-168518/instance/6061773340351508807/,instance/6061773340351508807,project/felix-test-168518,6061773340351508807,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-12-18T10:57:45.599-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/disks/forseti-security-20171218105222-vm", "type": "PERSISTENT"}], "id": "6061773340351508807", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "Z7TKAZvcB9k=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev-eap1 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"felix-test-168518:us-central1:forseti-security-20171218105222\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"felix@henrychang.mygbiz.com\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-105222@felix-test-168518.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=felix-test-168518-data-105222\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"11 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171218105222-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.255.136", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "KvZr2LhoGVk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/global/networks/default", "networkIP": "10.128.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/instances/forseti-security-20171218105222-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-105222@felix-test-168518.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/6139380964177369934/,instance/6139380964177369934,project/pso-cicd8,6139380964177369934,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:06:57.215-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-canary-east-default-pool-e4705366-t9p5", "type": "PERSISTENT"}], "id": "6139380964177369934", "kind": "compute#instance", "labelFingerprint": "7s-VnV1Vfao=", "labels": {"gke-canary-east-67b092c4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "rJQ4SdUTp7g=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQU1TR0RTRFp6Y2RRU1cvODlqZmFMVGt3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRaV0Z6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RaV0Z6ZEVBeApORGM1TlRNMU1UVXhNQjRYRFRFMk1URXhPVEExTlRreE1Wb1hEVEl4TVRFeE9EQTFOVGt4TVZvd09ERTJNRFFHCkExVUVBd3d0ZFhNdFpXRnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdFpXRnpkRUF4TkRjNU5UTTEKTVRVeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUhPaGp2aVU0Vnl0NEcyVgp5N0ZEZHg0RjEzeWRVek5TMElUL3U4VEVQWGhxQ2tBejhxZVpPaXE4aGRaS2R0b1hFeW8rL3dUTnBOVEozeHNECjREVkhzUW5UamViWktRby84bytpdGpWdm1pRUE3MUZ4T2hPMytxekJidmt1cnFrOXVmbjJGSld0ZDNacm1MeUIKYVhCSnVLYVY4UlZGcTFMRm5vUEFxcUduM2krbWswS0lGRmlLM1U4WHlpbTZVVzFuUHYyaElUSmJNYk1qZm5sbwo0YjNzN3V4ZEtCNC9LZzEyOWh5M0hwdzBtVDBXeStkbG1Qam1RdmoxQ1VNN3NOTXJDSE1TbXMrYXJjdDZtd0M3ClRLTW5BaWVXa0xhalgxSUt6NU9MZGNoTS9LTGxRbEp1WUJsZ2p5dENMQUo3MjhTYWlXL1dJY0lpUVRZZFdsVUQKUENsZmZRSURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFueS9LRHIzWldESmNFS0JrY1ZQbTVVU1RUaThOZ2Ztc3psM2pCMG0xCnhoOGxzVjM0bUFhaVZOUndIWjRtUU9TTXBHSlpSdmFoZHRMN3hZS085TXlpbkFaRitzU00yTmJBamhLYms3eEEKbG5qNHZGNHZySHBURXlQd29FelBWeklpcmE4YnZ0MGlUUkpzOUVkY3hNVlZMZ1dnTXpNNzNPWlpjMHVNUFBNNwphT25TR0ZIU3dTeld0SGN3VlBzaXVVb2FHY2w1azdaRHl3MEhLazNnZWdXMFdyQUdCckF4alZZZUM5dXJ0SVc2CnRUMFNuc0tPZFFsQnRjNWVuNE1qbjlBR1dKNmRjYnYwbzVTUGlXYk0xbVI4WXNlS092dy9lemM5RDVsWGprb1AKUXpVREdaLzhlUWhLaGR6S1VvRDVqMzhObHB1YnZCd0ZqNnJtT0ZEWURMdzZhUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.48.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.51.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:48+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-east-67b092c4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: LVVOPEDi9t_-UN067s0d7mbSFoBZHNusRlqsbcaRc8U=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lRSmpwN1RwTFZBTzRDVjVJcVBkWFhNVEFOQmdrcWhraUc5dzBCQVFzRkFEQTQKTVRZd05BWURWUVFEREMxMWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMV05oYm1GeWVTMWxZWE4wUURFMApOemsxTXpVeE5URXdIaGNOTVRZeE1URTVNRFUxT1RFeVdoY05NakV4TVRFNE1EVTFPVEV5V2pBU01SQXdEZ1lEClZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFYeVQKNzdBQlVvSmg5WVZSbHVwSDJsei85dldFd1lURzJTRDBtbS9wMXVoQWRON2kvN2V2UzdwMGxlSzRCZms3SnRjbgp2eDNDVXJKNCs4bldxVE5jbUkrTlBSVzdhdnphczd0M0NTL2hXMEZaM2tsaXRUWnpOalMxaG9GNTQ0aDhmMUVBClpEN0lkQTlPQndOTGhmNXQ2WjBTeGdKeTBLZWtKTXVpOGQvNEZsd3VSYnJBSGZBeEdVamtwRWNLRzYxSmI1UmEKQ2lXRzQ4SHZOWlAySVdsaFR3VW96ZlVtbmpDYTgyUFdhZkxrZmZOZk1zb3p2WVBnSTFzeFY4aDdQbnpkc2JuSQo2YjU4QTNseHEwUmtRTWdvNFlzaGpRaUlqMDNIa2t0RmFvNWc2bHhWU0tMYTlHRnZhL0V5VjZWTGY1K29FZVJvCnNTZ2hTQzRjRlNTNjl0OXNQd0lEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3cKQ2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZWJGUQo0ZU41clg5ZkpLbjdkeHFKcUpmV3lFekY1dWtjY0V5TFUzM0xoZ2VPY3JoUlduQ2xoVFV4bEVCVFdVQklLcWc0ClJKVldhN1BQYXZOZXIrK1BnNG9Zeml4dmZRVUd1TFl0cE5aanQ1VmJpamgrRTBCaGlhQnZiek5zVnBVOEVpQjEKcjRPUEJqTjI2cEJ4M1RSS2FCZ0J0OGxqaVpJR3pVWk1Fd3A5cE9CVTljVGJLVWk0cG5kSTB4SnY5ZFNqREg2RQphcnE1emx5bG9IUVI0d2tyb1VhdDJmTjJ3MTE3VTl1TW9DUVZMMWpvRWcrS0kwRVRNaXRkQUNlbzFzamdvd3dSCmtTVUtvTXhOZDlOU3pZbjFrQXlGUlFsV0Z0Z1UxUlE5UHEzYnFpNDdlUmFBR3VhbkR1TW1hQzZyZjdZaHFDTEcKUElXWGhPQWFuOXptQzZERjVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMVh5VDc3QUJVb0poOVlWUmx1cEgybHovOXZXRXdZVEcyU0QwbW0vcDF1aEFkTjdpCi83ZXZTN3AwbGVLNEJmazdKdGNudngzQ1VySjQrOG5XcVROY21JK05QUlc3YXZ6YXM3dDNDUy9oVzBGWjNrbGkKdFRaek5qUzFob0Y1NDRoOGYxRUFaRDdJZEE5T0J3TkxoZjV0NlowU3hnSnkwS2VrSk11aThkLzRGbHd1UmJyQQpIZkF4R1Vqa3BFY0tHNjFKYjVSYUNpV0c0OEh2TlpQMklXbGhUd1VvemZVbW5qQ2E4MlBXYWZMa2ZmTmZNc296CnZZUGdJMXN4VjhoN1BuemRzYm5JNmI1OEEzbHhxMFJrUU1nbzRZc2hqUWlJajAzSGtrdEZhbzVnNmx4VlNLTGEKOUdGdmEvRXlWNlZMZjUrb0VlUm9zU2doU0M0Y0ZTUzY5dDlzUHdJREFRQUJBb0lCQUUwMHVYZUVTbVloZXZYRQoyaVhlNGs5cE5MU0dSQldNUkRHQUJwWFhoVlRRTjRkTW1BRnMxM3RtbWdVZXNmaVBFc0pRS3pLbHU0SVd3MFFqCjBYcnRkVDVESkF3RVVQdzNKNHk2YmlrblpMT1E1Y1JLKytTWEpZRmovSVlCU3loclVzTGtjMlROZzhiZFJoV3AKTG1YdUJxZm13MFJTM0Z6elU1eHUvS1hHbnJ6T3ZqOElmaENBenBFWlRpdXZjcUQyRkl2NitOS0UwbDY2Wm1EdApySnhEQmVKc3gvZUlpM2ZrcU9YdmZzRlBLZ0ZFVEdmN21pZUNIVURoY1YwZlQ5U1MrNm5rQzhzNUF6S0lPVXRYClZKQ0FodTZ3bFlhdVZCQTJLN0ZXaFdnTThhUHRaMWxoOGE1N0JicHVDWkpkUDYzOEtybzEyRlh3Y1VGRzk5NW4KU3dsbTY3RUNnWUVBODFabzZwYWJIaDhyUHNPeTNFYVIraFdlSVlDY2ZqNGs2SzB6SVdnWUxDVG1GUGlZK2JrYgoxT09WRVpPSld3S0ZCT1k5ZmJJMUxrLzZ1dElPb1QzYm5FVXhESy80enhsbi8vOWVTTVBId01KcDJMQUNVTEpoCldCcGxZK0tGeHJmT2U3UXdvT1VadkpIUlE4Zm1US1VaOUxhTlZLcTgvQktjZ0U1R2V0QW1uS2NDZ1lFQTRKaUQKVXdSMGhzeTFkTlEzTFZJRDZMVG5EdHhjN0RrVEJGdXVveUFWaDM5Ymh4bk5TL0dUcUhMNitJdVBnc0pXZnhBNQpoTDhEOFI3M2xKTjZ2WkJsZFJadUNidC9Qek5JL3lQUmRObER4UEh1blJ3eEEvVU5EbUdpWXdndnVrelZRUDVBCmZJYWdSdnh1bGlDaXYvU2I0TzhWZ2tQSVlTWDRLaVRUaXJSa0xxa0NnWUVBbXoxYlBaM0xaQklhY3JaQzIwaWkKUkZ1YVFHRmVkU09NUkd5S25CdGVvSHNCMWdzcS9OWGRMWm5yTmdWYnNaWVA2cXBBUEhwK2R3ZExPL2hhb1A5bgpwWEIyOUZNbmRtZ004MEtsa2VKbEExS0VXRnNoZnYzdUlGam1xaXlQajlFZmg4ZlM1aktDa3N5c0pvUFhKcnFGCnJwcnYyejM1eHc3UWpRSmk4R0x1M3kwQ2dZRUFyZytrMzJiNWhDc01pbEdadmFidFhxRXMzVWlOUDRud0loV0gKMythU3FPTmNKUFVyTlNzeE80QjQzcjBTYU0yQ1NaRmljbTJ6ZVdCOWtnbEdPN20zMTZtZGVDOTJxNTFzZWtmaApJY1RzRDZ0TU9UakxCLzBYdEVpWW1GV1UzN2FDSTQrb25KbWRoOFpGVWxaU3E1L0FXdkFQNUZmeDZOQ0xadVlKCmlGckx0WmtDZ1lFQW1QOTVETHE3MlF6K1R5empmcHpWa3g2OG1RS2lFSDgvQmEwNWkyenZXNThlWDZmY3lUV3AKSG9GMzRXSEQ3aWV4VW03Z1NucUFqVU0yZlRyYzI1U09kN2dVR2VmT0cwTTByRitkNWNNVzdFZDVlYlI0ekJRdAprTjZuVVZJRjMreEZESnJPRzl1M3E5Q3RBUTZVUXowZTRMU3MvMXdySzBwVE9Ib3hvenhIMTNVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.177.251\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.51.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-east-default-pool-e4705366"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-canary-east-default-pool-e4705366-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-east-default-pool-e4705366-t9p5", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.180.71", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "k-WjtsXoTsk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.8", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-canary-east-default-pool-e4705366-t9p5", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "7s-VnV1Vfao=", "items": ["gke-canary-east-67b092c4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/pso-cicd8/instance/6196191484442727627/,instance/6196191484442727627,project/pso-cicd8,6196191484442727627,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-18T21:59:00.991-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-prod-east-default-pool-876b2e46-s5cb", "type": "PERSISTENT"}], "id": "6196191484442727627", "kind": "compute#instance", "labelFingerprint": "v7xYtm0K6uM=", "labels": {"gke-prod-east-aecd1f6d-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "TVl4GnnpV_o=", "items": [{"key": "cluster-name", "value": "prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRVGVrWCttK2lDTzhGNlc5bHZ6aVZjREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93TmpFME1ESUdBMVVFCkF3d3JkWE10WldGemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMV1ZoYzNSQU1UUTNPVFV6TlRFek1EQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMSkYrVEZZeld1RlNlTzVjNUYwNlRCZgpLb040dW84Zmhiakh5QnN3YXA1MVpJb0RxOGk3ODkwRlNrMjQ3YkFzdmZaOXZROFdVSWRxRzA4VlBIc2VuSFRTCmJxODhqendIWnJ5cE4zNHhVbUdFcGF3TjdKb3g0NHRSQVJkL2JjU3hFVGhCMDFrWUZ6alp5K3NIdXc2Wms3eDUKc21xcCtCaitPaW5ybjRZeVc4ZVRkSUdYeDJDQkRZSFNNT1V4aTJDQXA1K3VOU1hvbm5YcFNXRkxrUjFmUXQ2UgpxMVRuN05OZllDalI2VVVBcGlBbWhVRjBiRElXQTJIY3BETlpCMlRFQ2NQaG1QTVFPTHhCWUdqVjErNjZvdXVPCmRUWHVmZXlDb0J5RVVhNSs2TzVzY3NERXRVRmRPUVVSM0x4VjFrbW9JZm1BemhRNEdDN0xYYmt1TW9Zck5LVUMKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtMY1VJcEFQbXc2UHFyZDhpSFc3M1FZYTdqK3J3cDBoVnVQUHlGclZqVS9uSFFpCiszYklYWHZ4Nk1zcmt6ZFI2a2s2UHlqWWl2QVJpMWRYQ0FjV3cyUXFBSVJibU5OY0N2a1lJSytYb1A2UTkvUEoKeGJMWlRsRmtzRWVkR3ZNMnFXd21XL0JYT293dHFLQ29rL2NCL2xKaS8xa0psZ0RaekhSZDFkZVl4bEVLYXRqeApwZTNzN3FCUEwydkZlTEhJMThTa2tMNDFTbGx3bWYwWXhwcUozNVVUQUcvdUJuazFiQ2tBTnBFK2Q4OGhWbWV2CnV1RlBGTFZsKzlyY2x1dUN4NjJabWY2SzFkYjAwV2hqdjg4ZWFCWXpocVVMUEt5eWFBaEh0SElNdHBlNzVBbHgKRjR6S1pxa2RUN3hsUm1aVnU2R2VvYmVkOFF1YVg0OUVZeHg2STRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.72.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.75.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:37+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-east-aecd1f6d\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: tpYxxawhpbtwZ15OY3ekOtOasYxcMV3eHOPctR3DRkg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lRZWlxUlB5K1FDdWlqb0t2TTN1TkxXVEFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93RWpFUU1BNEdBMVVFCkF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1pNG9DZ0IKWXREd0tnTXR2Vzlzcjh0M0FhblV5V1Y1ZzlXTmJzSFZjYWpZZFlKUGlhQmdXOXpQdU9aUlM5M0tjbDdIREtFUwpjR3Z4TWhmdmtseHUrdFh0cy9KSW1YSlkzY2JhaklxZDREK3hyVFQzdEJMYWRXVGZyVWNhZ0tEaEFGSnpWVFYzCnNzR0xJRmFWR2xQYktzOWFMalZNSnZVQWdsdTBtK2ovSk5VVTRHWGNRNHdJS21vRGJFNXdyTjBVM0Rxdndkd1UKOGhVL2hHd2VHRXlxSmFkRE1SeFdORTZIQWVZSytnR2pzakVKY1VWQWhQb0QzQ2NyWUNRVXNoRnNoenIrR25hegpkNXdBemVBTngxRktoOURiNWxYWjhkcVFETjNLV04wWnUrckNxeEgzOHppTjJEMzNqTjlEU1VJNkFtVzNVQnN1Clh0clhTQ3RpbkI5Qm9yVUNBd0VBQWFNMU1ETXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSUF4RFZ0cgozcG9qVmo2MWZ4VDJ5RTR1SmhvQ2ROMm9sZDc0VEJJaDJ1RFhVaDF3K0NSR2lnZ1lxcUhqaWlBWGcxWXZ3RysxClQ0Mkw5RlNFZlMzTkxJbnYzZ29MTnpkdmZHUkw3NFV6RXFCNFdYSW9jUFVZNi8yVmhpV0lCQnZEOGdTWjBiVWYKZGFwMEVmYXJmSlVVdDlRbm9aTTNtMU5ZdXJKK0RjQjcwZUtBTVYzclpPTnJDS2dwY0NGbkNSVllZSzdwSGdieAowalpjUWJrMFZFcnNBNHpDb0xHdXp5Rjh5d2Zzc1lpNi9oeGt3aEgrUnpNRGs5ZCtHYTdZZHhPU3VYQ0hjN0RiCjQxMFlBbUx1TSsrdk0xZGNMWktPNElVbGRXdjJBeVVqdEtBSFNGL0dQYjJGNFBFRUpKbWIzSFkybzFRNnFoakgKZmYwdUlDR2VTWmx2cWZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUxpZ0tBRmkwUEFxQXkyOWIyeXZ5M2NCcWRUSlpYbUQxWTF1d2RWeHFOaDFnaytKCm9HQmIzTSs0NWxGTDNjcHlYc2NNb1JKd2EvRXlGKytTWEc3NjFlMno4a2laY2xqZHh0cU1pcDNnUDdHdE5QZTAKRXRwMVpOK3RSeHFBb09FQVVuTlZOWGV5d1lzZ1ZwVWFVOXNxejFvdU5Vd205UUNDVzdTYjZQOGsxUlRnWmR4RApqQWdxYWdOc1RuQ3MzUlRjT3EvQjNCVHlGVCtFYkI0WVRLb2xwME14SEZZMFRvY0I1Z3I2QWFPeU1RbHhSVUNFCitnUGNKeXRnSkJTeUVXeUhPdjRhZHJOM25BRE40QTNIVVVxSDBOdm1WZG54MnBBTTNjcFkzUm03NnNLckVmZnoKT0kzWVBmZU0zME5KUWpvQ1piZFFHeTVlMnRkSUsyS2NIMEdpdFFJREFRQUJBb0lCQVFDQWFFeGRDM1h5QUpKLwo4aFVNWVZXZExvYnI1T3JxZGZCMi84SHBVdWtoZ1VpN2tyS1MzTkluMHVPUXhGVnFrQWJXeHpRM0h4cTRrMWJlCnBTN1czMUNzNXlLRlR4aUxaSHFNcW1mYWplRldIZzZXb2hpYkx4S0c4K2xnWVg0RWJhek5FbWRpaXk3YVRtemoKdHdOZXZna0hHY1FSNktQTGZRWG9NUVRFNitUZVF4Y1NwaHN2VmdtK2dQZ2plaUZ3OHVndWM1Z3ZvWXNWWElLZQpJQnRNVmNMeUUza2pkd3phcm9yYVhJTVZOOGw2Znp2Sm1GZTE2dUVBbjZLTGlxSS9BYTFRMGkvQXE1WWtzUU9MCkNaR3JMUnZVaU9YNWk4OVhVZEdrVGtmdlQzVUFCK0RWYXZjQlZBb0lKR2RFQldKeUhMczh6YWdRMlRXWEdZaXgKVUlKeFpTdkJBb0dCQU11NDUyQ1hTdVo0RXFLY3FDQjcwQTNZL1U1R0xDRUlVVEVPanhOMnhVVTdaK3VVV2g3TQphLzRFWW91MmFhNFlUWlJtNG1BcWVDLzFTbXV3Q3B6V0J3SGFtWmNSSG5EM2VXb0FsTGZuaFJnNUNRSi9LSkVvClNYN3grUjc4d1JrZnhnQXJXamRtNlZwR1NSbG9PS2xEWExyWFd6a3gwOFQ4VDJpMVo2ZFVLdWhaQW9HQkFQdzYKa21YWStWZUJZTmRZUVhFRXZJTnd4NzdOMFUzZEg1MEdPZTNpOFRQenpFRnlXQW5TcnhhaU1qS2RrUmh3cCtUNAo2bk9jOWIySjliNnFHMTA4Y29BWkVMOXAzRURuaDJ6aWxJVktmZGZUR0txTXFrUFNBZXJIeDdsREc3dVpQZjhZCk9QVXRSbVB1TUtpdXFjVFJXdlVFb0o0dVFpWmtDYUJudUxoSWtjRzlBb0dCQUthYWhMNTlmQWVXMHNhaGp1MWgKMC9nL0tJakc0bmZ4TVZVSkx3RWY5SngxeExyb0MvdDcraVUydU5EQlVSUExWRWExRFJUUUpwSXg2N2E5dFRBbAo2SDBmcE5QaWNCNjZoRlNvUFBkWkk0TjN3V0tGVTB2Q3dyaEtjdzFnYnhwNDNaaHQyODNMSDdOd0gzL2p0OUxWCkFCVGM0Z0dZT2pPeWs4NXg3Rjd2ZWxlaEFvR0JBTW91VlMySXFBNEpxa3ZUOWRrWFY5andyVngzOUwrNmNWM1kKSU5WY0pjWmtOYVY4ZDYrZ0R6TlFYbmFPTVVGckJGb1pZUzI5Y29vMUxTUmhqTC9HOVcxVEtrYVZIN1Z6SWU0WgpEYjV1Z01OZzloTzMzNyt2ZGxQeFFscHh2YWc1NVNVM0VHa1BtcTM5djBsbmdMUkFzTzFZZ1R0cWp5SGc3SXFFCnVlQVdZNmZ0QW9HQWNtZTdoWmpmQ0hteVlScUxFTDVIRHJ6UmlQU3haUk85RHRKMHVFMEsrVHRETlFqYkpGR28KU1dEazN3aCtTblpyOGlBMTlCajFRM2FseEdDRy8yNDBsREJMWGZiTzBMZWY3VEtzZkkrMzhQZElhczlWWm5KNgpKU05EUmwvSlowQ0paZnQzSHBsWHhESkw2MXNxZ3QvNFByblMvY21yaU5oUVVwTGZNaTQ2NlljPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.3.189\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.75.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-east-default-pool-876b2e46"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-prod-east-default-pool-876b2e46-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-east-default-pool-876b2e46-s5cb", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.134.60", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "laALFS3_gzE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-prod-east-default-pool-876b2e46-s5cb", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "v7xYtm0K6uM=", "items": ["gke-prod-east-aecd1f6d-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/policyscanner-carise/instance/6230492493446736055/,instance/6230492493446736055,project/policyscanner-carise,6230492493446736055,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-05-05T12:45:29.674-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-8-jessie"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/disks/www2", "type": "PERSISTENT"}], "id": "6230492493446736055", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "cHogJN6ZbRE=", "items": [{"key": "startup-script", "value": "#! /bin/bash\n      sudo apt-get update\n      sudo apt-get install apache2 -y\n      sudo service apache2 restart\n      echo '<!doctype html><html><body><h1>www2</h1></body></html>' | tee /var/www/html/index.html\n      EOF"}], "kind": "compute#metadata"}, "name": "www2", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.154.217.150", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ffqLr5Y0ZNQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/global/networks/default", "networkIP": "10.128.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b/instances/www2", "serviceAccounts": [{"email": "534416047782-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/servicecontrol"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "9GVlO4gPawg=", "items": ["network-lb-tag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-carise/zones/us-central1-b"}"
organization/660570133860/project/cicd-prod/instance/6241118723555438558/,instance/6241118723555438558,project/cicd-prod,6241118723555438558,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-08T09:53:53.354-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-prod-centra-default-pool-6e93e17e-yaax", "type": "PERSISTENT"}], "id": "6241118723555438558", "kind": "compute#instance", "labelFingerprint": "epx-_16_p0Q=", "labels": {"gke-redditmobile-prod-central-f140a72b-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "pz0pNzCHFZ8=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lSQU02TDNHYUliTFBRaFJ5VExjL2pYWDR3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQkpNVWN3UlFZRFZRUURERDUxY3kxalpXNTBjbUZzTVMxaUxUSTFOakl4T1RRek5qazAKTFhKbFpHUnBkRzF2WW1sc1pTMXdjbTlrTFdObGJuUnlZV3hBTVRRM056RTFPREl5TVRDQ0FTSXdEUVlKS29aSQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ySjFCMlJ3cnhJSHNxUUNxVFovWXEvYXZQdVUydWpVR2FqCkVESndrRFNIUTRFZEliSndFSlpENG9tSVlVVzJDVVlEM1hweW1SMnNTd2VtaHAvbUlWcEhOOGF1Qk1GZ0VuUk0KSlUrdUQ1di9IZFB3Nm5hNHpobWpSTVg0Q0ZmV0UzYVkrSDJidTFjY0hKenRwVTZhYWh5b3dsSUVQckNwZjArQgpQTHI5VlRLZU9NMlg3aXVKNkduSlZEK29ETlhlNVRPQVNnUWVuckpJb0ZIVFM4L0RaZlFTbEFFVzRsWlpQMnpYClJwa2ZuTDFFTUhBVU5wc2N6RGNvelM2VVVBVHhjYnhhQlVUYjVCL1BuWEMzWmVCZ0tsY29QWDhmNWEvNldaMTYKckYvMDF2RmloK2FHWEF3cC9FaVZiUk43a21xZmFkNm5EaktKU1BsNjVrbFdWbzRFa09VQ0F3RUFBYU1qTUNFdwpEZ1lEVlIwUEFRSC9CQVFEQWdJRU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSHU4QlNSUjl5KzEvK0QyMktSMTRORlRQZXIyODczbzdjTnE4L3c0WVVXdytSaWtxYS9QYjhWLzYxRXEKYnplbkplQ3NUUjdWS21kQ1RYM01uMFhYQ1JKbXpEUEMyanhqSWt2K2YvWlV0NkxUMXBZdFhNYkFnTHZoSEx0cgpiK0YwZU90MWhTelFTZXRDazBZblUyQzc0U0t2VHlxZ1B2blJwalRlanZRZmZNL0JQeDNVVFlqQ0U3QzkwMjVCCkh0SlY2S0h5OXpCNzM4ZG50eTBaZTRmSkl5WjkydWhYSGg3cGtsdkdzV05zTUVLN2xHdHVDNldNRlhxNGljeWMKN3RWRzk5c09XOFVtL0lFbjB2R2RTRUFxVzhaMUQvQkppd2gyeEJSMHdoaXdYRkRob1lLbHpWNHBPUktiVXJyUgpWM0xTYnJrTXIxQTJoZXRTdU1nUmpmVm1YdXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.4.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.7.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:18+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-central-f140a72b\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: X6lvXl1D5ck0ETLYV2tObZafr6dMn8235hgKku_XEP0=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lSQU0yZVdaaFR0WWZ1RVNwcWVYSzUycWt3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQVNNUkF3RGdZRFZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxRXdkdElZTFZ1Z3R2ZmJIVUxaQW5pSUhJUGdXMFJpR054VFFuaWFiV0JCcQpMM3R2cmV2Z01mUHo0SDRITmg0dG9jOWYxUXpsL2l6OVFNdEE5VE1aUGQxalpaOHFtYWFQcDNYUFVYM0JoQjhxCjF5SmlNTk03bW9zcENhRTRGcmRlSmczNHZyZFF4RUlZNldXMUN6Y0JxUmxhd1ZrdjBaY2o1aTc3aHBwMnU3QUsKTzlQUGsvY0MwMWM1VFEwbXhacDZ0a3IyRStWeHl5emVLUndISThkanhRRUh2RFVhazlSTWRwMU5QOWgvRGNBbApvY1ZkT21rRDZoWlJNeUQzd1MyUG1JYkxjNmxKdXpPNTAxdEZCcExUa0l3OWxzRVU2dldDcTBMRzdCZEhqODdPCi96MmkxWlMrWWJoTHZxMmMwUTZXZk9aRlJicFFVV0tRZXlCZGZveFBIUUlEQVFBQm96VXdNekFPQmdOVkhROEIKQWY4RUJBTUNCYUF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVlUVnFqYUtOY2FmRTVZa0pUSFVKbG42YlVUUld4VnRDNlhRcEYxdU85aHRuCmZYT3BtRWFBT0dXemlKenBrR0s1OC9vWFE1M1JiL3B5Q3hjMU5RNGkwOGxoTWpjd2FrQlM4Q0EzVEhhUlM1b0oKWlZIZzE5UUdxeTRHN3M5Y29wNGdkQ0hZUUYwZmdGVHBybFhocVl6bTFDWU5GQXdnN2kxblNkNCs5MUZndEhCcApCMkFjS3hIVGpHdmdPekhGWUN0NzRlT0hVSnk5bmhTUmk3R1lKcjlxZjFxelhmeFdPNzdDZzJFek9RVWVTWlBlCnZGVVA2a2ozczAyazE4Q2tMUjI5NDE1eGY1bmJCNGRWZTVNUTBLbUgyTFcvQXk2S21UQkNKem10QWdOMUtCVXkKTmZVcFN6NDJWWWx5Mi9ZelFCb3ZvUnVLdC9HbFF3QUgzY0ZBUWphYU9nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcUV3ZHRJWUxWdWd0dmZiSFVMWkFuaUlISVBnVzBSaUdOeFRRbmlhYldCQnFMM3R2CnJldmdNZlB6NEg0SE5oNHRvYzlmMVF6bC9pejlRTXRBOVRNWlBkMWpaWjhxbWFhUHAzWFBVWDNCaEI4cTF5SmkKTU5NN21vc3BDYUU0RnJkZUpnMzR2cmRReEVJWTZXVzFDemNCcVJsYXdWa3YwWmNqNWk3N2hwcDJ1N0FLTzlQUAprL2NDMDFjNVRRMG14WnA2dGtyMkUrVnh5eXplS1J3SEk4ZGp4UUVIdkRVYWs5Uk1kcDFOUDloL0RjQWxvY1ZkCk9ta0Q2aFpSTXlEM3dTMlBtSWJMYzZsSnV6TzUwMXRGQnBMVGtJdzlsc0VVNnZXQ3EwTEc3QmRIajg3Ty96MmkKMVpTK1liaEx2cTJjMFE2V2ZPWkZSYnBRVVdLUWV5QmRmb3hQSFFJREFRQUJBb0lCQUhZeGpxTWJpSmN1VkFHWApjSDlFbjdqdTJPYlVsT0dnUVpJcGNpRy9wMVYvb2JOYkV5R29DRG5NeERlakN0bDg5RHN4Y25JanJ0cUZLZzc1Ckw5T0VZWFBMS1dWVEZRMzNwZWZMbXgvMkc1UDRkNVBET0FabU12UGtTNXZSdDV4c2h4aGVzNVR0RlRIZjRiTDQKbE44ZGNITWJ0VnNZa2JhMldLWHQxUVBCTXlXMzVuZE9uMlZhbDlKaGFQTTNNVVROQW93UDZCQnRIdllMMkVxbApuRG1kcVdQdVh2RW9HNm83bmFuRkRlK0VUWUY3dTBlV3hlS3M1Zms2c3FCUWlGOWVDTFZjYUVHRmdlNmU1S1hqCmZ1bUtVTjRqZFZmTnl2WWZBcHVRd3Q4T3JGYlJEeG5aQUhYc0lEY0xjRlQ3RzBRY2pyNWNwbGV3QTk3YTdRemEKZUZ1UnRFRUNnWUVBMmFoRjdXQlR5RjRzZmdDa0J3ZHlDWVJ3S1NrdkI0ZmpLWlkyUm8rMVNBMGpEZWUrZ3U1RwpHckNHeFpLaWF6WG5kUVBBNGx5ZnQrVitaREZSeGkwb054SFlQK1dlcDRYcXNFRWtmRkZGamI0bXFRcFpQSmdaCjVFdkZnaWl5WWs0WG5KSUVBMnRIWVFGcUM3SmNDd05GcVFkNHQwVUlMWW9yZTJPQ1dMNWdyd2tDZ1lFQXhmSFkKK3BNcEpUbzJsU09nOUJIRzBmMjVjeFptMEdqT0lCWUIyTlZXTkdlc3FGN1VwMUdZS1lqQnNCQ3hjeUkvdldGagovcXNXMXZybWpWVnlBNVNXQVBpblUrUFg2Um9EOHdwWHhoYVpFZ1o2YmdlV2orckU5MEJ5QWkrdDJkNVFSdDRvCkovV0JxM00zK05RNUFZemRobFV1c3doN0V1TlgvUGNYeWJFOTBIVUNnWUVBcXVWTnFsamt6OERwakRGeW1MWkcKMnFRcThKYU9mNG81V1ZEQTR0dzVDUTZQaEg1OS9nMlo2NkRJNE40R09zbURKMFJBTVR0cWlKaGZpY21UbkZlZQphTWJSRlRKMFJMS0lGOFcrSVFJcTYyVHVzL0VWS2RkL0ZOcE5oS254amZBazUrRloxMWxuSFFwZ09qamJ2aVhlCmp4MzNzV1k1U3BCZkhhMS9EYkRFOXdrQ2dZQlRpOEZGK1lqYlFwZTVHT0dkUWtlRmFDNjJ5WlM1a0JLMzdqSDMKWUF2VGNKS3FPZVJOZnAzWG9mWUdKdldPbjcwQlpMSzgwVitCZTBLR0VyTmRtWUE2aHJpeEtyQjluVkpmYVZVawpzWE1IN1o0TkJMemluM2RrMkZtR1hMTm5Dbk1kaGpTeXNPZDdBdFZ6KzdiWDFhbkdRZnZFNnVadlVXOVl3TDNVCmppK0Y1UUtCZ1FDeUpIUUZHMVFUTG9uWUU2K2MxOEhvMS8vNDAvNVBMZWJUZ0RWdWRuM2RCQlhLbGZ5N1kzRTgKd0JXaXJQeTBHYkVaVWx5SkhyZWpSenByb3B6OGRYdi9yZ2VDUE9TcFdlV2VOY3hRVCtNeStRTjhNNnMrYzF2bgpSRnZlMmRjRlk3RStndWp2ejRhZXcrY0pGdzhaSEw0VStybUE0a3lZOUQ3ZWhIQnllYjl6ekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.154.131.245\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.7.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-centra-default-pool-6e93e17e"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-prod-centra-default-pool-6e93e17e-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-centra-default-pool-6e93e17e-yaax", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.217.59", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "7Ye0W7oecuw=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.7", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-prod-centra-default-pool-6e93e17e-yaax", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "epx-_16_p0Q=", "items": ["gke-redditmobile-prod-central-f140a72b-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/cicd-staging/instance/6259118278657587085/,instance/6259118278657587085,project/cicd-staging,6259118278657587085,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-12T13:28:02.723-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/disks/gke-redditmobile-staging-default-pool-cb6fb0ef-uwx9", "type": "PERSISTENT"}], "id": "6259118278657587085", "kind": "compute#instance", "labelFingerprint": "PmdZM3nQwE0=", "labels": {"gke-redditmobile-staging-27f4251f-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "USR_oPvUSa8=", "items": [{"key": "cluster-name", "value": "redditmobile-staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNakNDQWhxZ0F3SUJBZ0lSQVBCOVFGaGI3ODBoT01kdGI4Mm05all3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UaGFGdzB5TVRFd01qRXhOelF4Ck5UaGFNRUl4UURBK0JnTlZCQU1NTjNWekxYZGxjM1F4TFdFdE5UVTJPRGt3TVRjMk9UQXlMWEpsWkdScGRHMXYKWW1sc1pTMXpkR0ZuYVc1blFERTBOemN4TlRneE1UZ3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBdwpnZ0VLQW9JQkFRREJiYUprcmszeXNvVUZIbGViY3ZKTjhvY0x1Z2xQL3ExbVlxVzYwanJpRWtKTktROW15VVN1CjlacmZhN0JSNXVmS0NrWExhcDJmV0ZpZG1WeXZVMWFZbEFhaGhiL0oxUVNXZFdIMVYxeFIyMjJML2xtenRWQkYKWHJ1cTlaRzdiWjBYWm5UbExGcUNoUGx4UmFYNE1ERDR5MUZRUWhmUEgxS04wU242T1prNS84ZDJYaVd3YmFOagpucjlkL1ZHQlNOc2tBWVN2aHM1d2JTNHFWWitWVmtxY1Y5djIvREtDY3hiY2dYekxueWRkMStNZFdYenpLWGdXClh5STZmay8wZlQ4V2ZzbW9yZTFrSU5peWNSa1ArdVFPYUFYNWpiQ2NZVTdndUJxSC9ONnY1NXRXUFRlNGQ2VCsKNTZVajVRUVB1ank5VWRWYjc5bHFFZnNkZytrY280VEpBZ01CQUFHakl6QWhNQTRHQTFVZER3RUIvd1FFQXdJQwpCREFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFOeS9yUGdkdStQM2hlClQzdDlqSzY2OEhCZjlucEV0aTdKUDQrOHFKejZZdnNjUHVYYTQ0K3MzZ2l6U2owd0R5YktwSnlKNXB6Wlo5V0wKNWd6MWZud2NmZ3I2Q2YvbnF1bTduZm1nUU1Qb0hTc0loK1FxMk02bmJnWHV0eTBhKzBXS2lnRUNqQklucHhITApLODFPNW95YW5YNmZtUGEwVjhwWkk4R0lhZmRoR0dHNjJJVFR2QlhVbHRia05obzY1VEdEQkkyNlU3VlJuUFZICkxpVENqZ0tmQXA2QXBpVE9ncDljMGdVWVE0WHZoSkVSWHN1SHFWTTJyWWw0aThlSHhidXMwUXpYWGJ2MnlYc0kKL3pKTWVQdXBuZUJZWG0rUjQ3ZWlPYkVqS0lTMFBjQ1djOGRQUlUxRXRNWkNkMzV2SFo0QnV0V2s0UzdNSk5Odwp1bTF0dERUdgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:41:48+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-staging-27f4251f\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: kXWELnGQVn9EVh6g9yUjBkP03kKgmfocRiapcKgjTbU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUxFYi9yc3BYd3UzUUVoRzg2Q0ttRzR3RFFZSktvWklodmNOQVFFTEJRQXcKUWpGQU1ENEdBMVVFQXd3M2RYTXRkMlZ6ZERFdFlTMDFOVFk0T1RBeE56WTVNREl0Y21Wa1pHbDBiVzlpYVd4bApMWE4wWVdkcGJtZEFNVFEzTnpFMU9ERXhPREFlRncweE5qRXdNakl4TnpReE5UbGFGdzB5TVRFd01qRXhOelF4Ck5UbGFNQkl4RURBT0JnTlZCQU1UQjJ0MVltVnNaWFF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXcKZ2dFS0FvSUJBUURJbnJLdy9RenJhKzlleHJYeVZoNUVDU2d4UkE1dnNicHJrZDYwNmZvMkFMcTU5bWNrV2t5WQpBMlNSeTUweXEyMU12aGk5YzdoWXc0c0JjL3lxQllmWGMzSTNUL0tMYzNPTis5U2hNN0J6VzJqWENuekpUZkF3ClZnWS9pUnpRUlJJNlMxTEFLV0FSVkMxUHhUc0tua1N5bmw2TzBaWk1jdnRKMVV4WHE5NFpKSDV5SkRhSUZvK3AKZ1pHdTdKSGdBNGkrbW9Pem5JclJtLzJGOUlFb21hTGdWQ2docVMxUW0zRGVuczBNS0R2MFR5ZHY2RDJqWW94cQpWdE56cVBoK25obG1Hc1ZxZ0FMWno2REp6OEY2bWFsbkYxV0hJS3lHdml5a1FNUXZoeFdyb3NnWXFVWndML2pEClUzbm1sd1QxdDhvS1pXNURtUDJPOFNIZFpQQzlrN3E1QWdNQkFBR2pOVEF6TUE0R0ExVWREd0VCL3dRRUF3SUYKb0RBVEJnTlZIU1VFRERBS0JnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQ0wzSCt6aDlJLzkxUDVUbTY3YlF1MzJyNktnbUJSSXhHUExqUkdmK2pIOXJ6b2t3U1NUcU9ICk5NaVFPSEpvWURDNGF3Uk8vMlg1SGJHN3hscHZjMjMzYnVVWDFxRWoyd0UrUE5vRi9ZY2tMZGpKSXp5RVJGb2kKMzFnemhhQnZBY3BZVnowb1ZReVNEd1VJL0ZsdEpCRXBQVHF0S2tLMzcwRC9EdzNOWlZLQjZzREg2aFF0d1ZZTwpra05QZlVUMUFnK3NKTTdOVmlMeUhsRytuZHlSWHF1Q0xsdFR4Y3c2U3oxdmdRUkFzQVpvR1lYcks1UmtIK1hNCkRoS2xOb2ZHNWd2VjAwekJMRnhTcDBxVzJmR1h3Z09Ia3BPcEVwL3F4YWNlb3ZpVXVLVy94WVRDMWJxdU1tS1IKUDYycGdKdTZJaHp6OS9pbWNaUG5yTjJoMFNMS2cvM0EKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeUo2eXNQME02MnZ2WHNhMThsWWVSQWtvTVVRT2I3RzZhNUhldE9uNk5nQzZ1ZlpuCkpGcE1tQU5ra2N1ZE1xdHRUTDRZdlhPNFdNT0xBWFA4cWdXSDEzTnlOMC95aTNOempmdlVvVE93YzF0bzF3cDgKeVUzd01GWUdQNGtjMEVVU09rdFN3Q2xnRVZRdFQ4VTdDcDVFc3A1ZWp0R1dUSEw3U2RWTVY2dmVHU1IrY2lRMgppQmFQcVlHUnJ1eVI0QU9JdnBxRHM1eUswWnY5aGZTQktKbWk0RlFvSWFrdFVKdHczcDdORENnNzlFOG5iK2c5Cm8yS01hbGJUYzZqNGZwNFpaaHJGYW9BQzJjK2d5Yy9CZXBtcFp4ZFZoeUNzaHI0c3BFREVMNGNWcTZMSUdLbEcKY0MvNHcxTjU1cGNFOWJmS0NtVnVRNWo5anZFaDNXVHd2Wk82dVFJREFRQUJBb0lCQVFERy9wTWtkM3lQTC9xNQpPY1ZUNFJRWVREVHYyUit3cnN2STAySGlkWXRZY1pURnpLRTJMOU4xblRmdVhkZEpZVDBET0RQMkI0aTlrd2lZCm9tSG1pNkhZbFl5ZlRNKzZmd1FKdTllSEpteEpvRXYzc1ZGaG84c3hSc0xmMXJNYjZzZFB4MU1IaElMajdXa2MKalBncGFoK2VSUFJxR1g1SnltdHpLdjJVb01lbWl3aHlNQm9aTzI5YUJBZkFCWXBGOERhdVNKQXpNOXNZRkRaMwpRMSthTy9Kc2gyQXFsUUh2UjBneEdoQThROU56akJJYkpnek14Z2pSTER4NTdBS0puVW5tbEFmaCtXbk9MRWI5CmVzanZ1eDJGWEJ0dHFhVHdvNHlNMmFnMmpuTW1LeVFGTVlhVmRMVCtCdHFDT0NoS21wR0RJN3VQUkZXditrbmMKM25IVXVEdDVBb0dCQU5vK1pydExPMVQrMTJUSjVFMk92S0hjLzJ1VG9WWk1FUDNhWkFZV1gwdTZSUGk1Q0hwTgptWDdpQzBKUWk4OS9zUGlCNUx3TDM2cTRURnpIbXRMMjMxWGxEZ0JWSEVCQS9DNlhQUmVRQzVMblJCbWJmbzVuCnVWTll2bTZVY0R3aWd5N2l1TDFGY1ZJRnd5QjhpdHk5NUFXY0l1OFhETTU1enVZcXJOVElOZVd6QW9HQkFPdFQKeFQ4RzNldW5vb1ZIOTgzd3VJTjVUZW5hYXlIektLRjVFaHFRMHVKTnJXaElhdGI5TkxlaFlIbXI5ZlljTzYxVwpmNnF4eUhBYnJCbXBWZ2ZrdzRQVFdUam5Lc1RUMjVQZWh1TWVkNEtBOC9EWWIweE9XbHNoNmdNd1B2enR4N01MCkZrV0RzNGREcWlKQ3lqY3dEdEtUMXc0SlVWcFVXeVd2L2loSHRqL2pBb0dBZnV0bFVTektQMzdKQXN0S296UU0KVFZHNWxQVlJFVi9CVGZBUTFWMXpaQlhhZ0k4UytCVmkyK0JYVGVTTHVrdDNQcjVEcUh4N1FjeFdWR3FjaG0yZApxbFZBRkQ5cTQ0OG5XVzBJMFVnckF1N05zdHF6K2RzbWN1c2NMRERWS0pPbG1NR3ZVQnN2Y05UN0NreURjU1paCmtrMmdIMDFYWEVpSVkyQ1VERmEyeVhNQ2dZQnRMVWMwajNZRDc1ajU1c0t6Mjd0dTI2ZG5HRHRkMjliODJ4T28KR1lxTkRXYW5HL25kVmtuUDYrRzdjU2xDamlTdHJaUzdWNUhiV1N0R0dJYmVVS2JZa1FReTN5UzdmbUsvdnB5cgo0Q1duK1RXemhtWlVhNEdHQ0R6dVQ4TFpTMk83MENmOEJqY1RTVFEwZ3ZJWUdvYTE4WHJ6ZXlVd0dEVFZUa3BHCjI4WlU2d0tCZ0FVNmpweGVIYi9aaGkyRnhUZ21yM3dyVVRqUDZVRTdUOGQwS2p0L3pCYXVlYkNtdmFMSkVsTTIKelEyMVIxSjZzVksxSUlQbUxoSEZJcUU0VTdaYW1sNGJoclFzeTMwODNzalFUb3JtYWExOTFZVGYzckxvTUZRcAo3UlRWbFV1SmJiQ3Jxd0VaMHVzd3AwajNQZ05jNkwvSE5EUFRSUWlnTHFxcmhWOC9GTktwCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.199.113.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/556890176902/global/instanceTemplates/gke-redditmobile-staging-default-pool-cb6fb0ef"}, {"key": "created-by", "value": "projects/556890176902/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-staging-default-pool-cb6fb0ef-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-staging-default-pool-cb6fb0ef-uwx9", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.199.124.254", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "tdgdK4xe1zo=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-staging/global/networks/default", "networkIP": "10.138.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-staging/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a/instances/gke-redditmobile-staging-default-pool-cb6fb0ef-uwx9", "serviceAccounts": [{"email": "556890176902-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "PmdZM3nQwE0=", "items": ["gke-redditmobile-staging-27f4251f-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-staging/zones/us-west1-a"}"
organization/660570133860/project/cicd-prod/instance/6309677607169269941/,instance/6309677607169269941,project/cicd-prod,6309677607169269941,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-08T10:50:02.697-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/disks/gke-redditmobile-prod-west-default-pool-481e7251-xgjk", "type": "PERSISTENT"}], "id": "6309677607169269941", "kind": "compute#instance", "labelFingerprint": "ZiCwJhcirGU=", "labels": {"gke-redditmobile-prod-west-3470febb-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/machineTypes/n1-standard-1", "metadata": {"fingerprint": "U4UDtSVhH6s=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURORENDQWh5Z0F3SUJBZ0lSQU85bEVwekFSMTFPNWJwekVIa1pLMWd3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qUTVXaGNOTWpFeE1ESXhNVGMwCk1qUTVXakJETVVFd1B3WURWUVFERERoMWN5MTNaWE4wTVMxaExUSTFOakl4T1RRek5qazBMWEpsWkdScGRHMXYKWW1sc1pTMXdjbTlrTFhkbGMzUkFNVFEzTnpFMU9ERTJPVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUApBRENDQVFvQ2dnRUJBTVllMVZlRHU4eElhYkNvUi8zcUdxT2lldEoxajFlN1Q3aFFNU0VFQUw0OGRFWUZmM2dRClR4SmNGanhIWWcxTmRhSXkwUkdEQXFNVGZyTDRUdTlaL1cvc0Y4V3h2K29kMHdDQThsSmUwbVNJSjl1NDI0UysKMEQ0TFJJZ09OWmd4QUF2SFJTTE9DVTljVktOcW80S1FoL212WjBuYXdhVHQ4VnN2VzdWTHEwYXZmZXZVeGdqdwpETkRHUTJqbGZHN05seXF6WnN4eFZMNmNQU3NEWUlSS3g5TlpnbkdDMEZPZUdTOFMwM1NDazZyMkxXOXBqM0hkCk1DTk9ReEUweldKRkUxZTkzOXVVSE5MWlFHL09ieTF5RmFjb2ZpZjZXRkxPUHYwUWdIMXNHdmxZV096RGV4QWkKYkExKy8xN0VJUzJQb1JLWTVhdFgrS1FOSCtnVnFQenVBZ01DQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRRApBZ0lFTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdhMlJ0TkV1cGxFCkF3RFBlTkZ0ZlZhTmlkd1NLWGxkajNya2tIdFRIQUUyZ2dSVHFlVXJVQXZ3WVJDUlFtUnZ5T1dvaUhjdmpEMXUKVE1tTUhhdkZEQ3JlOTdIY21OUEdlTUtjeDhPQ0xBdDdSSXgycndTUmdJV2crWWE0UXpJVEtESUUrRmJZVGNyZApJVFozZGtDbDhibWdPMjhCWHh0eE16cWpTUUZsR0tCNklGTW9vUEE3ankwYWlBdW9xMWFRYmV1bVB0VkVESzhvCjdQSnR1anErSVR5NG9lYzhHblV1bnhPekdITEZoZytxQ25wN0sycWIrUHZ6TzlRZklsYytHVFV4WUpQRTRWZmIKWk43UDUzQlQ1d3pWTGhXYUt3aktVbFBHV3ZETXZTUys5QzlSb25GRmhXRU9QSzFzWkhtSzBtWTVVN0FqSUZlTgpmWDF1NEhmVlR6dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nCLUSTER_IP_RANGE: 10.56.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.59.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:42:43+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-west-3470febb\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: i9C4TB2r4rrZJ4jHOt8J340y25DJmBVG5rHUrZZfaIk=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lSQVBBSlJxdkZFME9KSmx6TWxpVkFySkF3RFFZSktvWklodmNOQVFFTEJRQXcKUXpGQk1EOEdBMVVFQXd3NGRYTXRkMlZ6ZERFdFlTMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApjSEp2WkMxM1pYTjBRREUwTnpjeE5UZ3hOamt3SGhjTk1UWXhNREl5TVRjME1qVXhXaGNOTWpFeE1ESXhNVGMwCk1qVXhXakFTTVJBd0RnWURWUVFERXdkcmRXSmxiR1YwTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJMHVXSgp3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMycVNJClpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNkhxNVcKL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3bzBVVgpwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEJrSDd3Cnc2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJvelV3TXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0V3WURWUjBsQkF3d0NnWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFyOEZDRHhyMEcxY3hOQ091dDVnblhZKytmMUFvTFF5UWRZR3BpUEMwWXdaOFpqU1J2TW9nClczTEx6bnlqZ0FnTGRXOUpTZHFoYW40cE9nWG9DbzBvcG5WbTRoaVd6dVUwb3FUQUo1eE0rendwVGozYUU2cnAKUnpmYkVMWVpPbnEzMXoxRW01Wkl1N21MbzBEYjNWam5odG11bHhJUWZQUjZ5SDcvOTYxYmRmWExWeVB0TGxuUwpvbTRIblQ2V3VCNE1yODhMaSs5QjdOQjVLMkd4dVZpM0Q2UlUyTnIzRDhNUGVxRHRMell1MTAweWdldEQxMzhaClkzckhObklSNVh2aENyb3B2QzNLTDI3VTRVdGdEMFBKTENzRHFhaHZPUnZKS3RkZGgzV3pUenh5RHV1b2FGV3EKVHJKZEVtVlEyZ1NPZnV2QlFsNjhNdFpJY1NtczBlVHRFdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdDJ2Z2xTd1p6V0w0M2pKams0aTBoT0V4bkRRbHBOU0VxcWVTMk55Vm1OVkJhWTdJCjB1V0p3N0ZNK0VDM1JLcG00MmtUeEpvV0JIaVNtUWRxNFJwQ2dudTNpK25yemN2UzZsLzBwYkVZQjlIOTVDZHMKMnFTSVpNQ3B3K0g2cFVYY3pNdW93VGt1U0JudVJURERBZyszNmtiVGs5d1cwcHc4SXpBekJHNk1hODdnMUZUNgpIcTVXL091Z2xWUmRRblZVb2l5UktZTTljY0VEYXUvRTdCYVVpWGx4RXQ1am50dnYwNy9weW45RTJ3YnVod1U3Cm8wVVZwaVZQUzdxZW1VLzhoVjI5dnh2aDNzZzJZbi9DcmVFN2RRODBhT08wS3AxaVN5N1c1TnFiNXF2R0dlZEIKa0g3d3c2ZjBzNXF2QlJaWFVPRDdSNVJ2UmhUb0xXKzVkVkdrQVFJREFRQUJBb0lCQVFDbGx6Q3p1NUszeDZoaQpBUi9BcStROUtvajlPbDdaeGpyWFRsM1docDVQMGdjeDR3UU8wY2RqOG9kSWdEUjBPMXFUNStNKzFOVVh5RHFoCkNQOUdwY3h4dkh0aVJ4YnBQaC8yRkJic0YwdFlsQTRna2k5RjNOQitGU211ZkM4cVVqNGFiYXEyZG9iLzlOa1YKZ2dZcnNFRWJza0dFOVdkdFVEdENrVnNkbnlnS2tyMHJtajFXem16V01jenFvMEU3TDZyWTlhWWJURkI0Ky9jcApxM293bjhlZVh4cXVGcjlOVGNiY2p5Nzl4V1JwOE9mZ0IzTzI2M3laRjhxRzVWTEpTYytlQ0crRGJmUjRWZXgzCmRmcTBxTnVqQmRZSllvKytneVlocVdtZVM2cFpvdW1mK3JUclFnaUZxWjlXT1l4aHRPRDFMM2tPaXVBQWZEQVEKSzhJU2JnM1pBb0dCQU5PUzZ6d1g4ZFJ2bWNUZ2ttamx4MlpBSE9PR1h2Zm5rQUMrM0pyOW9sVUpqblhqbnBzQgpUS0JueUxibkRVbk9NYVVsS0w1R2crSGd2dS9FMWZmdnp0d2lZTStwTDNtbEhBSkh3NmFqUFltd3hZYnprZlNGCjFza1NPMzB6SlZPYjFSeHdPblNsTDRYcmQ4bHhuSXN5OGFtZDVsZ3M2anRobHhCQ0JkcFhPTGNMQW9HQkFOM3YKb1ZpcnJPUkloNFh0OVJKd3FsYjhPMklSM09mL1NsSld4ZnVYUk41Um9wMTE4V3RMYkhQbmFNZUxlc05tenNuZwpOUUFCSC83OWUzanA1bDJtSGtXMTNRMVRacXl1ekRXMVFIdTBYVit5UTd5U0pGYVRUeFNqQ1lxV29CcXNhVWpCCmRsMkZjL2lnYnFrODRoM3NIYkV4NWxvY1hyS1JKZE02VHpNMmJraWpBb0dBV1BDa0Rxa0tNZ0dRSktFN0t2bWQKTHpDNGREVWlheGhmQXRFNUw3WjdyVC9OTVdXMFlQalUyNEdGY000RVdnaGgra2g2cmpJNmNwUGw4Q2xRd1YrQQpHQzRqZ0doZzJzUTcyQUdQRDlnRG9JUTlKUlB6UVZXYUN3Q3RIVjZJekhMdnpYcW9PQ3pRbzMxdTU3SG8ydU5aCmo3SWZDT1lvdVRtM0pWQjc0V05WSmkwQ2dZQVNxbnpmZ0ZEaVFsZGpwRWZnYlNsbWQ0Qm5GeW1GT2F0K2tWM0YKYzB1UGh6NHVFQ1ZsNk1vT1ZZQXlpRUNpL3BxVjBBMmxHbk1lZHlOVFlCakg5NWpFTkMrTFYyQmpWYkJITkI5ZwpTQ015VVVQeE1EbHVMcVdRRHNaV3FhUjltZEtoRStSb3FUaS95SDZHTFdDM000eXJ3bzZsTlkyaFp5UFBTREF4CkZucmdFUUtCZ0dnT2RFeENVUGNUVEIxWHQ4NDlaeWQ1ajJheHA2UWRnRXg5emIyM1MyMUV3WFZXNGY4bWdMb2kKTHBocjljZWZOVUZGOXBwWlF2WUxLaUR0bkNxUlBFeDUwekhTRXZvR3ZlWHpDSjkvMHo1bXU1ZVljdTVURC9ZegpKOThIYWk0V1JLbUs4aFZWdzJJUTVzUkc1OTB6WEkvWVdiUWZxbXBNTDgxTEFKaUhEcU1sCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.198.102.233\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.59.240.0/20\nZONE: us-west1-a\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-west-default-pool-481e7251"}, {"key": "created-by", "value": "projects/25621943694/zones/us-west1-a/instanceGroupManagers/gke-redditmobile-prod-west-default-pool-481e7251-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-west-default-pool-481e7251-xgjk", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.232.73", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "-v558ZBN-PI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a/instances/gke-redditmobile-prod-west-default-pool-481e7251-xgjk", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "ZiCwJhcirGU=", "items": ["gke-redditmobile-prod-west-3470febb-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-west1-a"}"
organization/660570133860/project/writetosyslog/instance/6552409745449832190/,instance/6552409745449832190,project/writetosyslog,6552409745449832190,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-11T12:33:38.033-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/disks/forseti-client-vm-1734", "type": "PERSISTENT"}], "id": "6552409745449832190", "kind": "compute#instance", "labelFingerprint": "yMrdi1zJJ3U=", "labels": {"goog-dm": "forseti-client-1734"}, "machineType": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "1En0XbJ71ks=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch writetosyslog --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1734/configs/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1734/configs/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-1734", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.232.222.53", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "hrtZ4XGuZFw=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/writetosyslog/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/writetosyslog/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/instances/forseti-client-vm-1734", "serviceAccounts": [{"email": "forseti-client-gcp-1734@writetosyslog.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/6672588754404331314/,instance/6672588754404331314,project/cicd-prod,6672588754404331314,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-10T14:17:01.354-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/disks/gke-redditmobile-prod-centra-default-pool-6e93e17e-yg8y", "type": "PERSISTENT"}], "id": "6672588754404331314", "kind": "compute#instance", "labelFingerprint": "epx-_16_p0Q=", "labels": {"gke-redditmobile-prod-central-f140a72b-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "pz0pNzCHFZ8=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes. \nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-prod-central"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lSQU02TDNHYUliTFBRaFJ5VExjL2pYWDR3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQkpNVWN3UlFZRFZRUURERDUxY3kxalpXNTBjbUZzTVMxaUxUSTFOakl4T1RRek5qazAKTFhKbFpHUnBkRzF2WW1sc1pTMXdjbTlrTFdObGJuUnlZV3hBTVRRM056RTFPREl5TVRDQ0FTSXdEUVlKS29aSQpodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU5ySjFCMlJ3cnhJSHNxUUNxVFovWXEvYXZQdVUydWpVR2FqCkVESndrRFNIUTRFZEliSndFSlpENG9tSVlVVzJDVVlEM1hweW1SMnNTd2VtaHAvbUlWcEhOOGF1Qk1GZ0VuUk0KSlUrdUQ1di9IZFB3Nm5hNHpobWpSTVg0Q0ZmV0UzYVkrSDJidTFjY0hKenRwVTZhYWh5b3dsSUVQckNwZjArQgpQTHI5VlRLZU9NMlg3aXVKNkduSlZEK29ETlhlNVRPQVNnUWVuckpJb0ZIVFM4L0RaZlFTbEFFVzRsWlpQMnpYClJwa2ZuTDFFTUhBVU5wc2N6RGNvelM2VVVBVHhjYnhhQlVUYjVCL1BuWEMzWmVCZ0tsY29QWDhmNWEvNldaMTYKckYvMDF2RmloK2FHWEF3cC9FaVZiUk43a21xZmFkNm5EaktKU1BsNjVrbFdWbzRFa09VQ0F3RUFBYU1qTUNFdwpEZ1lEVlIwUEFRSC9CQVFEQWdJRU1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSHU4QlNSUjl5KzEvK0QyMktSMTRORlRQZXIyODczbzdjTnE4L3c0WVVXdytSaWtxYS9QYjhWLzYxRXEKYnplbkplQ3NUUjdWS21kQ1RYM01uMFhYQ1JKbXpEUEMyanhqSWt2K2YvWlV0NkxUMXBZdFhNYkFnTHZoSEx0cgpiK0YwZU90MWhTelFTZXRDazBZblUyQzc0U0t2VHlxZ1B2blJwalRlanZRZmZNL0JQeDNVVFlqQ0U3QzkwMjVCCkh0SlY2S0h5OXpCNzM4ZG50eTBaZTRmSkl5WjkydWhYSGg3cGtsdkdzV05zTUVLN2xHdHVDNldNRlhxNGljeWMKN3RWRzk5c09XOFVtL0lFbjB2R2RTRUFxVzhaMUQvQkppd2gyeEJSMHdoaXdYRkRob1lLbHpWNHBPUktiVXJyUgpWM0xTYnJrTXIxQTJoZXRTdU1nUmpmVm1YdXM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.4.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.7.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-10-22T17:43:18+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-prod-central-f140a72b\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 0e0c3a4eacbafa191e37ed8ab92c19eec87aeb6f\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: X6lvXl1D5ck0ETLYV2tObZafr6dMn8235hgKku_XEP0=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lSQU0yZVdaaFR0WWZ1RVNwcWVYSzUycWt3RFFZSktvWklodmNOQVFFTEJRQXcKU1RGSE1FVUdBMVVFQXd3K2RYTXRZMlZ1ZEhKaGJERXRZaTB5TlRZeU1UazBNelk1TkMxeVpXUmthWFJ0YjJKcApiR1V0Y0hKdlpDMWpaVzUwY21Gc1FERTBOemN4TlRneU1qRXdIaGNOTVRZeE1ESXlNVGMwTXpReFdoY05NakV4Ck1ESXhNVGMwTXpReFdqQVNNUkF3RGdZRFZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUYKQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxRXdkdElZTFZ1Z3R2ZmJIVUxaQW5pSUhJUGdXMFJpR054VFFuaWFiV0JCcQpMM3R2cmV2Z01mUHo0SDRITmg0dG9jOWYxUXpsL2l6OVFNdEE5VE1aUGQxalpaOHFtYWFQcDNYUFVYM0JoQjhxCjF5SmlNTk03bW9zcENhRTRGcmRlSmczNHZyZFF4RUlZNldXMUN6Y0JxUmxhd1ZrdjBaY2o1aTc3aHBwMnU3QUsKTzlQUGsvY0MwMWM1VFEwbXhacDZ0a3IyRStWeHl5emVLUndISThkanhRRUh2RFVhazlSTWRwMU5QOWgvRGNBbApvY1ZkT21rRDZoWlJNeUQzd1MyUG1JYkxjNmxKdXpPNTAxdEZCcExUa0l3OWxzRVU2dldDcTBMRzdCZEhqODdPCi96MmkxWlMrWWJoTHZxMmMwUTZXZk9aRlJicFFVV0tRZXlCZGZveFBIUUlEQVFBQm96VXdNekFPQmdOVkhROEIKQWY4RUJBTUNCYUF3RXdZRFZSMGxCQXd3Q2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQVlUVnFqYUtOY2FmRTVZa0pUSFVKbG42YlVUUld4VnRDNlhRcEYxdU85aHRuCmZYT3BtRWFBT0dXemlKenBrR0s1OC9vWFE1M1JiL3B5Q3hjMU5RNGkwOGxoTWpjd2FrQlM4Q0EzVEhhUlM1b0oKWlZIZzE5UUdxeTRHN3M5Y29wNGdkQ0hZUUYwZmdGVHBybFhocVl6bTFDWU5GQXdnN2kxblNkNCs5MUZndEhCcApCMkFjS3hIVGpHdmdPekhGWUN0NzRlT0hVSnk5bmhTUmk3R1lKcjlxZjFxelhmeFdPNzdDZzJFek9RVWVTWlBlCnZGVVA2a2ozczAyazE4Q2tMUjI5NDE1eGY1bmJCNGRWZTVNUTBLbUgyTFcvQXk2S21UQkNKem10QWdOMUtCVXkKTmZVcFN6NDJWWWx5Mi9ZelFCb3ZvUnVLdC9HbFF3QUgzY0ZBUWphYU9nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBcUV3ZHRJWUxWdWd0dmZiSFVMWkFuaUlISVBnVzBSaUdOeFRRbmlhYldCQnFMM3R2CnJldmdNZlB6NEg0SE5oNHRvYzlmMVF6bC9pejlRTXRBOVRNWlBkMWpaWjhxbWFhUHAzWFBVWDNCaEI4cTF5SmkKTU5NN21vc3BDYUU0RnJkZUpnMzR2cmRReEVJWTZXVzFDemNCcVJsYXdWa3YwWmNqNWk3N2hwcDJ1N0FLTzlQUAprL2NDMDFjNVRRMG14WnA2dGtyMkUrVnh5eXplS1J3SEk4ZGp4UUVIdkRVYWs5Uk1kcDFOUDloL0RjQWxvY1ZkCk9ta0Q2aFpSTXlEM3dTMlBtSWJMYzZsSnV6TzUwMXRGQnBMVGtJdzlsc0VVNnZXQ3EwTEc3QmRIajg3Ty96MmkKMVpTK1liaEx2cTJjMFE2V2ZPWkZSYnBRVVdLUWV5QmRmb3hQSFFJREFRQUJBb0lCQUhZeGpxTWJpSmN1VkFHWApjSDlFbjdqdTJPYlVsT0dnUVpJcGNpRy9wMVYvb2JOYkV5R29DRG5NeERlakN0bDg5RHN4Y25JanJ0cUZLZzc1Ckw5T0VZWFBMS1dWVEZRMzNwZWZMbXgvMkc1UDRkNVBET0FabU12UGtTNXZSdDV4c2h4aGVzNVR0RlRIZjRiTDQKbE44ZGNITWJ0VnNZa2JhMldLWHQxUVBCTXlXMzVuZE9uMlZhbDlKaGFQTTNNVVROQW93UDZCQnRIdllMMkVxbApuRG1kcVdQdVh2RW9HNm83bmFuRkRlK0VUWUY3dTBlV3hlS3M1Zms2c3FCUWlGOWVDTFZjYUVHRmdlNmU1S1hqCmZ1bUtVTjRqZFZmTnl2WWZBcHVRd3Q4T3JGYlJEeG5aQUhYc0lEY0xjRlQ3RzBRY2pyNWNwbGV3QTk3YTdRemEKZUZ1UnRFRUNnWUVBMmFoRjdXQlR5RjRzZmdDa0J3ZHlDWVJ3S1NrdkI0ZmpLWlkyUm8rMVNBMGpEZWUrZ3U1RwpHckNHeFpLaWF6WG5kUVBBNGx5ZnQrVitaREZSeGkwb054SFlQK1dlcDRYcXNFRWtmRkZGamI0bXFRcFpQSmdaCjVFdkZnaWl5WWs0WG5KSUVBMnRIWVFGcUM3SmNDd05GcVFkNHQwVUlMWW9yZTJPQ1dMNWdyd2tDZ1lFQXhmSFkKK3BNcEpUbzJsU09nOUJIRzBmMjVjeFptMEdqT0lCWUIyTlZXTkdlc3FGN1VwMUdZS1lqQnNCQ3hjeUkvdldGagovcXNXMXZybWpWVnlBNVNXQVBpblUrUFg2Um9EOHdwWHhoYVpFZ1o2YmdlV2orckU5MEJ5QWkrdDJkNVFSdDRvCkovV0JxM00zK05RNUFZemRobFV1c3doN0V1TlgvUGNYeWJFOTBIVUNnWUVBcXVWTnFsamt6OERwakRGeW1MWkcKMnFRcThKYU9mNG81V1ZEQTR0dzVDUTZQaEg1OS9nMlo2NkRJNE40R09zbURKMFJBTVR0cWlKaGZpY21UbkZlZQphTWJSRlRKMFJMS0lGOFcrSVFJcTYyVHVzL0VWS2RkL0ZOcE5oS254amZBazUrRloxMWxuSFFwZ09qamJ2aVhlCmp4MzNzV1k1U3BCZkhhMS9EYkRFOXdrQ2dZQlRpOEZGK1lqYlFwZTVHT0dkUWtlRmFDNjJ5WlM1a0JLMzdqSDMKWUF2VGNKS3FPZVJOZnAzWG9mWUdKdldPbjcwQlpMSzgwVitCZTBLR0VyTmRtWUE2aHJpeEtyQjluVkpmYVZVawpzWE1IN1o0TkJMemluM2RrMkZtR1hMTm5Dbk1kaGpTeXNPZDdBdFZ6KzdiWDFhbkdRZnZFNnVadlVXOVl3TDNVCmppK0Y1UUtCZ1FDeUpIUUZHMVFUTG9uWUU2K2MxOEhvMS8vNDAvNVBMZWJUZ0RWdWRuM2RCQlhLbGZ5N1kzRTgKd0JXaXJQeTBHYkVaVWx5SkhyZWpSenByb3B6OGRYdi9yZ2VDUE9TcFdlV2VOY3hRVCtNeStRTjhNNnMrYzF2bgpSRnZlMmRjRlk3RStndWp2ejRhZXcrY0pGdzhaSEw0VStybUE0a3lZOUQ3ZWhIQnllYjl6ekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.154.131.245\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 5919928749e49909a094883f544d8aee1d2a5c65\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5daad29411b6af81a486f64b507f414951a042c1\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.4/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.7.240.0/20\nZONE: us-central1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-prod-centra-default-pool-6e93e17e"}, {"key": "created-by", "value": "projects/25621943694/zones/us-central1-b/instanceGroupManagers/gke-redditmobile-prod-centra-default-pool-6e93e17e-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-prod-centra-default-pool-6e93e17e-yg8y", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.155.175.53", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ajbpLrWZKwY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b/instances/gke-redditmobile-prod-centra-default-pool-6e93e17e-yg8y", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "epx-_16_p0Q=", "items": ["gke-redditmobile-prod-central-f140a72b-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-central1-b"}"
organization/660570133860/project/inventory-db-cleanup/instance/6690758214081551138/,instance/6690758214081551138,project/inventory-db-cleanup,6690758214081551138,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-11T16:22:54.070-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/disks/forseti-client-vm-0753", "type": "PERSISTENT"}], "id": "6690758214081551138", "kind": "compute#instance", "labelFingerprint": "aGqBz_urzi4=", "labels": {"goog-dm": "forseti-client-0753"}, "machineType": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "FG6STDvBKj8=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-inventory-db --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-0753/configs/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-0753/configs/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-0753", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.225.70.216", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "uM9qcRMXul0=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/instances/forseti-client-vm-0753", "serviceAccounts": [{"email": "forseti-client-gcp-0753@inventory-db-cleanup.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c"}"
organization/660570133860/project/writetosyslog/instance/6732773473956417629/,instance/6732773473956417629,project/writetosyslog,6732773473956417629,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-11T12:27:47.210-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/disks/forseti-server-vm-1734", "type": "PERSISTENT"}], "id": "6732773473956417629", "kind": "compute#instance", "labelFingerprint": "UuQVw8DXnT4=", "labels": {"goog-dm": "forseti-server-1734"}, "machineType": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "piYSJXCMeQg=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get update && sudo apt-get --assume-yes install google-cloud-sdk\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch writetosyslog --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Setup Forseti logging\ntouch /var/log/forseti.log\nchown ubuntu:root /var/log/forseti.log \ncp $USER_HOME/forseti-security/configs/logging/fluentd/forseti.conf /etc/google-fluentd/config.d/forseti.conf\ncp $USER_HOME/forseti-security/configs/logging/logrotate/forseti /etc/logrotate.d/forseti\nchmod 644 /etc/logrotate.d/forseti\nservice google-fluentd restart\nlogrotate /etc/logrotate.conf\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"writetosyslog:us-central1:forseti-server-db-1734\"\nexport FORSETI_DB_NAME=\"forseti_security\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-1734/configs/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-1734/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-1734\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n\n# Use flock to prevent rerun of the same cron job when the previous job is still running.\n# If the lock file does not exist under the tmp directory, it will create the file and put a lock on top of the file.\n# When the previous cron job is not finished and the new one is trying to run, it will attempt to acquire the lock\n# to the lock file and fail because the file is already locked by the previous process.\n# The -n flag in flock will fail the process right away when the process is not able to acquire the lock so we won't\n# queue up the jobs.\n# If the cron job failed the acquire lock on the process, it will log a warning message to syslog.\n\n(echo \"22 */12 * * * (/usr/bin/flock -n /tmp/forseti_cron_runner.lock $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh || echo '[forseti-security] Warning: New Forseti cron job will not be started, because previous Forseti job is still running.') 2>&1 | logger\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-1734", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.202.22.1", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "_ko2kSWWHb0=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/writetosyslog/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/writetosyslog/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c/instances/forseti-server-vm-1734", "serviceAccounts": [{"email": "forseti-server-gcp-1734@writetosyslog.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/writetosyslog/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/6775602385358576462/,instance/6775602385358576462,project/pso-cicd8,6775602385358576462,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:06:57.214-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-canary-east-default-pool-e4705366-c7ul", "type": "PERSISTENT"}], "id": "6775602385358576462", "kind": "compute#instance", "labelFingerprint": "7s-VnV1Vfao=", "labels": {"gke-canary-east-67b092c4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "rJQ4SdUTp7g=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQU1TR0RTRFp6Y2RRU1cvODlqZmFMVGt3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRaV0Z6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RaV0Z6ZEVBeApORGM1TlRNMU1UVXhNQjRYRFRFMk1URXhPVEExTlRreE1Wb1hEVEl4TVRFeE9EQTFOVGt4TVZvd09ERTJNRFFHCkExVUVBd3d0ZFhNdFpXRnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdFpXRnpkRUF4TkRjNU5UTTEKTVRVeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUhPaGp2aVU0Vnl0NEcyVgp5N0ZEZHg0RjEzeWRVek5TMElUL3U4VEVQWGhxQ2tBejhxZVpPaXE4aGRaS2R0b1hFeW8rL3dUTnBOVEozeHNECjREVkhzUW5UamViWktRby84bytpdGpWdm1pRUE3MUZ4T2hPMytxekJidmt1cnFrOXVmbjJGSld0ZDNacm1MeUIKYVhCSnVLYVY4UlZGcTFMRm5vUEFxcUduM2krbWswS0lGRmlLM1U4WHlpbTZVVzFuUHYyaElUSmJNYk1qZm5sbwo0YjNzN3V4ZEtCNC9LZzEyOWh5M0hwdzBtVDBXeStkbG1Qam1RdmoxQ1VNN3NOTXJDSE1TbXMrYXJjdDZtd0M3ClRLTW5BaWVXa0xhalgxSUt6NU9MZGNoTS9LTGxRbEp1WUJsZ2p5dENMQUo3MjhTYWlXL1dJY0lpUVRZZFdsVUQKUENsZmZRSURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFueS9LRHIzWldESmNFS0JrY1ZQbTVVU1RUaThOZ2Ztc3psM2pCMG0xCnhoOGxzVjM0bUFhaVZOUndIWjRtUU9TTXBHSlpSdmFoZHRMN3hZS085TXlpbkFaRitzU00yTmJBamhLYms3eEEKbG5qNHZGNHZySHBURXlQd29FelBWeklpcmE4YnZ0MGlUUkpzOUVkY3hNVlZMZ1dnTXpNNzNPWlpjMHVNUFBNNwphT25TR0ZIU3dTeld0SGN3VlBzaXVVb2FHY2w1azdaRHl3MEhLazNnZWdXMFdyQUdCckF4alZZZUM5dXJ0SVc2CnRUMFNuc0tPZFFsQnRjNWVuNE1qbjlBR1dKNmRjYnYwbzVTUGlXYk0xbVI4WXNlS092dy9lemM5RDVsWGprb1AKUXpVREdaLzhlUWhLaGR6S1VvRDVqMzhObHB1YnZCd0ZqNnJtT0ZEWURMdzZhUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.48.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.51.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:48+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-east-67b092c4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: LVVOPEDi9t_-UN067s0d7mbSFoBZHNusRlqsbcaRc8U=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lRSmpwN1RwTFZBTzRDVjVJcVBkWFhNVEFOQmdrcWhraUc5dzBCQVFzRkFEQTQKTVRZd05BWURWUVFEREMxMWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMV05oYm1GeWVTMWxZWE4wUURFMApOemsxTXpVeE5URXdIaGNOTVRZeE1URTVNRFUxT1RFeVdoY05NakV4TVRFNE1EVTFPVEV5V2pBU01SQXdEZ1lEClZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFYeVQKNzdBQlVvSmg5WVZSbHVwSDJsei85dldFd1lURzJTRDBtbS9wMXVoQWRON2kvN2V2UzdwMGxlSzRCZms3SnRjbgp2eDNDVXJKNCs4bldxVE5jbUkrTlBSVzdhdnphczd0M0NTL2hXMEZaM2tsaXRUWnpOalMxaG9GNTQ0aDhmMUVBClpEN0lkQTlPQndOTGhmNXQ2WjBTeGdKeTBLZWtKTXVpOGQvNEZsd3VSYnJBSGZBeEdVamtwRWNLRzYxSmI1UmEKQ2lXRzQ4SHZOWlAySVdsaFR3VW96ZlVtbmpDYTgyUFdhZkxrZmZOZk1zb3p2WVBnSTFzeFY4aDdQbnpkc2JuSQo2YjU4QTNseHEwUmtRTWdvNFlzaGpRaUlqMDNIa2t0RmFvNWc2bHhWU0tMYTlHRnZhL0V5VjZWTGY1K29FZVJvCnNTZ2hTQzRjRlNTNjl0OXNQd0lEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3cKQ2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZWJGUQo0ZU41clg5ZkpLbjdkeHFKcUpmV3lFekY1dWtjY0V5TFUzM0xoZ2VPY3JoUlduQ2xoVFV4bEVCVFdVQklLcWc0ClJKVldhN1BQYXZOZXIrK1BnNG9Zeml4dmZRVUd1TFl0cE5aanQ1VmJpamgrRTBCaGlhQnZiek5zVnBVOEVpQjEKcjRPUEJqTjI2cEJ4M1RSS2FCZ0J0OGxqaVpJR3pVWk1Fd3A5cE9CVTljVGJLVWk0cG5kSTB4SnY5ZFNqREg2RQphcnE1emx5bG9IUVI0d2tyb1VhdDJmTjJ3MTE3VTl1TW9DUVZMMWpvRWcrS0kwRVRNaXRkQUNlbzFzamdvd3dSCmtTVUtvTXhOZDlOU3pZbjFrQXlGUlFsV0Z0Z1UxUlE5UHEzYnFpNDdlUmFBR3VhbkR1TW1hQzZyZjdZaHFDTEcKUElXWGhPQWFuOXptQzZERjVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMVh5VDc3QUJVb0poOVlWUmx1cEgybHovOXZXRXdZVEcyU0QwbW0vcDF1aEFkTjdpCi83ZXZTN3AwbGVLNEJmazdKdGNudngzQ1VySjQrOG5XcVROY21JK05QUlc3YXZ6YXM3dDNDUy9oVzBGWjNrbGkKdFRaek5qUzFob0Y1NDRoOGYxRUFaRDdJZEE5T0J3TkxoZjV0NlowU3hnSnkwS2VrSk11aThkLzRGbHd1UmJyQQpIZkF4R1Vqa3BFY0tHNjFKYjVSYUNpV0c0OEh2TlpQMklXbGhUd1VvemZVbW5qQ2E4MlBXYWZMa2ZmTmZNc296CnZZUGdJMXN4VjhoN1BuemRzYm5JNmI1OEEzbHhxMFJrUU1nbzRZc2hqUWlJajAzSGtrdEZhbzVnNmx4VlNLTGEKOUdGdmEvRXlWNlZMZjUrb0VlUm9zU2doU0M0Y0ZTUzY5dDlzUHdJREFRQUJBb0lCQUUwMHVYZUVTbVloZXZYRQoyaVhlNGs5cE5MU0dSQldNUkRHQUJwWFhoVlRRTjRkTW1BRnMxM3RtbWdVZXNmaVBFc0pRS3pLbHU0SVd3MFFqCjBYcnRkVDVESkF3RVVQdzNKNHk2YmlrblpMT1E1Y1JLKytTWEpZRmovSVlCU3loclVzTGtjMlROZzhiZFJoV3AKTG1YdUJxZm13MFJTM0Z6elU1eHUvS1hHbnJ6T3ZqOElmaENBenBFWlRpdXZjcUQyRkl2NitOS0UwbDY2Wm1EdApySnhEQmVKc3gvZUlpM2ZrcU9YdmZzRlBLZ0ZFVEdmN21pZUNIVURoY1YwZlQ5U1MrNm5rQzhzNUF6S0lPVXRYClZKQ0FodTZ3bFlhdVZCQTJLN0ZXaFdnTThhUHRaMWxoOGE1N0JicHVDWkpkUDYzOEtybzEyRlh3Y1VGRzk5NW4KU3dsbTY3RUNnWUVBODFabzZwYWJIaDhyUHNPeTNFYVIraFdlSVlDY2ZqNGs2SzB6SVdnWUxDVG1GUGlZK2JrYgoxT09WRVpPSld3S0ZCT1k5ZmJJMUxrLzZ1dElPb1QzYm5FVXhESy80enhsbi8vOWVTTVBId01KcDJMQUNVTEpoCldCcGxZK0tGeHJmT2U3UXdvT1VadkpIUlE4Zm1US1VaOUxhTlZLcTgvQktjZ0U1R2V0QW1uS2NDZ1lFQTRKaUQKVXdSMGhzeTFkTlEzTFZJRDZMVG5EdHhjN0RrVEJGdXVveUFWaDM5Ymh4bk5TL0dUcUhMNitJdVBnc0pXZnhBNQpoTDhEOFI3M2xKTjZ2WkJsZFJadUNidC9Qek5JL3lQUmRObER4UEh1blJ3eEEvVU5EbUdpWXdndnVrelZRUDVBCmZJYWdSdnh1bGlDaXYvU2I0TzhWZ2tQSVlTWDRLaVRUaXJSa0xxa0NnWUVBbXoxYlBaM0xaQklhY3JaQzIwaWkKUkZ1YVFHRmVkU09NUkd5S25CdGVvSHNCMWdzcS9OWGRMWm5yTmdWYnNaWVA2cXBBUEhwK2R3ZExPL2hhb1A5bgpwWEIyOUZNbmRtZ004MEtsa2VKbEExS0VXRnNoZnYzdUlGam1xaXlQajlFZmg4ZlM1aktDa3N5c0pvUFhKcnFGCnJwcnYyejM1eHc3UWpRSmk4R0x1M3kwQ2dZRUFyZytrMzJiNWhDc01pbEdadmFidFhxRXMzVWlOUDRud0loV0gKMythU3FPTmNKUFVyTlNzeE80QjQzcjBTYU0yQ1NaRmljbTJ6ZVdCOWtnbEdPN20zMTZtZGVDOTJxNTFzZWtmaApJY1RzRDZ0TU9UakxCLzBYdEVpWW1GV1UzN2FDSTQrb25KbWRoOFpGVWxaU3E1L0FXdkFQNUZmeDZOQ0xadVlKCmlGckx0WmtDZ1lFQW1QOTVETHE3MlF6K1R5empmcHpWa3g2OG1RS2lFSDgvQmEwNWkyenZXNThlWDZmY3lUV3AKSG9GMzRXSEQ3aWV4VW03Z1NucUFqVU0yZlRyYzI1U09kN2dVR2VmT0cwTTByRitkNWNNVzdFZDVlYlI0ekJRdAprTjZuVVZJRjMreEZESnJPRzl1M3E5Q3RBUTZVUXowZTRMU3MvMXdySzBwVE9Ib3hvenhIMTNVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.177.251\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.51.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-east-default-pool-e4705366"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-canary-east-default-pool-e4705366-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-east-default-pool-e4705366-c7ul", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.205.122", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "3AZWX1ZkJRo=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.9", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-canary-east-default-pool-e4705366-c7ul", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "7s-VnV1Vfao=", "items": ["gke-canary-east-67b092c4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/iap-1-174217/instance/6971555659758316094/,instance/6971555659758316094,project/iap-1-174217,6971555659758316094,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-07-19T10:20:17.982-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "i-othertag", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/disks/i-othertag", "type": "PERSISTENT"}], "id": "6971555659758316094", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/machineTypes/f1-micro", "metadata": {"fingerprint": "hJ37NzJU6z0=", "kind": "compute#metadata"}, "name": "i-othertag", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.188.11.124", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "QKLEg6y4xeQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c/instances/i-othertag", "serviceAccounts": [{"email": "941750202210-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "TT8q1SuDCVI=", "items": ["othertag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-c"}"
organization/660570133860/project/policyscanner-henry/instance/700968798417843994/,instance/700968798417843994,project/policyscanner-henry,700968798417843994,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-17T20:35:18.691-07:00", "deletionProtection": false, "description": "GAE managed VM for module: default, version: 1", "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/goog-vmruntime-images/global/licenses/appengine-vmruntime"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/disks/gae-default-1-dd35-bboa", "type": "PERSISTENT"}], "id": "700968798417843994", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/machineTypes/g1-small", "metadata": {"fingerprint": "CjKGYTPc01s=", "items": [{"key": "gcm-replica", "value": "gae-default-1-dd35"}, {"key": "gcm-pool", "value": "gae-default-1"}, {"key": "gcm-command-0", "value": "/usr/share/vm_runtime/vm_runtime_init.sh start"}, {"key": "startup-script", "value": "mkdir -p \"/gagent/metaOutput/\"\nwriteToSerialPort() {\nlocal timestamp=$1\nlocal message=$2\necho \"gcm-StatusUpdate:TIME=$timestamp;STATUS=$message\" > /dev/console\n}\nreport() {\nlocal message=$1\nlocal timestamp=\"`date +%s`000\"\nlocal log=\"/gagent/startup.log\"\necho \"$timestamp - $message\" >> $log\nwriteToSerialPort $timestamp \"$message\"\n}\nexitCode=112358\nreport \"STARTUP_SCRIPT_STARTED\"\nheartbeat() {\nwhile :\ndo\necho \"gcm-Heartbeat:`date +%s`000\" > /dev/console\nsleep 30\ndone\n}\nheartbeat &\ncurl -H \"Metadata-Flavor: Google\" \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcm-command-0\" > /gagent/0.sh\nchmod +x /gagent/0.sh\nreport \"AGENT_RUNNING_COMMAND;INVOCATION_ID=0\"\nwhile :\ndo\n/gagent/0.sh\nexitCode=$?\nbreak;\ndone < /dev/null 1>> /gagent/metaOutput/stdout.0.txt 2>> /gagent/metaOutput/stderr.0.txt\necho \"$exitCode\" > /gagent/metaOutput/exitcode.0.txt\nif [ \"$exitCode\" == 0 ]\nthen\nreport \"COMMAND_SUCCEEDED;INVOCATION_ID=0\"\nelse\nreport \"COMMAND_FAILED;INVOCATION_ID=0\"\nexit $exitCode\nfi\ncommandsSucceeded() {\nlocal timestamp=\"`date +%s`000\"\nwhile :\ndo\nwriteToSerialPort $timestamp ALL_COMMANDS_SUCCEEDED\nsleep 30\ndone\n}\ncommandsSucceeded &\nhealthCheck0() {\nlocal unhealthyCount=0\nwhile :\ndo\nsleep 5\nlocal status=$(curl -s -w \"%{http_code}\" -o /dev/null --max-time 4 -H \"Host: 127.0.0.1\" 'http://localhost:8080/_ah/health')\nif [ \"$status\" == 200 ]\nthen\nunhealthyCount=0\nelse\n(( unhealthyCount += 1 ))\nif [ \"$unhealthyCount\" -ge 60 ]\nthen\nreport \"HEALTH_CHECK_UNHEALTHY;STATUS_MESSAGE=0\"\nfi\nfi\ndone\n}\nhealthCheck0 &"}, {"key": "gae_publish_ports", "value": ""}, {"key": "gae_agent_bucket", "value": ""}, {"key": "gae_agent_bucket_path", "value": ""}, {"key": "gae_allow_ssh", "value": "false"}, {"key": "gae_app_bucket", "value": "vm-config.policyscanner-henry.appspot.com"}, {"key": "gae_app_fullname", "value": "policyscanner-henry_1-396458780154144562"}, {"key": "gae_app_zip_filename", "value": "policyscanner-henry_1-396458780154144562.zip"}, {"key": "gae_app_env_filename", "value": "policyscanner-henry_1-396458780154144562.env"}, {"key": "gae_app_nginx_conf_filename", "value": "policyscanner-henry_1-396458780154144562.conf"}, {"key": "gae_backend_instance", "value": "1"}, {"key": "gae_backend_minor_version", "value": "396458780154144562"}, {"key": "gae_backend_name", "value": "default"}, {"key": "gae_backend_version", "value": "1"}, {"key": "gae_dockerfile_appendix", "value": "\n"}, {"key": "gae_enable_app_engine_apis", "value": "true"}, {"key": "gae_environment", "value": ""}, {"key": "gae_has_docker_image", "value": "false"}, {"key": "gae_free_disk_space_threshold_mb", "value": "1024"}, {"key": "gae_full_app_container", "value": ""}, {"key": "gae_module_yaml_path", "value": "app.yaml"}, {"key": "gae_nginx_config", "value": ""}, {"key": "gae_no_appserver_affinity", "value": "false"}, {"key": "gae_partition", "value": "s"}, {"key": "gae_project", "value": "policyscanner-henry"}, {"key": "gae_run_http_unlock", "value": "true"}, {"key": "gae_server_software", "value": "Google App Engine/1.9.69"}, {"key": "gae_unlocked", "value": "false"}, {"key": "gae_vm_runtime", "value": "java"}, {"key": "google-container-manifest", "value": "kind: Pod\nmetadata:\n  name: managed-vm-pod\nspec:\n  dnsPolicy: Default\n  restartPolicy: Always\nversion: v1beta2\n"}, {"key": "shutdown-script", "value": "/usr/share/vm_runtime/vm_shutdown.sh"}, {"key": "gae_use_container_watchdog", "value": "true"}, {"key": "gae_api_verifier_image_name", "value": "gcr.io/google_appengine/api-verifier"}, {"key": "gae_use_api_verifier", "value": "true"}, {"key": "gae_fluentd_image_name", "value": "gcr.io/google_appengine/fluentd-logger"}, {"key": "gae_cloud_logging", "value": "true"}, {"key": "gae_nginx_proxy_image_name", "value": "gcr.io/google_appengine/nginx-proxy"}, {"key": "gae_health_check_interval_sec", "value": "5"}, {"key": "gae_mvm_agent_image_name", "value": "gcr.io/google_appengine/mvm-agent"}, {"key": "gae_use_nginx_proxy", "value": "true"}, {"key": "gae_health_check_timeout_sec", "value": "4"}, {"key": "gae_memcache_proxy_image_name", "value": "gcr.io/google_appengine/memcache-proxy"}, {"key": "gae_use_memcache_proxy", "value": "true"}, {"key": "gae_use_endpoints_api_management", "value": "false"}, {"key": "gae_iap_watcher_image_name", "value": "gcr.io/google_appengine/iap-watcher"}], "kind": "compute#metadata"}, "name": "gae-default-1-dd35", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External_NAT", "natIP": "35.232.239.223", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "gW7UItDKck4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": false, "onHostMaintenance": "TERMINATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b/instances/gae-default-1-dd35", "serviceAccounts": [{"email": "policyscanner-henry@appspot.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/appengine.apis", "https://www.googleapis.com/auth/devstorage.full_control"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-henry/zones/us-central1-b"}"
organization/660570133860/project/iam-explain-deployment/instance/7011555239929437526/,instance/7011555239929437526,project/iam-explain-deployment,7011555239929437526,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-08-31T12:30:01.965-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/zones/us-central1-c/disks/iam-explain-explain-vm", "type": "PERSISTENT"}], "id": "7011555239929437526", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "0AXfhpBkwEA=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch master --single-branch forseti-security\n            cd forseti-security\n        \npython setup.py install\n\n\n# Create upstart script for API server\nread -d '' API_SERVER << EOF\n[Unit]\nDescription=Explain API Server\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/usr/local/bin/forseti_api '[::]:50051' 'mysql://root@127.0.0.1:3306/forseti_security' 'mysql://root@127.0.0.1:3306/explain_security' '/home/ubuntu/gsuite.json' 'felix@henrychang.mygbiz.com' '660570133860' playground explain inventory\n[Install]\nWantedBy=multi-user.target\nWants=cloudsqlproxy.service\nEOF\necho \"$API_SERVER\" > /lib/systemd/system/forseti.service\n\nread -d '' SQL_PROXY << EOF\n[Unit]\nDescription=Explain Cloud SQL Proxy\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/home/ubuntu/cloud_sql_proxy -instances=iam-explain-deployment:us-central1:iam-explain-sql-instance=tcp:3306\n[Install]\nWantedBy=forseti.service\nEOF\necho \"$SQL_PROXY\" > /lib/systemd/system/cloudsqlproxy.service\n\nsystemctl start cloudsqlproxy\nsleep 1\nsystemctl start forseti\n\n\n"}], "kind": "compute#metadata"}, "name": "iam-explain-explain-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.155.170.1", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "dR89kDgurEQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/zones/us-central1-c/instances/iam-explain-explain-vm", "serviceAccounts": [{"email": "iam-explain-inventory@iam-explain-deployment.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment/zones/us-central1-c"}"
organization/660570133860/project/pwilthew-204422/instance/7016258284907893644/,instance/7016258284907893644,project/pwilthew-204422,7016258284907893644,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-17T18:33:24.284-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "test-instance", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/centos-cloud/global/licenses/centos-7"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/zones/us-east1-b/disks/test-instance", "type": "PERSISTENT"}], "id": "7016258284907893644", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "_-StUsdHrpw=", "kind": "compute#metadata"}, "name": "test-instance", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.231.245.160", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "mOZpN-K6qQg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/global/networks/default", "networkIP": "10.142.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/zones/us-east1-b/instances/test-instance", "serviceAccounts": [{"email": "602826269491-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/pwilthew-204422/zones/us-east1-b"}"
organization/660570133860/project/pso-cicd8/instance/7041887931054054222/,instance/7041887931054054222,project/pso-cicd8,7041887931054054222,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:06:57.215-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-canary-east-default-pool-e4705366-ag3p", "type": "PERSISTENT"}], "id": "7041887931054054222", "kind": "compute#instance", "labelFingerprint": "7s-VnV1Vfao=", "labels": {"gke-canary-east-67b092c4-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "rJQ4SdUTp7g=", "items": [{"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQU1TR0RTRFp6Y2RRU1cvODlqZmFMVGt3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRaV0Z6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RaV0Z6ZEVBeApORGM1TlRNMU1UVXhNQjRYRFRFMk1URXhPVEExTlRreE1Wb1hEVEl4TVRFeE9EQTFOVGt4TVZvd09ERTJNRFFHCkExVUVBd3d0ZFhNdFpXRnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdFpXRnpkRUF4TkRjNU5UTTEKTVRVeE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBeUhPaGp2aVU0Vnl0NEcyVgp5N0ZEZHg0RjEzeWRVek5TMElUL3U4VEVQWGhxQ2tBejhxZVpPaXE4aGRaS2R0b1hFeW8rL3dUTnBOVEozeHNECjREVkhzUW5UamViWktRby84bytpdGpWdm1pRUE3MUZ4T2hPMytxekJidmt1cnFrOXVmbjJGSld0ZDNacm1MeUIKYVhCSnVLYVY4UlZGcTFMRm5vUEFxcUduM2krbWswS0lGRmlLM1U4WHlpbTZVVzFuUHYyaElUSmJNYk1qZm5sbwo0YjNzN3V4ZEtCNC9LZzEyOWh5M0hwdzBtVDBXeStkbG1Qam1RdmoxQ1VNN3NOTXJDSE1TbXMrYXJjdDZtd0M3ClRLTW5BaWVXa0xhalgxSUt6NU9MZGNoTS9LTGxRbEp1WUJsZ2p5dENMQUo3MjhTYWlXL1dJY0lpUVRZZFdsVUQKUENsZmZRSURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFueS9LRHIzWldESmNFS0JrY1ZQbTVVU1RUaThOZ2Ztc3psM2pCMG0xCnhoOGxzVjM0bUFhaVZOUndIWjRtUU9TTXBHSlpSdmFoZHRMN3hZS085TXlpbkFaRitzU00yTmJBamhLYms3eEEKbG5qNHZGNHZySHBURXlQd29FelBWeklpcmE4YnZ0MGlUUkpzOUVkY3hNVlZMZ1dnTXpNNzNPWlpjMHVNUFBNNwphT25TR0ZIU3dTeld0SGN3VlBzaXVVb2FHY2w1azdaRHl3MEhLazNnZWdXMFdyQUdCckF4alZZZUM5dXJ0SVc2CnRUMFNuc0tPZFFsQnRjNWVuNE1qbjlBR1dKNmRjYnYwbzVTUGlXYk0xbVI4WXNlS092dy9lemM5RDVsWGprb1AKUXpVREdaLzhlUWhLaGR6S1VvRDVqMzhObHB1YnZCd0ZqNnJtT0ZEWURMdzZhUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.48.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.51.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:48+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-east-67b092c4\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: LVVOPEDi9t_-UN067s0d7mbSFoBZHNusRlqsbcaRc8U=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lRSmpwN1RwTFZBTzRDVjVJcVBkWFhNVEFOQmdrcWhraUc5dzBCQVFzRkFEQTQKTVRZd05BWURWUVFEREMxMWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMV05oYm1GeWVTMWxZWE4wUURFMApOemsxTXpVeE5URXdIaGNOTVRZeE1URTVNRFUxT1RFeVdoY05NakV4TVRFNE1EVTFPVEV5V2pBU01SQXdEZ1lEClZRUURFd2RyZFdKbGJHVjBNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTFYeVQKNzdBQlVvSmg5WVZSbHVwSDJsei85dldFd1lURzJTRDBtbS9wMXVoQWRON2kvN2V2UzdwMGxlSzRCZms3SnRjbgp2eDNDVXJKNCs4bldxVE5jbUkrTlBSVzdhdnphczd0M0NTL2hXMEZaM2tsaXRUWnpOalMxaG9GNTQ0aDhmMUVBClpEN0lkQTlPQndOTGhmNXQ2WjBTeGdKeTBLZWtKTXVpOGQvNEZsd3VSYnJBSGZBeEdVamtwRWNLRzYxSmI1UmEKQ2lXRzQ4SHZOWlAySVdsaFR3VW96ZlVtbmpDYTgyUFdhZkxrZmZOZk1zb3p2WVBnSTFzeFY4aDdQbnpkc2JuSQo2YjU4QTNseHEwUmtRTWdvNFlzaGpRaUlqMDNIa2t0RmFvNWc2bHhWU0tMYTlHRnZhL0V5VjZWTGY1K29FZVJvCnNTZ2hTQzRjRlNTNjl0OXNQd0lEQVFBQm96VXdNekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3cKQ2dZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBZWJGUQo0ZU41clg5ZkpLbjdkeHFKcUpmV3lFekY1dWtjY0V5TFUzM0xoZ2VPY3JoUlduQ2xoVFV4bEVCVFdVQklLcWc0ClJKVldhN1BQYXZOZXIrK1BnNG9Zeml4dmZRVUd1TFl0cE5aanQ1VmJpamgrRTBCaGlhQnZiek5zVnBVOEVpQjEKcjRPUEJqTjI2cEJ4M1RSS2FCZ0J0OGxqaVpJR3pVWk1Fd3A5cE9CVTljVGJLVWk0cG5kSTB4SnY5ZFNqREg2RQphcnE1emx5bG9IUVI0d2tyb1VhdDJmTjJ3MTE3VTl1TW9DUVZMMWpvRWcrS0kwRVRNaXRkQUNlbzFzamdvd3dSCmtTVUtvTXhOZDlOU3pZbjFrQXlGUlFsV0Z0Z1UxUlE5UHEzYnFpNDdlUmFBR3VhbkR1TW1hQzZyZjdZaHFDTEcKUElXWGhPQWFuOXptQzZERjVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMVh5VDc3QUJVb0poOVlWUmx1cEgybHovOXZXRXdZVEcyU0QwbW0vcDF1aEFkTjdpCi83ZXZTN3AwbGVLNEJmazdKdGNudngzQ1VySjQrOG5XcVROY21JK05QUlc3YXZ6YXM3dDNDUy9oVzBGWjNrbGkKdFRaek5qUzFob0Y1NDRoOGYxRUFaRDdJZEE5T0J3TkxoZjV0NlowU3hnSnkwS2VrSk11aThkLzRGbHd1UmJyQQpIZkF4R1Vqa3BFY0tHNjFKYjVSYUNpV0c0OEh2TlpQMklXbGhUd1VvemZVbW5qQ2E4MlBXYWZMa2ZmTmZNc296CnZZUGdJMXN4VjhoN1BuemRzYm5JNmI1OEEzbHhxMFJrUU1nbzRZc2hqUWlJajAzSGtrdEZhbzVnNmx4VlNLTGEKOUdGdmEvRXlWNlZMZjUrb0VlUm9zU2doU0M0Y0ZTUzY5dDlzUHdJREFRQUJBb0lCQUUwMHVYZUVTbVloZXZYRQoyaVhlNGs5cE5MU0dSQldNUkRHQUJwWFhoVlRRTjRkTW1BRnMxM3RtbWdVZXNmaVBFc0pRS3pLbHU0SVd3MFFqCjBYcnRkVDVESkF3RVVQdzNKNHk2YmlrblpMT1E1Y1JLKytTWEpZRmovSVlCU3loclVzTGtjMlROZzhiZFJoV3AKTG1YdUJxZm13MFJTM0Z6elU1eHUvS1hHbnJ6T3ZqOElmaENBenBFWlRpdXZjcUQyRkl2NitOS0UwbDY2Wm1EdApySnhEQmVKc3gvZUlpM2ZrcU9YdmZzRlBLZ0ZFVEdmN21pZUNIVURoY1YwZlQ5U1MrNm5rQzhzNUF6S0lPVXRYClZKQ0FodTZ3bFlhdVZCQTJLN0ZXaFdnTThhUHRaMWxoOGE1N0JicHVDWkpkUDYzOEtybzEyRlh3Y1VGRzk5NW4KU3dsbTY3RUNnWUVBODFabzZwYWJIaDhyUHNPeTNFYVIraFdlSVlDY2ZqNGs2SzB6SVdnWUxDVG1GUGlZK2JrYgoxT09WRVpPSld3S0ZCT1k5ZmJJMUxrLzZ1dElPb1QzYm5FVXhESy80enhsbi8vOWVTTVBId01KcDJMQUNVTEpoCldCcGxZK0tGeHJmT2U3UXdvT1VadkpIUlE4Zm1US1VaOUxhTlZLcTgvQktjZ0U1R2V0QW1uS2NDZ1lFQTRKaUQKVXdSMGhzeTFkTlEzTFZJRDZMVG5EdHhjN0RrVEJGdXVveUFWaDM5Ymh4bk5TL0dUcUhMNitJdVBnc0pXZnhBNQpoTDhEOFI3M2xKTjZ2WkJsZFJadUNidC9Qek5JL3lQUmRObER4UEh1blJ3eEEvVU5EbUdpWXdndnVrelZRUDVBCmZJYWdSdnh1bGlDaXYvU2I0TzhWZ2tQSVlTWDRLaVRUaXJSa0xxa0NnWUVBbXoxYlBaM0xaQklhY3JaQzIwaWkKUkZ1YVFHRmVkU09NUkd5S25CdGVvSHNCMWdzcS9OWGRMWm5yTmdWYnNaWVA2cXBBUEhwK2R3ZExPL2hhb1A5bgpwWEIyOUZNbmRtZ004MEtsa2VKbEExS0VXRnNoZnYzdUlGam1xaXlQajlFZmg4ZlM1aktDa3N5c0pvUFhKcnFGCnJwcnYyejM1eHc3UWpRSmk4R0x1M3kwQ2dZRUFyZytrMzJiNWhDc01pbEdadmFidFhxRXMzVWlOUDRud0loV0gKMythU3FPTmNKUFVyTlNzeE80QjQzcjBTYU0yQ1NaRmljbTJ6ZVdCOWtnbEdPN20zMTZtZGVDOTJxNTFzZWtmaApJY1RzRDZ0TU9UakxCLzBYdEVpWW1GV1UzN2FDSTQrb25KbWRoOFpGVWxaU3E1L0FXdkFQNUZmeDZOQ0xadVlKCmlGckx0WmtDZ1lFQW1QOTVETHE3MlF6K1R5empmcHpWa3g2OG1RS2lFSDgvQmEwNWkyenZXNThlWDZmY3lUV3AKSG9GMzRXSEQ3aWV4VW03Z1NucUFqVU0yZlRyYzI1U09kN2dVR2VmT0cwTTByRitkNWNNVzdFZDVlYlI0ekJRdAprTjZuVVZJRjMreEZESnJPRzl1M3E5Q3RBUTZVUXowZTRMU3MvMXdySzBwVE9Ib3hvenhIMTNVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.177.251\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.51.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-east-default-pool-e4705366"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-canary-east-default-pool-e4705366-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-east-default-pool-e4705366-ag3p", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.206.96", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "VKzD0djg8wI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.11", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-canary-east-default-pool-e4705366-ag3p", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "7s-VnV1Vfao=", "items": ["gke-canary-east-67b092c4-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/pso-cicd8/instance/7074150617280043861/,instance/7074150617280043861,project/pso-cicd8,7074150617280043861,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:07:22.257-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-prod-east-default-pool-876b2e46-kbjs", "type": "PERSISTENT"}], "id": "7074150617280043861", "kind": "compute#instance", "labelFingerprint": "v7xYtm0K6uM=", "labels": {"gke-prod-east-aecd1f6d-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "TVl4GnnpV_o=", "items": [{"key": "cluster-name", "value": "prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRVGVrWCttK2lDTzhGNlc5bHZ6aVZjREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93TmpFME1ESUdBMVVFCkF3d3JkWE10WldGemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMV1ZoYzNSQU1UUTNPVFV6TlRFek1EQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMSkYrVEZZeld1RlNlTzVjNUYwNlRCZgpLb040dW84Zmhiakh5QnN3YXA1MVpJb0RxOGk3ODkwRlNrMjQ3YkFzdmZaOXZROFdVSWRxRzA4VlBIc2VuSFRTCmJxODhqendIWnJ5cE4zNHhVbUdFcGF3TjdKb3g0NHRSQVJkL2JjU3hFVGhCMDFrWUZ6alp5K3NIdXc2Wms3eDUKc21xcCtCaitPaW5ybjRZeVc4ZVRkSUdYeDJDQkRZSFNNT1V4aTJDQXA1K3VOU1hvbm5YcFNXRkxrUjFmUXQ2UgpxMVRuN05OZllDalI2VVVBcGlBbWhVRjBiRElXQTJIY3BETlpCMlRFQ2NQaG1QTVFPTHhCWUdqVjErNjZvdXVPCmRUWHVmZXlDb0J5RVVhNSs2TzVzY3NERXRVRmRPUVVSM0x4VjFrbW9JZm1BemhRNEdDN0xYYmt1TW9Zck5LVUMKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtMY1VJcEFQbXc2UHFyZDhpSFc3M1FZYTdqK3J3cDBoVnVQUHlGclZqVS9uSFFpCiszYklYWHZ4Nk1zcmt6ZFI2a2s2UHlqWWl2QVJpMWRYQ0FjV3cyUXFBSVJibU5OY0N2a1lJSytYb1A2UTkvUEoKeGJMWlRsRmtzRWVkR3ZNMnFXd21XL0JYT293dHFLQ29rL2NCL2xKaS8xa0psZ0RaekhSZDFkZVl4bEVLYXRqeApwZTNzN3FCUEwydkZlTEhJMThTa2tMNDFTbGx3bWYwWXhwcUozNVVUQUcvdUJuazFiQ2tBTnBFK2Q4OGhWbWV2CnV1RlBGTFZsKzlyY2x1dUN4NjJabWY2SzFkYjAwV2hqdjg4ZWFCWXpocVVMUEt5eWFBaEh0SElNdHBlNzVBbHgKRjR6S1pxa2RUN3hsUm1aVnU2R2VvYmVkOFF1YVg0OUVZeHg2STRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.72.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.75.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:37+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-east-aecd1f6d\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: tpYxxawhpbtwZ15OY3ekOtOasYxcMV3eHOPctR3DRkg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lRZWlxUlB5K1FDdWlqb0t2TTN1TkxXVEFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93RWpFUU1BNEdBMVVFCkF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1pNG9DZ0IKWXREd0tnTXR2Vzlzcjh0M0FhblV5V1Y1ZzlXTmJzSFZjYWpZZFlKUGlhQmdXOXpQdU9aUlM5M0tjbDdIREtFUwpjR3Z4TWhmdmtseHUrdFh0cy9KSW1YSlkzY2JhaklxZDREK3hyVFQzdEJMYWRXVGZyVWNhZ0tEaEFGSnpWVFYzCnNzR0xJRmFWR2xQYktzOWFMalZNSnZVQWdsdTBtK2ovSk5VVTRHWGNRNHdJS21vRGJFNXdyTjBVM0Rxdndkd1UKOGhVL2hHd2VHRXlxSmFkRE1SeFdORTZIQWVZSytnR2pzakVKY1VWQWhQb0QzQ2NyWUNRVXNoRnNoenIrR25hegpkNXdBemVBTngxRktoOURiNWxYWjhkcVFETjNLV04wWnUrckNxeEgzOHppTjJEMzNqTjlEU1VJNkFtVzNVQnN1Clh0clhTQ3RpbkI5Qm9yVUNBd0VBQWFNMU1ETXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSUF4RFZ0cgozcG9qVmo2MWZ4VDJ5RTR1SmhvQ2ROMm9sZDc0VEJJaDJ1RFhVaDF3K0NSR2lnZ1lxcUhqaWlBWGcxWXZ3RysxClQ0Mkw5RlNFZlMzTkxJbnYzZ29MTnpkdmZHUkw3NFV6RXFCNFdYSW9jUFVZNi8yVmhpV0lCQnZEOGdTWjBiVWYKZGFwMEVmYXJmSlVVdDlRbm9aTTNtMU5ZdXJKK0RjQjcwZUtBTVYzclpPTnJDS2dwY0NGbkNSVllZSzdwSGdieAowalpjUWJrMFZFcnNBNHpDb0xHdXp5Rjh5d2Zzc1lpNi9oeGt3aEgrUnpNRGs5ZCtHYTdZZHhPU3VYQ0hjN0RiCjQxMFlBbUx1TSsrdk0xZGNMWktPNElVbGRXdjJBeVVqdEtBSFNGL0dQYjJGNFBFRUpKbWIzSFkybzFRNnFoakgKZmYwdUlDR2VTWmx2cWZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUxpZ0tBRmkwUEFxQXkyOWIyeXZ5M2NCcWRUSlpYbUQxWTF1d2RWeHFOaDFnaytKCm9HQmIzTSs0NWxGTDNjcHlYc2NNb1JKd2EvRXlGKytTWEc3NjFlMno4a2laY2xqZHh0cU1pcDNnUDdHdE5QZTAKRXRwMVpOK3RSeHFBb09FQVVuTlZOWGV5d1lzZ1ZwVWFVOXNxejFvdU5Vd205UUNDVzdTYjZQOGsxUlRnWmR4RApqQWdxYWdOc1RuQ3MzUlRjT3EvQjNCVHlGVCtFYkI0WVRLb2xwME14SEZZMFRvY0I1Z3I2QWFPeU1RbHhSVUNFCitnUGNKeXRnSkJTeUVXeUhPdjRhZHJOM25BRE40QTNIVVVxSDBOdm1WZG54MnBBTTNjcFkzUm03NnNLckVmZnoKT0kzWVBmZU0zME5KUWpvQ1piZFFHeTVlMnRkSUsyS2NIMEdpdFFJREFRQUJBb0lCQVFDQWFFeGRDM1h5QUpKLwo4aFVNWVZXZExvYnI1T3JxZGZCMi84SHBVdWtoZ1VpN2tyS1MzTkluMHVPUXhGVnFrQWJXeHpRM0h4cTRrMWJlCnBTN1czMUNzNXlLRlR4aUxaSHFNcW1mYWplRldIZzZXb2hpYkx4S0c4K2xnWVg0RWJhek5FbWRpaXk3YVRtemoKdHdOZXZna0hHY1FSNktQTGZRWG9NUVRFNitUZVF4Y1NwaHN2VmdtK2dQZ2plaUZ3OHVndWM1Z3ZvWXNWWElLZQpJQnRNVmNMeUUza2pkd3phcm9yYVhJTVZOOGw2Znp2Sm1GZTE2dUVBbjZLTGlxSS9BYTFRMGkvQXE1WWtzUU9MCkNaR3JMUnZVaU9YNWk4OVhVZEdrVGtmdlQzVUFCK0RWYXZjQlZBb0lKR2RFQldKeUhMczh6YWdRMlRXWEdZaXgKVUlKeFpTdkJBb0dCQU11NDUyQ1hTdVo0RXFLY3FDQjcwQTNZL1U1R0xDRUlVVEVPanhOMnhVVTdaK3VVV2g3TQphLzRFWW91MmFhNFlUWlJtNG1BcWVDLzFTbXV3Q3B6V0J3SGFtWmNSSG5EM2VXb0FsTGZuaFJnNUNRSi9LSkVvClNYN3grUjc4d1JrZnhnQXJXamRtNlZwR1NSbG9PS2xEWExyWFd6a3gwOFQ4VDJpMVo2ZFVLdWhaQW9HQkFQdzYKa21YWStWZUJZTmRZUVhFRXZJTnd4NzdOMFUzZEg1MEdPZTNpOFRQenpFRnlXQW5TcnhhaU1qS2RrUmh3cCtUNAo2bk9jOWIySjliNnFHMTA4Y29BWkVMOXAzRURuaDJ6aWxJVktmZGZUR0txTXFrUFNBZXJIeDdsREc3dVpQZjhZCk9QVXRSbVB1TUtpdXFjVFJXdlVFb0o0dVFpWmtDYUJudUxoSWtjRzlBb0dCQUthYWhMNTlmQWVXMHNhaGp1MWgKMC9nL0tJakc0bmZ4TVZVSkx3RWY5SngxeExyb0MvdDcraVUydU5EQlVSUExWRWExRFJUUUpwSXg2N2E5dFRBbAo2SDBmcE5QaWNCNjZoRlNvUFBkWkk0TjN3V0tGVTB2Q3dyaEtjdzFnYnhwNDNaaHQyODNMSDdOd0gzL2p0OUxWCkFCVGM0Z0dZT2pPeWs4NXg3Rjd2ZWxlaEFvR0JBTW91VlMySXFBNEpxa3ZUOWRrWFY5andyVngzOUwrNmNWM1kKSU5WY0pjWmtOYVY4ZDYrZ0R6TlFYbmFPTVVGckJGb1pZUzI5Y29vMUxTUmhqTC9HOVcxVEtrYVZIN1Z6SWU0WgpEYjV1Z01OZzloTzMzNyt2ZGxQeFFscHh2YWc1NVNVM0VHa1BtcTM5djBsbmdMUkFzTzFZZ1R0cWp5SGc3SXFFCnVlQVdZNmZ0QW9HQWNtZTdoWmpmQ0hteVlScUxFTDVIRHJ6UmlQU3haUk85RHRKMHVFMEsrVHRETlFqYkpGR28KU1dEazN3aCtTblpyOGlBMTlCajFRM2FseEdDRy8yNDBsREJMWGZiTzBMZWY3VEtzZkkrMzhQZElhczlWWm5KNgpKU05EUmwvSlowQ0paZnQzSHBsWHhESkw2MXNxZ3QvNFByblMvY21yaU5oUVVwTGZNaTQ2NlljPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.3.189\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.75.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-east-default-pool-876b2e46"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-prod-east-default-pool-876b2e46-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-east-default-pool-876b2e46-kbjs", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.160.112", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "V5pGvXQWHl8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.17", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-prod-east-default-pool-876b2e46-kbjs", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "v7xYtm0K6uM=", "items": ["gke-prod-east-aecd1f6d-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/renamesetup/instance/7076631394647058379/,instance/7076631394647058379,project/renamesetup,7076631394647058379,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-16T22:54:44.804-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/disks/forseti-client-vm-3723", "type": "PERSISTENT"}], "id": "7076631394647058379", "kind": "compute#instance", "labelFingerprint": "g2eSfAfuILI=", "labels": {"goog-dm": "forseti-client-3723"}, "machineType": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "r-Z3-t_rgNg=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch rename_setup --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-3723/configs/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-3723/configs/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-3723", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "23.236.60.189", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "XEWx9L-C4A0=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/renamesetup/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/renamesetup/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/instances/forseti-client-vm-3723", "serviceAccounts": [{"email": "forseti-client-gcp-3723@renamesetup.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c"}"
organization/660570133860/project/stable-glass-185623/instance/7140161159325856515/,instance/7140161159325856515,project/stable-glass-185623,7140161159325856515,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-09T18:24:44.551-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/disks/iam-explain-2017-11-10t02-20-47z-explain-vm", "type": "PERSISTENT"}], "id": "7140161159325856515", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "V2PLH8JP2UY=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch release-1.1.4 --single-branch forseti-security\n            cd forseti-security\n        \npython setup.py install\n\n\n# Create upstart script for API server\nread -d '' API_SERVER << EOF\n[Unit]\nDescription=Explain API Server\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/usr/local/bin/forseti_api '[::]:50051' 'mysql://root@127.0.0.1:3306/forseti_security' 'mysql://root@127.0.0.1:3306/explain_security' '/home/ubuntu/gsuite.json' 'artur@henrychang.mygbiz.com' 'organizations/660570133860' playground explain inventory\n[Install]\nWantedBy=multi-user.target\nWants=cloudsqlproxy.service\nEOF\necho \"$API_SERVER\" > /lib/systemd/system/forseti.service\n\nread -d '' SQL_PROXY << EOF\n[Unit]\nDescription=Explain Cloud SQL Proxy\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/home/ubuntu/cloud_sql_proxy -instances=stable-glass-185623:us-central1:iam-explain-no-external-2017-11-10t02-20-47z=tcp:3306\n[Install]\nWantedBy=forseti.service\nEOF\necho \"$SQL_PROXY\" > /lib/systemd/system/cloudsqlproxy.service\n\nsystemctl start cloudsqlproxy\nsleep 1\nsystemctl start forseti\n\n\n"}], "kind": "compute#metadata"}, "name": "iam-explain-2017-11-10t02-20-47z-explain-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.70.36", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "0mpuIr5h26M=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c/instances/iam-explain-2017-11-10t02-20-47z-explain-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-180840@stable-glass-185623.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/stable-glass-185623/zones/us-central1-c"}"
organization/660570133860/project/iam-explain-henry/instance/7142572946719176716/,instance/7142572946719176716,project/iam-explain-henry,7142572946719176716,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-05-31T15:42:44.057-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/disks/forseti-securityggg-vm", "type": "PERSISTENT"}], "id": "7142572946719176716", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/machineTypes/g1-small", "metadata": {"fingerprint": "NF9tDouLHVg=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\nFORSETI_PROTOC_URL=https://raw.githubusercontent.com/GoogleCloudPlatform/forseti-security/master/scripts/data/protoc_url.txt\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=iam-explain-henry:us-central1:mergeiamexplainggg=tcp:3306 &\n\n# Check if rules.yaml exists\nRULES_FILE=$(gsutil ls gs://mergeiamexplainggg/rules/rules.yaml)\nif [ $? -eq 1 ]; then\n        cd $USER_HOME\n        read -d '' RULES_YAML << EOF\nrules:\n  - name: sample whitelist\n    mode: whitelist\n    resource:\n      - type: organization\n        applies_to: self_and_children\n        resource_ids:\n          - 660570133860\n    inherit_from_parents: true\n    bindings:\n      - role: roles/*\n        members:\n          - serviceAccount:*@*.gserviceaccount.com\nEOF\n        echo \"$RULES_YAML\" > $USER_HOME/rules.yaml\n        gsutil cp $USER_HOME/rules.yaml gs://mergeiamexplainggg/rules/rules.yaml\nfi\n\n# Check whether protoc is installed\nPROTOC_PATH=$(which protoc)\nif [ -z \"$PROTOC_PATH\" ]; then\n\n        cd $USER_HOME\n        PROTOC_DOWNLOAD_URL=$(curl -s $FORSETI_PROTOC_URL)\n\n        if [ -z \"$PROTOC_DOWNLOAD_URL\" ]; then\n            echo \"No PROTOC_DOWNLOAD_URL set: $PROTOC_DOWNLOAD_URL\"\n            exit 1\n        else\n            wget $PROTOC_DOWNLOAD_URL\n            unzip -o $(basename $PROTOC_DOWNLOAD_URL)\n            sudo cp bin/protoc /usr/local/bin\n        fi\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch explain-merge --single-branch forseti-security\n            cd forseti-security\n        \n\n# Don't build protos in setup.py.\n# Yes, this adds extra steps. However, this removes the step of having to download protoc.\n# Otherise, the pip package and the setuptools clobber each other's path\npython build_protos.py -- clean\npip uninstall protobuf\npython setup.py install\n\n# Create the startup run script\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n# inventory command\n/usr/local/bin/forseti_inventory --db_name forseti_security --sendgrid_api_key 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 --email_sender silverspin+mergeiamexplainggg@goldspin@gmail.com --email_recipient henryc@google.com --inventory_groups --domain_super_admin_email henry@henrychang.mygbiz.com --groups_service_account_key_file /home/ubuntu/service-account-key.json\n# scanner command\n/usr/local/bin/forseti_scanner --rules gs://mergeiamexplainggg/rules/rules.yaml --output_path gs://mergeiamexplainggg/scanner_violations --engine_name IamRulesEngine --db_name forseti_security --sendgrid_api_key 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 --email_sender silverspin+mergeiamexplainggg@goldspin@gmail.com --email_recipient henryc@google.com\n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n/bin/sh $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-securityggg-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.3.34", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "VonUn4liNQM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/instances/forseti-securityggg-vm", "serviceAccounts": [{"email": "forseti@iam-explain-henry.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c"}"
organization/660570133860/project/felix-test-168518/instance/737149890689164970/,instance/737149890689164970,project/felix-test-168518,737149890689164970,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-20T14:33:42.340-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/disks/iam-explain-2017-11-20t22-30-13z-explain-vm", "type": "PERSISTENT"}], "id": "737149890689164970", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "OFZz_zNMVSI=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev libssl-dev build-essential libffi-dev\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch model_fix --single-branch forseti-security\n            cd forseti-security\n        \npython setup.py install\n\n\n# Create upstart script for API server\nread -d '' API_SERVER << EOF\n[Unit]\nDescription=Explain API Server\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/usr/local/bin/forseti_api '[::]:50051' 'mysql://root@127.0.0.1:3306/forseti_security' 'mysql://root@127.0.0.1:3306/explain_security' '/home/ubuntu/gsuite.json' 'felix@henrychang.mygbiz.com' 'organizations/660570133860' playground explain inventory model\n[Install]\nWantedBy=multi-user.target\nWants=cloudsqlproxy.service\nEOF\necho \"$API_SERVER\" > /lib/systemd/system/forseti.service\n\nread -d '' SQL_PROXY << EOF\n[Unit]\nDescription=Explain Cloud SQL Proxy\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/home/ubuntu/cloud_sql_proxy -instances=felix-test-168518:us-central1:iam-explain-no-external-2017-11-20t22-30-13z=tcp:3306\n[Install]\nWantedBy=forseti.service\nEOF\necho \"$SQL_PROXY\" > /lib/systemd/system/cloudsqlproxy.service\n\nsystemctl start cloudsqlproxy\nsleep 1\nsystemctl start forseti\n\n\n"}], "kind": "compute#metadata"}, "name": "iam-explain-2017-11-20t22-30-13z-explain-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.239.118", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ykJeKh004Ng=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/instances/iam-explain-2017-11-20t22-30-13z-explain-vm", "serviceAccounts": [{"email": "felix-forseti-scraping@felix-test-168518.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c"}"
organization/660570133860/project/stable-device-182522/instance/7399831622208514290/,instance/7399831622208514290,project/stable-device-182522,7399831622208514290,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-10-10T16:22:06.439-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/zones/us-central1-c/disks/forseti-security-20171010161425-vm", "type": "PERSISTENT"}], "id": "7399831622208514290", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "4ZGeOzbg47E=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=stable-device-182522:us-central1:forseti-security-20171010161425=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch master --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://stable-device-182522-data-161425/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://stable-device-182522-data-161425/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171010161425-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.192.28.182", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "KwESrxrwFmw=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/zones/us-central1-c/instances/forseti-security-20171010161425-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-161425@stable-device-182522.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/stable-device-182522/zones/us-central1-c"}"
organization/660570133860/project/henry-rc2ccc/instance/7411246979510445790/,instance/7411246979510445790,project/henry-rc2ccc,7411246979510445790,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T20:29:54.449-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/disks/forseti-server-vm-1919", "type": "PERSISTENT"}], "id": "7411246979510445790", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "-JCskPVf0-k=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"henry-rc2ccc:us-central1:forseti-server-1919\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-1919@henry-rc2ccc.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-1919/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-1919/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-1919\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"33 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-1919", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "146.148.104.249", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "4dWDQ6PAMxE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/instances/forseti-server-vm-1919", "serviceAccounts": [{"email": "forseti-server-gcp-1919@henry-rc2ccc.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c"}"
organization/660570133860/project/forseti-v2-brown-bag/instance/7460945124129450161/,instance/7460945124129450161,project/forseti-v2-brown-bag,7460945124129450161,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-05T14:34:23.590-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/disks/forseti-client-vm-1922", "type": "PERSISTENT"}], "id": "7460945124129450161", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "P9e_PnojrfI=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1922/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1922/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-1922", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.184.215.227", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "H_9SzM35shw=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/instances/forseti-client-vm-1922", "serviceAccounts": [{"email": "forseti-client-gcp-1922@forseti-v2-brown-bag.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c"}"
organization/660570133860/project/henry-rc2ccc/instance/7476214351341823929/,instance/7476214351341823929,project/henry-rc2ccc,7476214351341823929,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T20:34:46.987-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/disks/forseti-client-vm-1919", "type": "PERSISTENT"}], "id": "7476214351341823929", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "CMNZQ30GJKI=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1919/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-1919/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-1919", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.184.222.26", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "joDnTW2PHM0=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/instances/forseti-client-vm-1919", "serviceAccounts": [{"email": "forseti-client-gcp-1919@henry-rc2ccc.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c"}"
organization/660570133860/project/iamql-demo/instance/7641623218466165270/,instance/7641623218466165270,project/iamql-demo,7641623218466165270,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-07T10:18:34.117-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iamql-demo/zones/us-central1-c/disks/forseti-security-20180307101246-vm", "type": "PERSISTENT"}], "id": "7641623218466165270", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iamql-demo/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "ovRYlHjlZfc=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch iamql-refactored --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"iamql-demo:us-central1:forseti-security-20180307101246\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"jiyun@henrychang.mygbiz.com\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-101246@iamql-demo.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=iamql-demo-data-101246\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"44 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}, {"key": "ssh-keys", "value": "kylediedrich:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCwMrfYsSespr/l5NYx2mzJWRM0KeKWQvC8uY05u1rO2CaWVQOHGgjZfzYPDDOc0CKGA2/CW6igmaznTTwQTg24ChsmQ2pYlFsZbZO9SS0v78mXQE6HqNYzJC/PshuR+WLbulF56hyzHjAFJdjrpdGaWMZDRW6+0VbUZD6/+O+zlOuI8KZN2HlhMNZ6dh28DQu27FQoT/cr2tjxUK5vbexVb9HYzv+xCLfChFT6RQ/RfhEHeAN7GajPDNSlB0UPRM/1lfCjVpAPAGggPLFXAFXeFpt7KJ0ghvETyO1LzRT7jX26OjdSv5V4TJlTeF6cGcHH8SOj2rjQpuicrcETC8w1 google-ssh {\"userName\":\"kylediedrich@google.com\",\"expireOn\":\"2018-05-14T21:09:30+0000\"}\nkylediedrich:ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBA7TVKoPWOIzfyS6JuGXU/YIjKZp88qXzCGe2Ld78ypZgVvniVhdX5erVtLEPmpGnzW+QCOHVxwmxuIATx133Ps= google-ssh {\"userName\":\"kylediedrich@google.com\",\"expireOn\":\"2018-05-14T21:09:13+0000\"}\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180307101246-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.30.104", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "BKHN0Hh20ng=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iamql-demo/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iamql-demo/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iamql-demo/zones/us-central1-c/instances/forseti-security-20180307101246-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-101246@iamql-demo.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iamql-demo/zones/us-central1-c"}"
organization/660570133860/project/joe-project-p2/instance/7697006456682929353/,instance/7697006456682929353,project/joe-project-p2,7697006456682929353,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-16T10:49:27.163-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/disks/forseti-security-20180416104251-vm", "type": "PERSISTENT"}], "id": "7697006456682929353", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "a3_qYBuv-lo=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=joe-project-p2:us-central1:forseti-security-20180416104251=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip==9.0.3\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.11 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://joe-project-p2-data-104251/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://joe-project-p2-data-104251/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180416104251-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.36.250", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "XIwWnEs9fXI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/instances/forseti-security-20180416104251-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-104251@joe-project-p2.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c"}"
organization/660570133860/project/forseti20-marten/instance/7723766254707793971/,instance/7723766254707793971,project/forseti20-marten,7723766254707793971,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-03-16T17:18:37.283-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/disks/forseti-server-vm-0830", "type": "PERSISTENT"}], "id": "7723766254707793971", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "TkirnVCCEpA=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc1 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"forseti20-marten:us-central1:forseti-server-0830\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Set ownership of the project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-0830@forseti20-marten.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Download server configuration from GCS\nsudo su $USER -c \"gsutil cp gs://forseti-server-0830/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\"\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-0830\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\"\n(echo \"20 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-0830", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.226.135.13", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "BPz-earf7h8=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c/instances/forseti-server-vm-0830", "serviceAccounts": [{"email": "forseti-server-gcp-0830@forseti20-marten.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti20-marten/zones/us-central1-c"}"
organization/660570133860/project/felix-test-168518/instance/7731395714405861506/,instance/7731395714405861506,project/felix-test-168518,7731395714405861506,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-08-11T15:57:50.565-07:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "test-credentials", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/disks/test-credentials", "type": "PERSISTENT"}], "id": "7731395714405861506", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/machineTypes/n1-standard-1", "metadata": {"fingerprint": "fSOngvxWSmo=", "kind": "compute#metadata"}, "name": "test-credentials", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "arlFcPEX0-g=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/global/networks/default", "networkIP": "10.128.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/instances/test-credentials", "serviceAccounts": [{"email": "felix-forseti-groups@felix-test-168518.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c"}"
organization/660570133860/project/henry-rc3/instance/784651803774145835/,instance/784651803774145835,project/henry-rc3,784651803774145835,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-17T22:59:33.203-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/disks/forseti-client-vm-4330", "type": "PERSISTENT"}], "id": "784651803774145835", "kind": "compute#instance", "labelFingerprint": "DnVMKYoeo5w=", "labels": {"goog-dm": "forseti-client-4330"}, "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "m59QgO0csi8=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc3 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4330/configs/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-4330/configs/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-4330", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.225.234.8", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Ou8jVT0MQwE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc3/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc3/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c/instances/forseti-client-vm-4330", "serviceAccounts": [{"email": "forseti-client-gcp-4330@henry-rc3.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc3/zones/us-central1-c"}"
organization/660570133860/project/iap-1-174217/instance/7873310410359660799/,instance/7873310410359660799,project/iap-1-174217,7873310410359660799,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-07-21T22:09:37.363-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "it-notag", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-9-stretch"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-b/disks/ig-regional-x3qh", "type": "PERSISTENT"}], "id": "7873310410359660799", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "uGWuEZgiYyM=", "items": [{"key": "instance-template", "value": "projects/941750202210/global/instanceTemplates/it-notag"}, {"key": "created-by", "value": "projects/941750202210/regions/us-central1/instanceGroupManagers/ig-regional"}], "kind": "compute#metadata"}, "name": "ig-regional-x3qh", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.184.148.102", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ZOIOSIgIQ2o=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/global/networks/default", "networkIP": "10.128.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-b/instances/ig-regional-x3qh", "serviceAccounts": [{"email": "941750202210-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "TT8q1SuDCVI=", "items": ["othertag"]}, "zone": "https://www.googleapis.com/compute/v1/projects/iap-1-174217/zones/us-central1-b"}"
organization/660570133860/project/renamesetup/instance/7945771164328044847/,instance/7945771164328044847,project/renamesetup,7945771164328044847,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-16T22:48:49.471-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/disks/forseti-server-vm-3723", "type": "PERSISTENT"}], "id": "7945771164328044847", "kind": "compute#instance", "labelFingerprint": "jVipH6eH4_I=", "labels": {"goog-dm": "forseti-server-3723"}, "machineType": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "w62s0Rl0_pM=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get update && sudo apt-get --assume-yes install google-cloud-sdk\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch rename_setup --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat install/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Setup Forseti logging\ntouch /var/log/forseti.log\nchown ubuntu:root /var/log/forseti.log\ncp $USER_HOME/forseti-security/configs/logging/fluentd/forseti.conf /etc/google-fluentd/config.d/forseti.conf\ncp $USER_HOME/forseti-security/configs/logging/logrotate/forseti /etc/logrotate.d/forseti\nchmod 644 /etc/logrotate.d/forseti\nservice google-fluentd restart\nlogrotate /etc/logrotate.conf\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/install/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"renamesetup:us-central1:forseti-server-db-3723\"\nexport FORSETI_DB_NAME=\"forseti_security\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-3723/configs/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-3723/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./install/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-3723\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n\n# Use flock to prevent rerun of the same cron job when the previous job is still running.\n# If the lock file does not exist under the tmp directory, it will create the file and put a lock on top of the file.\n# When the previous cron job is not finished and the new one is trying to run, it will attempt to acquire the lock\n# to the lock file and fail because the file is already locked by the previous process.\n# The -n flag in flock will fail the process right away when the process is not able to acquire the lock so we won't\n# queue up the jobs.\n# If the cron job failed the acquire lock on the process, it will log a warning message to syslog.\n\n(echo \"4 */2 * * * (/usr/bin/flock -n /tmp/forseti_cron_runner.lock $FORSETI_HOME/install/gcp/scripts/run_forseti.sh || echo '[forseti-security] Warning: New Forseti cron job will not be started, because previous Forseti job is still running.') 2>&1 | logger\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-3723", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.117.163", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "GRzs4XdSyyM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/renamesetup/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/renamesetup/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c/instances/forseti-server-vm-3723", "serviceAccounts": [{"email": "forseti-server-gcp-3723@renamesetup.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/renamesetup/zones/us-central1-c"}"
organization/660570133860/project/iam-explain-deployment-test/instance/8002453917912105550/,instance/8002453917912105550,project/iam-explain-deployment-test,8002453917912105550,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-12-18T14:09:38.240-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/disks/forseti-security-20171218134954-vm", "type": "PERSISTENT"}], "id": "8002453917912105550", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "Dv2NiZfrYPM=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev-eap1 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"iam-explain-deployment-test:us-central1:forseti-security-20171218134954\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"jiyun@henrychang.mygbiz.com\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-155002@iam-explain-deployment-test.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=iam-explain-deployment-test-data-134954\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"21 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171218134954-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.139.28", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "oryvmyXb-wM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/global/networks/default", "networkIP": "10.128.0.6", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/instances/forseti-security-20171218134954-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-155002@iam-explain-deployment-test.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/8003490448173062997/,instance/8003490448173062997,project/pso-cicd8,8003490448173062997,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-28T00:07:22.253-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/disks/gke-prod-east-default-pool-876b2e46-yifu", "type": "PERSISTENT"}], "id": "8003490448173062997", "kind": "compute#instance", "labelFingerprint": "v7xYtm0K6uM=", "labels": {"gke-prod-east-aecd1f6d-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "TVl4GnnpV_o=", "items": [{"key": "cluster-name", "value": "prod-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRVGVrWCttK2lDTzhGNlc5bHZ6aVZjREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93TmpFME1ESUdBMVVFCkF3d3JkWE10WldGemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMV1ZoYzNSQU1UUTNPVFV6TlRFek1EQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMSkYrVEZZeld1RlNlTzVjNUYwNlRCZgpLb040dW84Zmhiakh5QnN3YXA1MVpJb0RxOGk3ODkwRlNrMjQ3YkFzdmZaOXZROFdVSWRxRzA4VlBIc2VuSFRTCmJxODhqendIWnJ5cE4zNHhVbUdFcGF3TjdKb3g0NHRSQVJkL2JjU3hFVGhCMDFrWUZ6alp5K3NIdXc2Wms3eDUKc21xcCtCaitPaW5ybjRZeVc4ZVRkSUdYeDJDQkRZSFNNT1V4aTJDQXA1K3VOU1hvbm5YcFNXRkxrUjFmUXQ2UgpxMVRuN05OZllDalI2VVVBcGlBbWhVRjBiRElXQTJIY3BETlpCMlRFQ2NQaG1QTVFPTHhCWUdqVjErNjZvdXVPCmRUWHVmZXlDb0J5RVVhNSs2TzVzY3NERXRVRmRPUVVSM0x4VjFrbW9JZm1BemhRNEdDN0xYYmt1TW9Zck5LVUMKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUtMY1VJcEFQbXc2UHFyZDhpSFc3M1FZYTdqK3J3cDBoVnVQUHlGclZqVS9uSFFpCiszYklYWHZ4Nk1zcmt6ZFI2a2s2UHlqWWl2QVJpMWRYQ0FjV3cyUXFBSVJibU5OY0N2a1lJSytYb1A2UTkvUEoKeGJMWlRsRmtzRWVkR3ZNMnFXd21XL0JYT293dHFLQ29rL2NCL2xKaS8xa0psZ0RaekhSZDFkZVl4bEVLYXRqeApwZTNzN3FCUEwydkZlTEhJMThTa2tMNDFTbGx3bWYwWXhwcUozNVVUQUcvdUJuazFiQ2tBTnBFK2Q4OGhWbWV2CnV1RlBGTFZsKzlyY2x1dUN4NjJabWY2SzFkYjAwV2hqdjg4ZWFCWXpocVVMUEt5eWFBaEh0SElNdHBlNzVBbHgKRjR6S1pxa2RUN3hsUm1aVnU2R2VvYmVkOFF1YVg0OUVZeHg2STRvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.72.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.75.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:37+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-east-aecd1f6d\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: tpYxxawhpbtwZ15OY3ekOtOasYxcMV3eHOPctR3DRkg=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lRZWlxUlB5K1FDdWlqb0t2TTN1TkxXVEFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MWxZWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdFpXRnpkRUF4TkRjNQpOVE0xTVRNd01CNFhEVEUyTVRFeE9UQTFOVGcxTUZvWERUSXhNVEV4T0RBMU5UZzFNRm93RWpFUU1BNEdBMVVFCkF4TUhhM1ZpWld4bGREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU1pNG9DZ0IKWXREd0tnTXR2Vzlzcjh0M0FhblV5V1Y1ZzlXTmJzSFZjYWpZZFlKUGlhQmdXOXpQdU9aUlM5M0tjbDdIREtFUwpjR3Z4TWhmdmtseHUrdFh0cy9KSW1YSlkzY2JhaklxZDREK3hyVFQzdEJMYWRXVGZyVWNhZ0tEaEFGSnpWVFYzCnNzR0xJRmFWR2xQYktzOWFMalZNSnZVQWdsdTBtK2ovSk5VVTRHWGNRNHdJS21vRGJFNXdyTjBVM0Rxdndkd1UKOGhVL2hHd2VHRXlxSmFkRE1SeFdORTZIQWVZSytnR2pzakVKY1VWQWhQb0QzQ2NyWUNRVXNoRnNoenIrR25hegpkNXdBemVBTngxRktoOURiNWxYWjhkcVFETjNLV04wWnUrckNxeEgzOHppTjJEMzNqTjlEU1VJNkFtVzNVQnN1Clh0clhTQ3RpbkI5Qm9yVUNBd0VBQWFNMU1ETXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSUF4RFZ0cgozcG9qVmo2MWZ4VDJ5RTR1SmhvQ2ROMm9sZDc0VEJJaDJ1RFhVaDF3K0NSR2lnZ1lxcUhqaWlBWGcxWXZ3RysxClQ0Mkw5RlNFZlMzTkxJbnYzZ29MTnpkdmZHUkw3NFV6RXFCNFdYSW9jUFVZNi8yVmhpV0lCQnZEOGdTWjBiVWYKZGFwMEVmYXJmSlVVdDlRbm9aTTNtMU5ZdXJKK0RjQjcwZUtBTVYzclpPTnJDS2dwY0NGbkNSVllZSzdwSGdieAowalpjUWJrMFZFcnNBNHpDb0xHdXp5Rjh5d2Zzc1lpNi9oeGt3aEgrUnpNRGs5ZCtHYTdZZHhPU3VYQ0hjN0RiCjQxMFlBbUx1TSsrdk0xZGNMWktPNElVbGRXdjJBeVVqdEtBSFNGL0dQYjJGNFBFRUpKbWIzSFkybzFRNnFoakgKZmYwdUlDR2VTWmx2cWZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUxpZ0tBRmkwUEFxQXkyOWIyeXZ5M2NCcWRUSlpYbUQxWTF1d2RWeHFOaDFnaytKCm9HQmIzTSs0NWxGTDNjcHlYc2NNb1JKd2EvRXlGKytTWEc3NjFlMno4a2laY2xqZHh0cU1pcDNnUDdHdE5QZTAKRXRwMVpOK3RSeHFBb09FQVVuTlZOWGV5d1lzZ1ZwVWFVOXNxejFvdU5Vd205UUNDVzdTYjZQOGsxUlRnWmR4RApqQWdxYWdOc1RuQ3MzUlRjT3EvQjNCVHlGVCtFYkI0WVRLb2xwME14SEZZMFRvY0I1Z3I2QWFPeU1RbHhSVUNFCitnUGNKeXRnSkJTeUVXeUhPdjRhZHJOM25BRE40QTNIVVVxSDBOdm1WZG54MnBBTTNjcFkzUm03NnNLckVmZnoKT0kzWVBmZU0zME5KUWpvQ1piZFFHeTVlMnRkSUsyS2NIMEdpdFFJREFRQUJBb0lCQVFDQWFFeGRDM1h5QUpKLwo4aFVNWVZXZExvYnI1T3JxZGZCMi84SHBVdWtoZ1VpN2tyS1MzTkluMHVPUXhGVnFrQWJXeHpRM0h4cTRrMWJlCnBTN1czMUNzNXlLRlR4aUxaSHFNcW1mYWplRldIZzZXb2hpYkx4S0c4K2xnWVg0RWJhek5FbWRpaXk3YVRtemoKdHdOZXZna0hHY1FSNktQTGZRWG9NUVRFNitUZVF4Y1NwaHN2VmdtK2dQZ2plaUZ3OHVndWM1Z3ZvWXNWWElLZQpJQnRNVmNMeUUza2pkd3phcm9yYVhJTVZOOGw2Znp2Sm1GZTE2dUVBbjZLTGlxSS9BYTFRMGkvQXE1WWtzUU9MCkNaR3JMUnZVaU9YNWk4OVhVZEdrVGtmdlQzVUFCK0RWYXZjQlZBb0lKR2RFQldKeUhMczh6YWdRMlRXWEdZaXgKVUlKeFpTdkJBb0dCQU11NDUyQ1hTdVo0RXFLY3FDQjcwQTNZL1U1R0xDRUlVVEVPanhOMnhVVTdaK3VVV2g3TQphLzRFWW91MmFhNFlUWlJtNG1BcWVDLzFTbXV3Q3B6V0J3SGFtWmNSSG5EM2VXb0FsTGZuaFJnNUNRSi9LSkVvClNYN3grUjc4d1JrZnhnQXJXamRtNlZwR1NSbG9PS2xEWExyWFd6a3gwOFQ4VDJpMVo2ZFVLdWhaQW9HQkFQdzYKa21YWStWZUJZTmRZUVhFRXZJTnd4NzdOMFUzZEg1MEdPZTNpOFRQenpFRnlXQW5TcnhhaU1qS2RrUmh3cCtUNAo2bk9jOWIySjliNnFHMTA4Y29BWkVMOXAzRURuaDJ6aWxJVktmZGZUR0txTXFrUFNBZXJIeDdsREc3dVpQZjhZCk9QVXRSbVB1TUtpdXFjVFJXdlVFb0o0dVFpWmtDYUJudUxoSWtjRzlBb0dCQUthYWhMNTlmQWVXMHNhaGp1MWgKMC9nL0tJakc0bmZ4TVZVSkx3RWY5SngxeExyb0MvdDcraVUydU5EQlVSUExWRWExRFJUUUpwSXg2N2E5dFRBbAo2SDBmcE5QaWNCNjZoRlNvUFBkWkk0TjN3V0tGVTB2Q3dyaEtjdzFnYnhwNDNaaHQyODNMSDdOd0gzL2p0OUxWCkFCVGM0Z0dZT2pPeWs4NXg3Rjd2ZWxlaEFvR0JBTW91VlMySXFBNEpxa3ZUOWRrWFY5andyVngzOUwrNmNWM1kKSU5WY0pjWmtOYVY4ZDYrZ0R6TlFYbmFPTVVGckJGb1pZUzI5Y29vMUxTUmhqTC9HOVcxVEtrYVZIN1Z6SWU0WgpEYjV1Z01OZzloTzMzNyt2ZGxQeFFscHh2YWc1NVNVM0VHa1BtcTM5djBsbmdMUkFzTzFZZ1R0cWp5SGc3SXFFCnVlQVdZNmZ0QW9HQWNtZTdoWmpmQ0hteVlScUxFTDVIRHJ6UmlQU3haUk85RHRKMHVFMEsrVHRETlFqYkpGR28KU1dEazN3aCtTblpyOGlBMTlCajFRM2FseEdDRy8yNDBsREJMWGZiTzBMZWY3VEtzZkkrMzhQZElhczlWWm5KNgpKU05EUmwvSlowQ0paZnQzSHBsWHhESkw2MXNxZ3QvNFByblMvY21yaU5oUVVwTGZNaTQ2NlljPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.3.189\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.75.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-east-default-pool-876b2e46"}, {"key": "created-by", "value": "projects/94226340476/zones/us-east1-b/instanceGroupManagers/gke-prod-east-default-pool-876b2e46-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-east-default-pool-876b2e46-yifu", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.120.112", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "92b1MrEaaeE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.142.0.19", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b/instances/gke-prod-east-default-pool-876b2e46-yifu", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "v7xYtm0K6uM=", "items": ["gke-prod-east-aecd1f6d-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-east1-b"}"
organization/660570133860/project/ahoying-forseti-dev/instance/8004895550987568854/,instance/8004895550987568854,project/ahoying-forseti-dev,8004895550987568854,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2017-11-22T09:47:37.688-08:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "dev-instance", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/zones/us-west1-a/disks/dev-instance", "type": "PERSISTENT"}], "id": "8004895550987568854", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/zones/us-west1-a/machineTypes/n1-standard-2", "metadata": {"fingerprint": "n9X2Zj3rDe0=", "kind": "compute#metadata"}, "name": "dev-instance", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.199.163.39", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Z9b15gLF1tc=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/zones/us-west1-a/instances/dev-instance", "serviceAccounts": [{"email": "forseti-reader-1@ahoying-forseti-dev.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/ahoying-forseti-dev/zones/us-west1-a"}"
organization/660570133860/project/policyscanner-demo/instance/8016442647865687740/,instance/8016442647865687740,project/policyscanner-demo,8016442647865687740,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-18T05:00:20.238-07:00", "deletionProtection": false, "description": "GAE managed VM for module: default, version: 20161228t180613", "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/goog-vmruntime-images/global/licenses/appengine-vmruntime"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/disks/gae-default-20161228t180613-on62-nnh1", "type": "PERSISTENT"}], "id": "8016442647865687740", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/machineTypes/g1-small", "metadata": {"fingerprint": "vIyBx1Qsf2s=", "items": [{"key": "gcm-replica", "value": "gae-default-20161228t180613-on62"}, {"key": "gcm-pool", "value": "gae-default-20161228t180613"}, {"key": "gcm-command-0", "value": "/usr/share/vm_runtime/vm_runtime_init.sh start"}, {"key": "startup-script", "value": "mkdir -p \"/gagent/metaOutput/\"\nwriteToSerialPort() {\nlocal timestamp=$1\nlocal message=$2\necho \"gcm-StatusUpdate:TIME=$timestamp;STATUS=$message\" > /dev/console\n}\nreport() {\nlocal message=$1\nlocal timestamp=\"`date +%s`000\"\nlocal log=\"/gagent/startup.log\"\necho \"$timestamp - $message\" >> $log\nwriteToSerialPort $timestamp \"$message\"\n}\nexitCode=112358\nreport \"STARTUP_SCRIPT_STARTED\"\nheartbeat() {\nwhile :\ndo\necho \"gcm-Heartbeat:`date +%s`000\" > /dev/console\nsleep 30\ndone\n}\nheartbeat &\ncurl -H \"Metadata-Flavor: Google\" \"http://metadata.google.internal/computeMetadata/v1/instance/attributes/gcm-command-0\" > /gagent/0.sh\nchmod +x /gagent/0.sh\nreport \"AGENT_RUNNING_COMMAND;INVOCATION_ID=0\"\nwhile :\ndo\n/gagent/0.sh\nexitCode=$?\nbreak;\ndone < /dev/null 1>> /gagent/metaOutput/stdout.0.txt 2>> /gagent/metaOutput/stderr.0.txt\necho \"$exitCode\" > /gagent/metaOutput/exitcode.0.txt\nif [ \"$exitCode\" == 0 ]\nthen\nreport \"COMMAND_SUCCEEDED;INVOCATION_ID=0\"\nelse\nreport \"COMMAND_FAILED;INVOCATION_ID=0\"\nexit $exitCode\nfi\ncommandsSucceeded() {\nlocal timestamp=\"`date +%s`000\"\nwhile :\ndo\nwriteToSerialPort $timestamp ALL_COMMANDS_SUCCEEDED\nsleep 30\ndone\n}\ncommandsSucceeded &\nhealthCheck0() {\nlocal unhealthyCount=0\nwhile :\ndo\nsleep 5\nlocal status=$(curl -s -w \"%{http_code}\" -o /dev/null --max-time 4 -H \"Host: 127.0.0.1\" 'http://localhost:8080/_ah/health')\nif [ \"$status\" == 200 ]\nthen\nunhealthyCount=0\nelse\n(( unhealthyCount += 1 ))\nif [ \"$unhealthyCount\" -ge 60 ]\nthen\nreport \"HEALTH_CHECK_UNHEALTHY;STATUS_MESSAGE=0\"\nfi\nfi\ndone\n}\nhealthCheck0 &"}, {"key": "gae_publish_ports", "value": ""}, {"key": "gae_agent_bucket", "value": ""}, {"key": "gae_agent_bucket_path", "value": ""}, {"key": "gae_allow_ssh", "value": "false"}, {"key": "gae_app_bucket", "value": "vm-config-internal.policyscanner-demo.appspot.com"}, {"key": "gae_app_fullname", "value": "policyscanner-demo_20161228t180613-398083669684454786"}, {"key": "gae_app_zip_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.zip"}, {"key": "gae_app_env_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.env"}, {"key": "gae_app_nginx_conf_filename", "value": "policyscanner-demo_20161228t180613-398083669684454786.conf"}, {"key": "gae_backend_instance", "value": "0"}, {"key": "gae_backend_minor_version", "value": "398083669684454786"}, {"key": "gae_backend_name", "value": "default"}, {"key": "gae_backend_version", "value": "20161228t180613"}, {"key": "gae_dockerfile_appendix", "value": ""}, {"key": "gae_enable_app_engine_apis", "value": "true"}, {"key": "gae_environment", "value": ""}, {"key": "gae_has_docker_image", "value": "true"}, {"key": "gae_free_disk_space_threshold_mb", "value": "1024"}, {"key": "gae_full_app_container", "value": "us.gcr.io/policyscanner-demo/appengine/default.20161228t180613@sha256:b48abad1caa549dd03070e53d1124f9474ac20472c7f61ee14d653d0a2ae2a5e"}, {"key": "gae_module_yaml_path", "value": "app.yaml"}, {"key": "gae_nginx_config", "value": ""}, {"key": "gae_no_appserver_affinity", "value": "false"}, {"key": "gae_partition", "value": "s"}, {"key": "gae_project", "value": "policyscanner-demo"}, {"key": "gae_run_http_unlock", "value": "true"}, {"key": "gae_server_software", "value": "Google App Engine/1.9.68"}, {"key": "gae_unlocked", "value": "false"}, {"key": "gae_vm_runtime", "value": "java"}, {"key": "google-container-manifest", "value": "kind: Pod\nmetadata:\n  name: managed-vm-pod\nspec:\n  dnsPolicy: Default\n  restartPolicy: Always\nversion: v1beta2\n"}, {"key": "shutdown-script", "value": "/usr/share/vm_runtime/vm_shutdown.sh"}, {"key": "gae_use_container_watchdog", "value": "true"}, {"key": "gae_api_verifier_image_name", "value": "gcr.io/google_appengine/api-verifier"}, {"key": "gae_use_api_verifier", "value": "true"}, {"key": "gae_fluentd_image_name", "value": "gcr.io/google_appengine/fluentd-logger"}, {"key": "gae_cloud_logging", "value": "true"}, {"key": "gae_nginx_proxy_image_name", "value": "gcr.io/google_appengine/nginx-proxy"}, {"key": "gae_health_check_interval_sec", "value": "5"}, {"key": "gae_mvm_agent_image_name", "value": "gcr.io/google_appengine/mvm-agent"}, {"key": "gae_use_nginx_proxy", "value": "true"}, {"key": "gae_health_check_timeout_sec", "value": "4"}, {"key": "gae_memcache_proxy_image_name", "value": "gcr.io/google_appengine/memcache-proxy"}, {"key": "gae_use_memcache_proxy", "value": "true"}, {"key": "gae_use_endpoints_api_management", "value": "false"}, {"key": "gae_iap_watcher_image_name", "value": "gcr.io/google_appengine/iap-watcher"}], "kind": "compute#metadata"}, "name": "gae-default-20161228t180613-on62", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External_NAT", "natIP": "35.226.77.222", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "SgqkfVU7iUY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": false, "onHostMaintenance": "TERMINATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b/instances/gae-default-20161228t180613-on62", "serviceAccounts": [{"email": "policyscanner-demo@appspot.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/cloud-platform", "https://www.googleapis.com/auth/appengine.apis", "https://www.googleapis.com/auth/devstorage.full_control"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/policyscanner-demo/zones/us-central1-b"}"
organization/660570133860/project/felix-test-168518/instance/8026924365234753688/,instance/8026924365234753688,project/felix-test-168518,8026924365234753688,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-11-20T16:08:24.437-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/disks/iam-explain-2017-11-21t00-05-24z-explain-vm", "type": "PERSISTENT"}], "id": "8026924365234753688", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "LO7-arXvGtA=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev libssl-dev build-essential libffi-dev\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            git clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch fixit_816_forseti_importer_deprecation --single-branch forseti-security\n            cd forseti-security\n        \npython setup.py install\n\n\n# Create upstart script for API server\nread -d '' API_SERVER << EOF\n[Unit]\nDescription=Explain API Server\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/usr/local/bin/forseti_api '[::]:50051' 'mysql://root@127.0.0.1:3306/explain_security' '/home/ubuntu/gsuite.json' 'felix@henrychang.mygbiz.com' 'organizations/660570133860' playground explain inventory model\n[Install]\nWantedBy=multi-user.target\nWants=cloudsqlproxy.service\nEOF\necho \"$API_SERVER\" > /lib/systemd/system/forseti.service\n\nread -d '' SQL_PROXY << EOF\n[Unit]\nDescription=Explain Cloud SQL Proxy\n[Service]\nRestart=always\nRestartSec=3\nExecStart=/home/ubuntu/cloud_sql_proxy -instances=felix-test-168518:us-central1:iam-explain-no-external-2017-11-21t00-05-24z=tcp:3306\n[Install]\nWantedBy=forseti.service\nEOF\necho \"$SQL_PROXY\" > /lib/systemd/system/cloudsqlproxy.service\n\nsystemctl start cloudsqlproxy\nsleep 1\nsystemctl start forseti\n\n\n"}], "kind": "compute#metadata"}, "name": "iam-explain-2017-11-21t00-05-24z-explain-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.39.164", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "9zRhl1--D1k=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c/instances/iam-explain-2017-11-21t00-05-24z-explain-vm", "serviceAccounts": [{"email": "felix-forseti-scraping@felix-test-168518.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/felix-test-168518/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/8062174003677518629/,instance/8062174003677518629,project/pso-cicd8,8062174003677518629,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:38.557-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-staging-default-pool-c40bd04d-xsei", "type": "PERSISTENT"}], "id": "8062174003677518629", "kind": "compute#instance", "labelFingerprint": "MjMzJPoWHLo=", "labels": {"gke-staging-9696e33a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "OQqW6cXU6YU=", "items": [{"key": "cluster-name", "value": "staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRYjJzeTVEK21HNWp3ZU9BM2M4dkx6ekFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNRFF4TWpBd0JnTlZCQU1NCktYVnpMWGRsYzNReExXSXRPVFF5TWpZek5EQTBOell0YzNSaFoybHVaMEF4TkRjNU5UTTFNRGMzTUlJQklqQU4KQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdm5mVkd4L1BvNXVrNzhkb2hrT2R6TDkraDhQbwoycWdQTUVDVzhGblhoVHBDeUc4azd5RHJNOHRWNkErSHJPUnN6UlhHaU5VamtSazBZbEJ1ZnNiUkJVQks2LzJpCkUrL3FaZyt5aTFrczd3WTJQTFNPYVRpV1FmV2pHOXdTdDVlKzcyVDc0c0VJNVNPNE1LV3Y2eWJmQzd5amNreDIKZSszV2MyU3FzM3c2UEhLYnZDMy9ITURxN1Z1TjdzSmd6enJVajlzazdhUEtCRm9ENlNWVDg1cUp3bjBERUVzZQpNV2ZiM0R2T3V5SGVuckUrT0R5bE1manJsTmhqVHZlaVVkK2EvTjJYaVV3QjJWaHZhTy9JNjBKTDNRREFmR1ZUClpLUThaejNsNkhkQ2hDMGhYS2ZhQ3l5ZWs4MVB0UWRYZEE5a1VVMGwrL3I2NzUvemM3a3Y0ZHVQTXdJREFRQUIKb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjODU5dkZnamJiSHZiK25EY2E4MWpLV2JuMkRYdk5OYUQzdHdFOFQvQzBJSVhhRTI0cU51CjV1ZWs4MnprclNXencrelhGbmgrbjloZmZubERtZDIrYVUrZklWZzN4bnQxNlpLK3NZMUI2L0RiakkzNkpDeksKY0l6NkhYWm8wQzBGZXgyOVhQVkU0T1pNNDBEUEgvZm1mRkFIRzdaWGNWUEpONU9kam5Kb0V4SjBLWjVoRTFTcwpjOGpNcTZmdmh0czRCbmJOeTlIRnIyY1FsTmV3b1dCUnRjWDVwRXBtVUpTR3FTaDBiMGwyNjIvTDBhMnRTMHphCnpjOVBpMTdkb1hLZjgvNWJ5bmpFVDdhQ1JYT2ZSdzBBUjlWTTMwaXo4KzNPSEQ0ZEVNKzlMT2p1a3RtVWpkQ3MKWXl5amtFTkRVaHRKdVVETHlLc08vUVpJcVl3MUgxUXUyUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:57:51+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-staging-9696e33a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: HaoxlbNn0of5qYViLOuxO0_bOTaycMT0pbStvNcuCC4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRZHpvRWMvVUtqK2dPek14OHFLVFErakFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNQkl4RURBT0JnTlZCQU1UCkIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM5dzM5MllyOWsKTlNnbXNVWEVIbW9OMHovcFN3SXFyRmhZWUc5SkN3eS8rbnkxenRQdEF6NkpVT2hHckhBdnl5NkU5SnJ4T3VoOAozbXI2ZmNQQ1FyVklXcW1FTUdPQTBKSVVxWjR5SVNuM3BzdmJNUFd1bXo1NGxhSVA5NlR0LzlNVnFiZW93UWNzCktMUGU0cHRyYXdtTU1TM3ZIU091c0dEQnBlY0pvQWhEeXNxMlpOK2dGQUlLS3hZTG5idTI0aGpJWnJYSTNuVXoKMWt5TFdJK05iMmV6REowL3VvcDNwWkMwTEZHYytxVkRKdm5vZVZRT05WTGthZ0l3UEl0bkZJcHNyTEI3WUdvcgpTc2wwU2trUkZZZ1BReUdydFM1eGdOOHVaMS9RdmpBWlM0RFIwUzM2TDZNYXdQeFNhVTYwOS9lS3c3d2lXRkZVClVhYlNwaWdGbHVMM0FnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVhQSlZvQk9iRQpQZFRPcHJNT21TbE5XUmVZVldCQmtTMDVNK2JST2pRanlEalpRQjBIaXdNWW5EWmk1MlJzOTZwa056bjM0dzUvCnVZMjNsKzh5MktUSmdaZ3pLQmk5Z1UzWEYxUU1qSEZ6eTdUVytmdnJacGl2WDRhWjc1VXJoUjF4anowV243RU4KSy9HaE83cUR5MHNqMnJBRkxrRVRBaXdrc1k4bFZiY1NEMlFveHlwV3MyNGxqbWxYUndLZ3ROSDFNUXRjSzBqQwo1TkpPSTY3SEc5YkllRzV0bTVYUHdkaU9Pekk4bGpGdW1rQXFpNVRQQ2ZOZTdKUjg5ODY3aWFnbGZRMWQ0RW9NCk8zUFJ3ZVA3Q2ZndTR2MXVPVjZ1TFdab1YyalNVZEMrZURGdlpYeWdzdW4xak9zQnV0OXZyVnFuR2duSnBNU0cKa3l1RTBNTlNUZUh4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdmNOL2RtSy9aRFVvSnJGRnhCNXFEZE0vNlVzQ0txeFlXR0J2U1FzTXYvcDh0YzdUCjdRTStpVkRvUnF4d0w4c3VoUFNhOFRyb2ZONXErbjNEd2tLMVNGcXBoREJqZ05DU0ZLbWVNaUVwOTZiTDJ6RDEKcnBzK2VKV2lEL2VrN2YvVEZhbTNxTUVITENpejN1S2JhMnNKakRFdDd4MGpyckJnd2FYbkNhQUlROHJLdG1UZgpvQlFDQ2lzV0M1Mjd0dUlZeUdhMXlONTFNOVpNaTFpUGpXOW5zd3lkUDdxS2Q2V1F0Q3hSblBxbFF5YjU2SGxVCkRqVlM1R29DTUR5TFp4U0tiS3l3ZTJCcUswckpkRXBKRVJXSUQwTWhxN1V1Y1lEZkxtZGYwTDR3R1V1QTBkRXQKK2krakdzRDhVbWxPdFBmM2lzTzhJbGhSVkZHbTBxWW9CWmJpOXdJREFRQUJBb0lCQVFDTnRhbkJFYnNWclRDZgp2SEI2SmJCVFJMZU1rMnc1eTl4cG14SmYvTFYzeENwUFp2WVNJQU1hYm1ZWEtQemFaQ1FJTzlaZFlQMXZDblhmCk8vM3RXdjJmMjd5TnI4a08wRExXNVZmeTNadEdpclBmcXk4OVJrZWZxemFNTUFabGlVN3I5WUxtcmNlYWJZYnQKWWxKb0pGWEw4SW41Nzh2T3ozNWgvbStMVzR2d2V2ekNHVzhhbHlaZm5XYnhIV1k0T3hDQmdsT0szZndKNHFwRwovRGpoN2xnQysyOHFuR1pXc0lJMGM4cnpxa2xYNTRpZHZOZi9IS3NGZ2ppSGtmby9FNDdNTEtsYmNPL2xCVUZmCkJCOWY4WEVBS0RvKzMzZ0lPamRDNTZrS2hMSk1US25NNENPUkE4V3ZhV1h5Z1lvMk5Ld0hJNllXQ1pkbXhsQUcKbENtZlRCSlJBb0dCQVBJb01sajJsaUFWYkJ4R3ZseXhWRExMRTdBMHhRRW1vTnVHQTZNMHp5NmhFaFJEd2hFWQplZ3dJSklTVTFXMTgwaURCTVJBeEY4YS84S1MwV3FvYW9lRXpLcmx5QVBHT0hpRTN3aTkveGszYm1YOUNIYTVECi9TVHRmUWRDQ0FIelZhWkxUakhleWpiY09sd2lBV3dZUCtycmVFTExwVkVGZjlUN0piclAvYzE1QW9HQkFNaWMKajJNYnVHajlkTmpsWS94UVBPMWJVb3VuTHc2VjRBYnY0Z1RxRm5HNzBKVlpmOVl5WlM3WnhMd2ZucktaRGV2WQp6QkVRQTBNVDhZcldBRDJUSGVydUVuUEhxREZxL1U1WURGa01VVkhvNnpDVnN3VTJ5WlpmL2U5OXJTUjEvSVJoCnlyWlgyMnBRS0k4QVQ3Y1g1ajI5aG5YY29VaEFEMUJhcmFxb2c4ZnZBb0dCQUxyWTJVQmJ4Q3F0WE9YVWtEM2wKZGhwYko2M21pYndCbWt6SWN6WVRJV25SVHFua1BuSUNlT21mdnMydUthQjVsNGsraUNUK1BHSlc1OCt1ZWVhVwo5aUZWNGJtRmhjVGM2OUtsdTJmN0o0QWIyYXlmejFjUGp0eFhnd2wrb2I4Zml3N3RQRUN1cjBqMVZQS1NLcGJGCmYwdzh0R2FWeTlGZ2RPcFpmeHRPTVgvQkFvR0FGZ3JsMG16OFVVVHdMdGpkcUo2a1l5d3lvTGVvK3dCSzBsaFAKVEZ6d1JHVHZvVWxwTzM3a0VVYktVQ1ZsU1poNXFCMTFKcmJNdFBVZkNETkZhWDZkdmUrVXhYWDlyQmhtWnRKVAo0UUR5ZW42T1FSTmh6VVBjMkpJSmsrUUtQMFJiajZ3ekd1QUNjdWNGM2RpWjZiTk5rQ0VnQWhsUSsyQldqbXk0ClFsVXJ6YThDZ1lFQXgxelRHbStvSWFNVnloZmhGOENUSXVjZnJyTXpPdFYra1FnM2FCUS9XeGRHYW90Wnl0c0IKR0lCYUI5NjVuc2V2NFZseHNEYjBheE9jV2Y1UlMxZUJjV0lZRDQ5Z1NaSGw4UldnME1yMm8yN3pSVVVDNnR0bgpMWVNjajcrUGMrZTJBcFIrVkZtL3dvQWtrVFNscW9DdXc1U012dUZOY1NnclFkY0lFSmxoVTlNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.225.247\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-staging-default-pool-c40bd04d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-staging-default-pool-c40bd04d-grp"}], "kind": "compute#metadata"}, "name": "gke-staging-default-pool-c40bd04d-xsei", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.199.116.155", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "lqKal2w_9p4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.32", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-staging-default-pool-c40bd04d-xsei", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "MjMzJPoWHLo=", "items": ["gke-staging-9696e33a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd3/instance/8074991792406173008/,instance/8074991792406173008,project/pso-cicd3,8074991792406173008,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:18:23.566-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/zones/us-west1-b/disks/deploygce-deploygce-v000-vu20", "type": "PERSISTENT"}], "id": "8074991792406173008", "kind": "compute#instance", "labelFingerprint": "eYymidQIHeE=", "labels": {"deploygce-1479542519112": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "vWBlnzjzz9c=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":1.0,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/980631692634/global/instanceTemplates/deploygce-deploygce-v000-1479544167851"}, {"key": "created-by", "value": "projects/980631692634/zones/us-west1-b/instanceGroupManagers/deploygce-deploygce-v000"}], "kind": "compute#metadata"}, "name": "deploygce-deploygce-v000-vu20", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.198.105.30", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "brd1O1FBt4U=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/zones/us-west1-b/instances/deploygce-deploygce-v000-vu20", "serviceAccounts": [{"email": "980631692634-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "eYymidQIHeE=", "items": ["deploygce-1479542519112"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd3/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd8/instance/8076586694152182574/,instance/8076586694152182574,project/pso-cicd8,8076586694152182574,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:29.177-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-prod-west-default-pool-75f1642f-nndp", "type": "PERSISTENT"}], "id": "8076586694152182574", "kind": "compute#instance", "labelFingerprint": "h2CDrYm_xXo=", "labels": {"gke-prod-west-9cf5507e-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "u9PNIVkqDmM=", "items": [{"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "prod-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHVENDQWdHZ0F3SUJBZ0lRR0xRNHZ3ZUNlWmVWZmtwc2JYeGZXREFOQmdrcWhraUc5dzBCQVFzRkFEQTIKTVRRd01nWURWUVFEREN0MWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWEJ5YjJRdGQyVnpkRUF4TkRjNQpOVE0xTVRFMU1CNFhEVEUyTVRFeE9UQTFOVGd6TlZvWERUSXhNVEV4T0RBMU5UZ3pOVm93TmpFME1ESUdBMVVFCkF3d3JkWE10ZDJWemRERXRZaTA1TkRJeU5qTTBNRFEzTmkxd2NtOWtMWGRsYzNSQU1UUTNPVFV6TlRFeE5UQ0MKQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOeUFJR1lkMTEva1RaVWt4WnBqd2JlZwpvWmgrQ0hVRjZ2NTAxV3dXRHIzY2FHV3pEYmRvOXN4WWxtSmpvZk5ReTdPNDNXMXlqQWRpT0xSY3NjTjF0Y2ZpCjNBTkFuZGxiVUNMbHdXTDkrTTRUNjF2UlFqSUQ5MmtkRHpTMjJiV0dOWk5zemNWa01aSDhGSU41L2I1aFFnV3EKTGFIT0cyVkxEaUxKUjNyby9obnh3YkhFNEN4Vm5VZnpQTnJqU0hKcHdhV0hzVEROUVF4bG1FdmE2WEdndXRUMAp4ajhLQURiUTEvdDhQZlJrdEIrOVhXOTJ3VytQRktucDhHTHNsMHNmM08vUGFCMkNWS2pwMHVISktlV0YrUUVuCnczTkMwMVNWUXJRbWl4NllkdHdaeDRhNkhKUFYrZ3RKNTF6REV2R0VqenVCNDVvZWtxOW9ZR0krVlRrNDJhc0MKQXdFQUFhTWpNQ0V3RGdZRFZSMFBBUUgvQkFRREFnSUVNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSQpodmNOQVFFTEJRQURnZ0VCQUFaYVJFSytFMFlIcU92dTlpWmZWNXo3cUhkaEFXTzNCZm41UWdtWFlOT2xlVHMvCkRROUMvdDJxdWYxOWk4aVZ3ajNoVzQyRm1PL000cVJVOWxqZWlmTm1Tei9UQUYxZTlHb1lxVU4xWTBUTFJFQ0gKVGtUUnc0MW9SRXdMYU1KajAwODhaZ0ovaGRlZ1ZKTkpZbDdIeU9Jc0FMK3JyR1JsYms4NkdId1hYdHQxRzdDdwpVZEhCVXFJMU1ENHQ2V01TNG5zbDdVRmxXV0pXYURoRHlqdlVoK1gxUWg3Y1YzYUpPRnJqcXFIQnZiY0hEQUpOCkV3ZDBBVUxoYkVQQnRqeVRNZWl1cFMvMDNpTy9YRzA0RC9NZUlMcURlQWpZaDFvNGsxVFNWVm4yRllXcUN1MHoKblludTZMaXhUTFVpUDdOOUhuYWdGemp2cm9rR3R2YXQxaVFxeXBNPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nCLUSTER_IP_RANGE: 10.120.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.123.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:18+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-prod-west-9cf5507e\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: Z_vlAxXbJ1RWwVZ4bimoPobeEpu9OxYV5V8hLL6SLxU=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDRENDQWZDZ0F3SUJBZ0lSQU1nNThMWVo0UUc0ZlNzekFEQ1NHZ2t3RFFZSktvWklodmNOQVFFTEJRQXcKTmpFME1ESUdBMVVFQXd3cmRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTF3Y205a0xYZGxjM1JBTVRRMwpPVFV6TlRFeE5UQWVGdzB4TmpFeE1Ua3dOVFU0TXpaYUZ3MHlNVEV4TVRnd05UVTRNelphTUJJeEVEQU9CZ05WCkJBTVRCMnQxWW1Wc1pYUXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDWmc0bzQKUVZUM2JCRkVsQUl4cSt5ZGVlcGgvbUVhWWFjaVFZZWkrZ3FZZllweUpJWCtQODd1eUl5d0lJUmo5dnVnUGZVbQovbFNjTkk5QWptdVY1bEMwQ1QwSUY4OEMydDB5dTFjd3VrWjYvb0ZPUmErN2ZkZ0xYbG8rc2cvMDZGODdUdFhICmlhY3Fibk9vOFJPdVRpZGlZTitrR0Z2djFvamh4T09qcU5yUHByWEVjY1FZTDEzelFsYTNDSWZhcXY1c3B4Q3oKdk9OTDBpdWJZWHJBRVFqQ2lkalpvaUJWcW9weTVaY1dNL3FKLzVqYm1DMndZZTI0NGorTG1JZzUxWDkrZjgvRwpVTURrSktuc3I0TjNHNzhBaFhETGF1UnpaNXhEdEJmWWFFaExSMjVYV2JpczhRd25lNTVraDBYWkQ0eGZVaVdDCk91N2FIYTJLMFQ3Uzl4Yy9BZ01CQUFHak5UQXpNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUURPQW44VwpabUtMREZsaVlocTZJeDVuSUhSWjg4dDRKQzBZM0RKRlUvZUtVSEltYTE2NXp1WDI4Y004SXl6L2ZwbmQ2cmVwCi94WlFxU3Q5elQ5VlcydHhCcHpFenRJWXBOYUR2LzdMT09OdXFJM0pJc0pIVm5USU9iZTlTNFlOd2VBZWhrQW8KV21SbXliWk1xdkc5WVNhSE5lczFIMU1Kb04zV3lkNHBmT3hCaW4zS1RBeDUvUzNYdzRWbGlMTmVCYjI2djdvNgpoL2hRcDFJbHUyblEwdFZFQWlxR2lpMmpyU1Yvajc5THBPMUVLZ21BOUk3OXZUZXBKUGVuRkJKbElFdHVMd2NyCklYYktGbTBkWitBcERBOURPcTdhZXE5OUN2RGc0MVhwMjFiZ0tRajdodWNrWHA0T3NXV0xXWG9kckJhMG9TY2gKd3dzS0lYbk5pUUk0V2lYWAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbVlPS09FRlU5MndSUkpRQ01hdnNuWG5xWWY1aEdtR25Ja0dIb3ZvS21IMktjaVNGCi9qL083c2lNc0NDRVkvYjdvRDMxSnY1VW5EU1BRSTVybGVaUXRBazlDQmZQQXRyZE1ydFhNTHBHZXY2QlRrV3YKdTMzWUMxNWFQcklQOU9oZk8wN1Z4NG1uS201enFQRVRyazRuWW1EZnBCaGI3OWFJNGNUam82amF6NmExeEhIRQpHQzlkODBKV3R3aUgycXIrYktjUXM3empTOUlybTJGNndCRUl3b25ZMmFJZ1ZhcUtjdVdYRmpQNmlmK1kyNWd0CnNHSHR1T0kvaTVpSU9kVi9mbi9QeGxEQTVDU3A3SytEZHh1L0FJVnd5MnJrYzJlY1E3UVgyR2hJUzBkdVYxbTQKclBFTUozdWVaSWRGMlErTVgxSWxnanJ1MmgydGl0RSswdmNYUHdJREFRQUJBb0lCQUNobmI1eW96VlVsczFISwpadDF0ODZQcTc1NkZGa2VjUmlJRS8wOE00bmNLSzhNcEM3OUVTaEdjNVRLQ0RIWkhEaWs1eFdsUzdUQUR3V1JyClY3T25YN3hTNWlaWUpkc0pnY2lWZURoUi9yVG1nVi81aFd3aWpoZEg2UmF4UlBQZnFSanlBZUEzd2JDd1MyNisKck1CbXY0VHNIRkNUUExkZVRyNmxWSWpCcTMyVmFjMUN3Zi9Nc3l6TkZDZDJVc2xGMFl1TC9KV055UkE1MTJRYgpzL1Nzb1dZN0tsYXdWY08vMldBVHJEN0tuQXdpWWNnb3Rzb0R4QnVTbmc3SGpxRUxXZHhSZGpwc1M3SnlTWXZGCmgxaVhSc1A3Wkc4ZU43b3Q4bWlyUHlzbkxSS1NnWE9nK3AvQXFCVFEzdmJ6QkdTY0thQnd6eDVzUThsZXptemgKMVFXT055a0NnWUVBeGNkZDVpRDVzUDJWQXFLaFVTdzMxMlNxaTdUY2FTbUY5VFN3bVdHaWFLd0FlYkYrY2xJegpjV24xR2VTeDc0VVZCQU9jYmlnNlVtdkFGaDFIeitDR0dNVWtXSHBkNFhtT3VqTHpybkNLOHVSZmVaTitOYWhTCmYxRG56SVcvMGQ1R1RJUUNTdFo0U3picmJJSVZpTkw0N2l3T2l4OVE0NXVYZXJJdEVKd1VxUU1DZ1lFQXhyUmMKY0JZUnloWURScUFWYnY3dzJPcFBlekUycXNFZUMrVmdSb21SUjIxbEtqd0FoMHA4dkZZZE95L0dFRkpIUkhnaApTRzd1VFZIQTBvTjRWemV4MFBiSC9rdk9zQUIwYkxDSDZqOUQrUVF0VWlUMlhKaHl4TWY0Z21EeCs5YllVVnhXCklsUVpybzhacU5kalA0QWJQcmRnU0lSK3BlMVkrdE1Pbi9CSHZoVUNnWUJiUXdpNEpTVXluNEMvNjQxbXFISEkKQ1dLTS90THFEOGdKZ3R1dW14ZlhGdTlOT0RMeHk2NkRPZkpvbFZmcC8wM1lRVlpRbW0xM0ZOTlpJUCsvRTRxdApLV01CRk0zM09pRTdHRUhMajVEK1RaVWt3NE5zZlJROFBYZ0lydnI1ZTRpU3pDTkdwenB3OHBHbHkwem1pdnRrCjQ1MStZdC92ZHg5cDlZZkg3MDIxUXdLQmdCQ1J6N2VGRDV5emN6aDdkdTRYa2t2MFZnWm0xekVzQTI1b2hUdTgKa3dIS3pJbldFUkUzRSttOG9KbGo1WGRNOVNadmdnOEJPUnYzZWtYVHNzQkxJNmZTUEdFblB5Z01FYWxTbXpMYwpiYldoTklwS0RNVXg3VGdkbU1wK2ZROU1IaVBDdUdnS2JVM1NId2ltVlY5aE5tUm5kRDczMVh2T3JBSFdnYnl5Cms3ajFBb0dBZTVWNWM0OUZZV1A2bldLZmk5NmQ3NGwrMmk1c0JlOUtsSVBCUlYwYkxPSHIrRittRFpwRnlxQmIKY1JzbVJPN05pdlBDRVhmY0tYVko2L3IzN3d1NURyTmx1Kys1cmJaSm4zTmpEd0swRUwrSVQ5L2tMaVo1WHhiawpGdmdtMGpNU2FVWE9IVmhaUTBCaWgxZzVlSWtqWWhoVHZZM1d4Z1g5cGwvdEx3Ni9tQWc9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.232.221\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.123.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-prod-west-default-pool-75f1642f"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-prod-west-default-pool-75f1642f-grp"}], "kind": "compute#metadata"}, "name": "gke-prod-west-default-pool-75f1642f-nndp", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.199.113.234", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "0PsAIVFve9Q=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.23", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-prod-west-default-pool-75f1642f-nndp", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "h2CDrYm_xXo=", "items": ["gke-prod-west-9cf5507e-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd8/instance/8081064835014695/,instance/8081064835014695,project/pso-cicd8,8081064835014695,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-12-07T11:11:04.528-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-staging-default-pool-c40bd04d-19a7", "type": "PERSISTENT"}], "id": "8081064835014695", "kind": "compute#instance", "labelFingerprint": "MjMzJPoWHLo=", "labels": {"gke-staging-9696e33a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "OQqW6cXU6YU=", "items": [{"key": "cluster-name", "value": "staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRYjJzeTVEK21HNWp3ZU9BM2M4dkx6ekFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNRFF4TWpBd0JnTlZCQU1NCktYVnpMWGRsYzNReExXSXRPVFF5TWpZek5EQTBOell0YzNSaFoybHVaMEF4TkRjNU5UTTFNRGMzTUlJQklqQU4KQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdm5mVkd4L1BvNXVrNzhkb2hrT2R6TDkraDhQbwoycWdQTUVDVzhGblhoVHBDeUc4azd5RHJNOHRWNkErSHJPUnN6UlhHaU5VamtSazBZbEJ1ZnNiUkJVQks2LzJpCkUrL3FaZyt5aTFrczd3WTJQTFNPYVRpV1FmV2pHOXdTdDVlKzcyVDc0c0VJNVNPNE1LV3Y2eWJmQzd5amNreDIKZSszV2MyU3FzM3c2UEhLYnZDMy9ITURxN1Z1TjdzSmd6enJVajlzazdhUEtCRm9ENlNWVDg1cUp3bjBERUVzZQpNV2ZiM0R2T3V5SGVuckUrT0R5bE1manJsTmhqVHZlaVVkK2EvTjJYaVV3QjJWaHZhTy9JNjBKTDNRREFmR1ZUClpLUThaejNsNkhkQ2hDMGhYS2ZhQ3l5ZWs4MVB0UWRYZEE5a1VVMGwrL3I2NzUvemM3a3Y0ZHVQTXdJREFRQUIKb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjODU5dkZnamJiSHZiK25EY2E4MWpLV2JuMkRYdk5OYUQzdHdFOFQvQzBJSVhhRTI0cU51CjV1ZWs4MnprclNXencrelhGbmgrbjloZmZubERtZDIrYVUrZklWZzN4bnQxNlpLK3NZMUI2L0RiakkzNkpDeksKY0l6NkhYWm8wQzBGZXgyOVhQVkU0T1pNNDBEUEgvZm1mRkFIRzdaWGNWUEpONU9kam5Kb0V4SjBLWjVoRTFTcwpjOGpNcTZmdmh0czRCbmJOeTlIRnIyY1FsTmV3b1dCUnRjWDVwRXBtVUpTR3FTaDBiMGwyNjIvTDBhMnRTMHphCnpjOVBpMTdkb1hLZjgvNWJ5bmpFVDdhQ1JYT2ZSdzBBUjlWTTMwaXo4KzNPSEQ0ZEVNKzlMT2p1a3RtVWpkQ3MKWXl5amtFTkRVaHRKdVVETHlLc08vUVpJcVl3MUgxUXUyUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:57:51+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-staging-9696e33a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: HaoxlbNn0of5qYViLOuxO0_bOTaycMT0pbStvNcuCC4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRZHpvRWMvVUtqK2dPek14OHFLVFErakFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNQkl4RURBT0JnTlZCQU1UCkIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM5dzM5MllyOWsKTlNnbXNVWEVIbW9OMHovcFN3SXFyRmhZWUc5SkN3eS8rbnkxenRQdEF6NkpVT2hHckhBdnl5NkU5SnJ4T3VoOAozbXI2ZmNQQ1FyVklXcW1FTUdPQTBKSVVxWjR5SVNuM3BzdmJNUFd1bXo1NGxhSVA5NlR0LzlNVnFiZW93UWNzCktMUGU0cHRyYXdtTU1TM3ZIU091c0dEQnBlY0pvQWhEeXNxMlpOK2dGQUlLS3hZTG5idTI0aGpJWnJYSTNuVXoKMWt5TFdJK05iMmV6REowL3VvcDNwWkMwTEZHYytxVkRKdm5vZVZRT05WTGthZ0l3UEl0bkZJcHNyTEI3WUdvcgpTc2wwU2trUkZZZ1BReUdydFM1eGdOOHVaMS9RdmpBWlM0RFIwUzM2TDZNYXdQeFNhVTYwOS9lS3c3d2lXRkZVClVhYlNwaWdGbHVMM0FnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVhQSlZvQk9iRQpQZFRPcHJNT21TbE5XUmVZVldCQmtTMDVNK2JST2pRanlEalpRQjBIaXdNWW5EWmk1MlJzOTZwa056bjM0dzUvCnVZMjNsKzh5MktUSmdaZ3pLQmk5Z1UzWEYxUU1qSEZ6eTdUVytmdnJacGl2WDRhWjc1VXJoUjF4anowV243RU4KSy9HaE83cUR5MHNqMnJBRkxrRVRBaXdrc1k4bFZiY1NEMlFveHlwV3MyNGxqbWxYUndLZ3ROSDFNUXRjSzBqQwo1TkpPSTY3SEc5YkllRzV0bTVYUHdkaU9Pekk4bGpGdW1rQXFpNVRQQ2ZOZTdKUjg5ODY3aWFnbGZRMWQ0RW9NCk8zUFJ3ZVA3Q2ZndTR2MXVPVjZ1TFdab1YyalNVZEMrZURGdlpYeWdzdW4xak9zQnV0OXZyVnFuR2duSnBNU0cKa3l1RTBNTlNUZUh4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdmNOL2RtSy9aRFVvSnJGRnhCNXFEZE0vNlVzQ0txeFlXR0J2U1FzTXYvcDh0YzdUCjdRTStpVkRvUnF4d0w4c3VoUFNhOFRyb2ZONXErbjNEd2tLMVNGcXBoREJqZ05DU0ZLbWVNaUVwOTZiTDJ6RDEKcnBzK2VKV2lEL2VrN2YvVEZhbTNxTUVITENpejN1S2JhMnNKakRFdDd4MGpyckJnd2FYbkNhQUlROHJLdG1UZgpvQlFDQ2lzV0M1Mjd0dUlZeUdhMXlONTFNOVpNaTFpUGpXOW5zd3lkUDdxS2Q2V1F0Q3hSblBxbFF5YjU2SGxVCkRqVlM1R29DTUR5TFp4U0tiS3l3ZTJCcUswckpkRXBKRVJXSUQwTWhxN1V1Y1lEZkxtZGYwTDR3R1V1QTBkRXQKK2krakdzRDhVbWxPdFBmM2lzTzhJbGhSVkZHbTBxWW9CWmJpOXdJREFRQUJBb0lCQVFDTnRhbkJFYnNWclRDZgp2SEI2SmJCVFJMZU1rMnc1eTl4cG14SmYvTFYzeENwUFp2WVNJQU1hYm1ZWEtQemFaQ1FJTzlaZFlQMXZDblhmCk8vM3RXdjJmMjd5TnI4a08wRExXNVZmeTNadEdpclBmcXk4OVJrZWZxemFNTUFabGlVN3I5WUxtcmNlYWJZYnQKWWxKb0pGWEw4SW41Nzh2T3ozNWgvbStMVzR2d2V2ekNHVzhhbHlaZm5XYnhIV1k0T3hDQmdsT0szZndKNHFwRwovRGpoN2xnQysyOHFuR1pXc0lJMGM4cnpxa2xYNTRpZHZOZi9IS3NGZ2ppSGtmby9FNDdNTEtsYmNPL2xCVUZmCkJCOWY4WEVBS0RvKzMzZ0lPamRDNTZrS2hMSk1US25NNENPUkE4V3ZhV1h5Z1lvMk5Ld0hJNllXQ1pkbXhsQUcKbENtZlRCSlJBb0dCQVBJb01sajJsaUFWYkJ4R3ZseXhWRExMRTdBMHhRRW1vTnVHQTZNMHp5NmhFaFJEd2hFWQplZ3dJSklTVTFXMTgwaURCTVJBeEY4YS84S1MwV3FvYW9lRXpLcmx5QVBHT0hpRTN3aTkveGszYm1YOUNIYTVECi9TVHRmUWRDQ0FIelZhWkxUakhleWpiY09sd2lBV3dZUCtycmVFTExwVkVGZjlUN0piclAvYzE1QW9HQkFNaWMKajJNYnVHajlkTmpsWS94UVBPMWJVb3VuTHc2VjRBYnY0Z1RxRm5HNzBKVlpmOVl5WlM3WnhMd2ZucktaRGV2WQp6QkVRQTBNVDhZcldBRDJUSGVydUVuUEhxREZxL1U1WURGa01VVkhvNnpDVnN3VTJ5WlpmL2U5OXJTUjEvSVJoCnlyWlgyMnBRS0k4QVQ3Y1g1ajI5aG5YY29VaEFEMUJhcmFxb2c4ZnZBb0dCQUxyWTJVQmJ4Q3F0WE9YVWtEM2wKZGhwYko2M21pYndCbWt6SWN6WVRJV25SVHFua1BuSUNlT21mdnMydUthQjVsNGsraUNUK1BHSlc1OCt1ZWVhVwo5aUZWNGJtRmhjVGM2OUtsdTJmN0o0QWIyYXlmejFjUGp0eFhnd2wrb2I4Zml3N3RQRUN1cjBqMVZQS1NLcGJGCmYwdzh0R2FWeTlGZ2RPcFpmeHRPTVgvQkFvR0FGZ3JsMG16OFVVVHdMdGpkcUo2a1l5d3lvTGVvK3dCSzBsaFAKVEZ6d1JHVHZvVWxwTzM3a0VVYktVQ1ZsU1poNXFCMTFKcmJNdFBVZkNETkZhWDZkdmUrVXhYWDlyQmhtWnRKVAo0UUR5ZW42T1FSTmh6VVBjMkpJSmsrUUtQMFJiajZ3ekd1QUNjdWNGM2RpWjZiTk5rQ0VnQWhsUSsyQldqbXk0ClFsVXJ6YThDZ1lFQXgxelRHbStvSWFNVnloZmhGOENUSXVjZnJyTXpPdFYra1FnM2FCUS9XeGRHYW90Wnl0c0IKR0lCYUI5NjVuc2V2NFZseHNEYjBheE9jV2Y1UlMxZUJjV0lZRDQ5Z1NaSGw4UldnME1yMm8yN3pSVVVDNnR0bgpMWVNjajcrUGMrZTJBcFIrVkZtL3dvQWtrVFNscW9DdXc1U012dUZOY1NnclFkY0lFSmxoVTlNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.225.247\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-staging-default-pool-c40bd04d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-staging-default-pool-c40bd04d-grp"}], "kind": "compute#metadata"}, "name": "gke-staging-default-pool-c40bd04d-19a7", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.99.244", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Yxfs4Gsj_qg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-staging-default-pool-c40bd04d-19a7", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "MjMzJPoWHLo=", "items": ["gke-staging-9696e33a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/forseti-testing-20170306bbb/instance/8133134100418772378/,instance/8133134100418772378,project/forseti-testing-20170306bbb,8133134100418772378,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-03-06T16:48:53.632-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/zones/us-central1-c/disks/forseti-security-vm", "type": "PERSISTENT"}], "id": "8133134100418772378", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/zones/us-central1-c/machineTypes/f1-micro", "metadata": {"fingerprint": "mykxFnGxAfk=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nsudo apt-get install -y git unzip git\nsudo apt-get install -y libmysqlclient-dev\nsudo apt-get install -y python-pip python-dev\n\nUSER_HOME=/home/ubuntu\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=forseti-testing-20170306bbb:us-central1:cloudsqlhenry20170306bbb=tcp:3306 &\n\n# Check if rules.yaml exists\nRULES_FILE=$(gsutil ls gs://scannerbuckethenry20170306bbb/rules/rules.yaml)\nif [ $? -eq 1 ]; then\n        cd $USER_HOME\n        read -d '' RULES_YAML << EOF\nrules:\n  - name: sample whitelist\n    mode: whitelist\n    resource:\n      - type: organization\n        applies_to: self_and_children\n        resource_ids:\n          - 660570133860\n    inherit_from_parents: true\n    bindings:\n      - role: roles/*\n        members:\n          - serviceAccount:*@*.gserviceaccount.com\nEOF\n        echo \"$RULES_YAML\" > $USER_HOME/rules.yaml\n        gsutil cp $USER_HOME/rules.yaml gs://scannerbuckethenry20170306bbb/rules/rules.yaml\nfi\n\n# Check whether protoc is installed\nPROTOC_PATH=$(which protoc)\nif [ -z \"$PROTOC_PATH\" ]; then\n        cd $USER_HOME\n        wget https://github.com/google/protobuf/releases/download/v3.2.0/protoc-3.2.0-linux-x86_64.zip\n        unzip -o protoc-3.2.0-linux-x86_64.zip\n        sudo cp bin/protoc /usr/local/bin\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\n\ncd $USER_HOME\ngit clone https://github.com/GoogleCloudPlatform/forseti-security\ncd forseti-security\npython setup.py install\n\n# Create the startup run script\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n/usr/local/bin/forseti_inventory --organization_id 660570133860 --db_name forseti_security --sendgrid_api_key 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 --email_sender goldspin@gmail.com --email_recipient henryc@google.com\n/usr/local/bin/forseti_scanner --rules gs://scannerbuckethenry20170306bbb/rules/rules.yaml --output_path gs://scannerbuckethenry20170306bbb/scanner_violations --organization_id 660570133860 --db_name forseti_security --sendgrid_api_key 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 --email_sender goldspin@gmail.com --email_recipient henryc@google.com\n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n\n(crontab -l 2>/dev/null; echo \"00 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "sTUAWxTSKP4=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/zones/us-central1-c/instances/forseti-security-vm", "serviceAccounts": [{"email": "70350545276-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti-testing-20170306bbb/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd5/instance/8179805736211092874/,instance/8179805736211092874,project/pso-cicd5,8179805736211092874,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:16:53.930-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/zones/us-west1-b/disks/deploygce-v000-nhfo", "type": "PERSISTENT"}], "id": "8179805736211092874", "kind": "compute#instance", "labelFingerprint": "h_9VEGn2d7c=", "labels": {"deploygce-1479587299981": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "_BLzCTqbH58=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":1.0,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/199065035802/global/instanceTemplates/deploygce-v000-1479589174785"}, {"key": "created-by", "value": "projects/199065035802/zones/us-west1-b/instanceGroupManagers/deploygce-v000"}], "kind": "compute#metadata"}, "name": "deploygce-v000-nhfo", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.198.111.160", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "yovh1kTjRgI=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/zones/us-west1-b/instances/deploygce-v000-nhfo", "serviceAccounts": [{"email": "199065035802-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "h_9VEGn2d7c=", "items": ["deploygce-1479587299981"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd5/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd9/instance/8201036077382800821/,instance/8201036077382800821,project/pso-cicd9,8201036077382800821,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:16:42.462-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/zones/us-west1-b/disks/deploygce-deploygce-v004-me6z", "type": "PERSISTENT"}], "id": "8201036077382800821", "kind": "compute#instance", "labelFingerprint": "UwAlz3yrin8=", "labels": {"deploygce-1479853002824": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "GTVuyRx9OOU=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.33,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":10.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/133851422272/global/instanceTemplates/deploygce-deploygce-v004-1480150835965"}, {"key": "created-by", "value": "projects/133851422272/zones/us-west1-b/instanceGroupManagers/deploygce-deploygce-v004"}], "kind": "compute#metadata"}, "name": "deploygce-deploygce-v004-me6z", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.234.70", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "SQPexVvjKxY=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/zones/us-west1-b/instances/deploygce-deploygce-v004-me6z", "serviceAccounts": [{"email": "133851422272-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "UwAlz3yrin8=", "items": ["deploygce-1479853002824"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd9/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd8/instance/8202621452896559143/,instance/8202621452896559143,project/pso-cicd8,8202621452896559143,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-12-07T11:11:04.742-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-staging-default-pool-c40bd04d-065r", "type": "PERSISTENT"}], "id": "8202621452896559143", "kind": "compute#instance", "labelFingerprint": "MjMzJPoWHLo=", "labels": {"gke-staging-9696e33a-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "OQqW6cXU6YU=", "items": [{"key": "cluster-name", "value": "staging"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lRYjJzeTVEK21HNWp3ZU9BM2M4dkx6ekFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNRFF4TWpBd0JnTlZCQU1NCktYVnpMWGRsYzNReExXSXRPVFF5TWpZek5EQTBOell0YzNSaFoybHVaMEF4TkRjNU5UTTFNRGMzTUlJQklqQU4KQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdm5mVkd4L1BvNXVrNzhkb2hrT2R6TDkraDhQbwoycWdQTUVDVzhGblhoVHBDeUc4azd5RHJNOHRWNkErSHJPUnN6UlhHaU5VamtSazBZbEJ1ZnNiUkJVQks2LzJpCkUrL3FaZyt5aTFrczd3WTJQTFNPYVRpV1FmV2pHOXdTdDVlKzcyVDc0c0VJNVNPNE1LV3Y2eWJmQzd5amNreDIKZSszV2MyU3FzM3c2UEhLYnZDMy9ITURxN1Z1TjdzSmd6enJVajlzazdhUEtCRm9ENlNWVDg1cUp3bjBERUVzZQpNV2ZiM0R2T3V5SGVuckUrT0R5bE1manJsTmhqVHZlaVVkK2EvTjJYaVV3QjJWaHZhTy9JNjBKTDNRREFmR1ZUClpLUThaejNsNkhkQ2hDMGhYS2ZhQ3l5ZWs4MVB0UWRYZEE5a1VVMGwrL3I2NzUvemM3a3Y0ZHVQTXdJREFRQUIKb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFjODU5dkZnamJiSHZiK25EY2E4MWpLV2JuMkRYdk5OYUQzdHdFOFQvQzBJSVhhRTI0cU51CjV1ZWs4MnprclNXencrelhGbmgrbjloZmZubERtZDIrYVUrZklWZzN4bnQxNlpLK3NZMUI2L0RiakkzNkpDeksKY0l6NkhYWm8wQzBGZXgyOVhQVkU0T1pNNDBEUEgvZm1mRkFIRzdaWGNWUEpONU9kam5Kb0V4SjBLWjVoRTFTcwpjOGpNcTZmdmh0czRCbmJOeTlIRnIyY1FsTmV3b1dCUnRjWDVwRXBtVUpTR3FTaDBiMGwyNjIvTDBhMnRTMHphCnpjOVBpMTdkb1hLZjgvNWJ5bmpFVDdhQ1JYT2ZSdzBBUjlWTTMwaXo4KzNPSEQ0ZEVNKzlMT2p1a3RtVWpkQ3MKWXl5amtFTkRVaHRKdVVETHlLc08vUVpJcVl3MUgxUXUyUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.0.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.3.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:57:51+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-staging-9696e33a\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: HaoxlbNn0of5qYViLOuxO0_bOTaycMT0pbStvNcuCC4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCVENDQWUyZ0F3SUJBZ0lRZHpvRWMvVUtqK2dPek14OHFLVFErakFOQmdrcWhraUc5dzBCQVFzRkFEQTAKTVRJd01BWURWUVFERENsMWN5MTNaWE4wTVMxaUxUazBNakkyTXpRd05EYzJMWE4wWVdkcGJtZEFNVFEzT1RVegpOVEEzTnpBZUZ3MHhOakV4TVRrd05UVTNOVGRhRncweU1URXhNVGd3TlRVM05UZGFNQkl4RURBT0JnTlZCQU1UCkIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUM5dzM5MllyOWsKTlNnbXNVWEVIbW9OMHovcFN3SXFyRmhZWUc5SkN3eS8rbnkxenRQdEF6NkpVT2hHckhBdnl5NkU5SnJ4T3VoOAozbXI2ZmNQQ1FyVklXcW1FTUdPQTBKSVVxWjR5SVNuM3BzdmJNUFd1bXo1NGxhSVA5NlR0LzlNVnFiZW93UWNzCktMUGU0cHRyYXdtTU1TM3ZIU091c0dEQnBlY0pvQWhEeXNxMlpOK2dGQUlLS3hZTG5idTI0aGpJWnJYSTNuVXoKMWt5TFdJK05iMmV6REowL3VvcDNwWkMwTEZHYytxVkRKdm5vZVZRT05WTGthZ0l3UEl0bkZJcHNyTEI3WUdvcgpTc2wwU2trUkZZZ1BReUdydFM1eGdOOHVaMS9RdmpBWlM0RFIwUzM2TDZNYXdQeFNhVTYwOS9lS3c3d2lXRkZVClVhYlNwaWdGbHVMM0FnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBS0JnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVhQSlZvQk9iRQpQZFRPcHJNT21TbE5XUmVZVldCQmtTMDVNK2JST2pRanlEalpRQjBIaXdNWW5EWmk1MlJzOTZwa056bjM0dzUvCnVZMjNsKzh5MktUSmdaZ3pLQmk5Z1UzWEYxUU1qSEZ6eTdUVytmdnJacGl2WDRhWjc1VXJoUjF4anowV243RU4KSy9HaE83cUR5MHNqMnJBRkxrRVRBaXdrc1k4bFZiY1NEMlFveHlwV3MyNGxqbWxYUndLZ3ROSDFNUXRjSzBqQwo1TkpPSTY3SEc5YkllRzV0bTVYUHdkaU9Pekk4bGpGdW1rQXFpNVRQQ2ZOZTdKUjg5ODY3aWFnbGZRMWQ0RW9NCk8zUFJ3ZVA3Q2ZndTR2MXVPVjZ1TFdab1YyalNVZEMrZURGdlpYeWdzdW4xak9zQnV0OXZyVnFuR2duSnBNU0cKa3l1RTBNTlNUZUh4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBdmNOL2RtSy9aRFVvSnJGRnhCNXFEZE0vNlVzQ0txeFlXR0J2U1FzTXYvcDh0YzdUCjdRTStpVkRvUnF4d0w4c3VoUFNhOFRyb2ZONXErbjNEd2tLMVNGcXBoREJqZ05DU0ZLbWVNaUVwOTZiTDJ6RDEKcnBzK2VKV2lEL2VrN2YvVEZhbTNxTUVITENpejN1S2JhMnNKakRFdDd4MGpyckJnd2FYbkNhQUlROHJLdG1UZgpvQlFDQ2lzV0M1Mjd0dUlZeUdhMXlONTFNOVpNaTFpUGpXOW5zd3lkUDdxS2Q2V1F0Q3hSblBxbFF5YjU2SGxVCkRqVlM1R29DTUR5TFp4U0tiS3l3ZTJCcUswckpkRXBKRVJXSUQwTWhxN1V1Y1lEZkxtZGYwTDR3R1V1QTBkRXQKK2krakdzRDhVbWxPdFBmM2lzTzhJbGhSVkZHbTBxWW9CWmJpOXdJREFRQUJBb0lCQVFDTnRhbkJFYnNWclRDZgp2SEI2SmJCVFJMZU1rMnc1eTl4cG14SmYvTFYzeENwUFp2WVNJQU1hYm1ZWEtQemFaQ1FJTzlaZFlQMXZDblhmCk8vM3RXdjJmMjd5TnI4a08wRExXNVZmeTNadEdpclBmcXk4OVJrZWZxemFNTUFabGlVN3I5WUxtcmNlYWJZYnQKWWxKb0pGWEw4SW41Nzh2T3ozNWgvbStMVzR2d2V2ekNHVzhhbHlaZm5XYnhIV1k0T3hDQmdsT0szZndKNHFwRwovRGpoN2xnQysyOHFuR1pXc0lJMGM4cnpxa2xYNTRpZHZOZi9IS3NGZ2ppSGtmby9FNDdNTEtsYmNPL2xCVUZmCkJCOWY4WEVBS0RvKzMzZ0lPamRDNTZrS2hMSk1US25NNENPUkE4V3ZhV1h5Z1lvMk5Ld0hJNllXQ1pkbXhsQUcKbENtZlRCSlJBb0dCQVBJb01sajJsaUFWYkJ4R3ZseXhWRExMRTdBMHhRRW1vTnVHQTZNMHp5NmhFaFJEd2hFWQplZ3dJSklTVTFXMTgwaURCTVJBeEY4YS84S1MwV3FvYW9lRXpLcmx5QVBHT0hpRTN3aTkveGszYm1YOUNIYTVECi9TVHRmUWRDQ0FIelZhWkxUakhleWpiY09sd2lBV3dZUCtycmVFTExwVkVGZjlUN0piclAvYzE1QW9HQkFNaWMKajJNYnVHajlkTmpsWS94UVBPMWJVb3VuTHc2VjRBYnY0Z1RxRm5HNzBKVlpmOVl5WlM3WnhMd2ZucktaRGV2WQp6QkVRQTBNVDhZcldBRDJUSGVydUVuUEhxREZxL1U1WURGa01VVkhvNnpDVnN3VTJ5WlpmL2U5OXJTUjEvSVJoCnlyWlgyMnBRS0k4QVQ3Y1g1ajI5aG5YY29VaEFEMUJhcmFxb2c4ZnZBb0dCQUxyWTJVQmJ4Q3F0WE9YVWtEM2wKZGhwYko2M21pYndCbWt6SWN6WVRJV25SVHFua1BuSUNlT21mdnMydUthQjVsNGsraUNUK1BHSlc1OCt1ZWVhVwo5aUZWNGJtRmhjVGM2OUtsdTJmN0o0QWIyYXlmejFjUGp0eFhnd2wrb2I4Zml3N3RQRUN1cjBqMVZQS1NLcGJGCmYwdzh0R2FWeTlGZ2RPcFpmeHRPTVgvQkFvR0FGZ3JsMG16OFVVVHdMdGpkcUo2a1l5d3lvTGVvK3dCSzBsaFAKVEZ6d1JHVHZvVWxwTzM3a0VVYktVQ1ZsU1poNXFCMTFKcmJNdFBVZkNETkZhWDZkdmUrVXhYWDlyQmhtWnRKVAo0UUR5ZW42T1FSTmh6VVBjMkpJSmsrUUtQMFJiajZ3ekd1QUNjdWNGM2RpWjZiTk5rQ0VnQWhsUSsyQldqbXk0ClFsVXJ6YThDZ1lFQXgxelRHbStvSWFNVnloZmhGOENUSXVjZnJyTXpPdFYra1FnM2FCUS9XeGRHYW90Wnl0c0IKR0lCYUI5NjVuc2V2NFZseHNEYjBheE9jV2Y1UlMxZUJjV0lZRDQ5Z1NaSGw4UldnME1yMm8yN3pSVVVDNnR0bgpMWVNjajcrUGMrZTJBcFIrVkZtL3dvQWtrVFNscW9DdXc1U012dUZOY1NnclFkY0lFSmxoVTlNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.225.247\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.3.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-staging-default-pool-c40bd04d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-staging-default-pool-c40bd04d-grp"}], "kind": "compute#metadata"}, "name": "gke-staging-default-pool-c40bd04d-065r", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.110.39", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "Rr36lSI2TqU=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.4", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-staging-default-pool-c40bd04d-065r", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "MjMzJPoWHLo=", "items": ["gke-staging-9696e33a-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/alexamiesforseti/instance/8211185501727952708/,instance/8211185501727952708,project/alexamiesforseti,8211185501727952708,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-10-31T10:23:55.501-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/zones/us-central1-c/disks/forseti-security-20171031101848-vm", "type": "PERSISTENT"}], "id": "8211185501727952708", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "g41YcWCQXPU=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=alexamiesforseti:us-central1:forseti-security-20171031101848=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch master --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://alexamiesforseti-data-101848/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://alexamiesforseti-data-101848/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171031101848-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.197.144.126", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "b3fXe4_7978=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/zones/us-central1-c/instances/forseti-security-20171031101848-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-101848@alexamiesforseti.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/alexamiesforseti/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/8435067075815693151/,instance/8435067075815693151,project/pso-cicd8,8435067075815693151,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T00:07:12.662-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/gke-canary-west-default-pool-496ebc1d-v8i8", "type": "PERSISTENT"}], "id": "8435067075815693151", "kind": "compute#instance", "labelFingerprint": "cireh9PCZXs=", "labels": {"gke-canary-west-69bb2963-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "taq0rcmX5S8=", "items": [{"key": "cluster-name", "value": "canary-west"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIakNDQWdhZ0F3SUJBZ0lSQUtjYjdIK2h3VlBvRUJGalJsZVFZQm93RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE1sb1hEVEl4TVRFeE9EQTFOVGd4TWxvd09ERTJNRFFHCkExVUVBd3d0ZFhNdGQyVnpkREV0WWkwNU5ESXlOak0wTURRM05pMWpZVzVoY25rdGQyVnpkRUF4TkRjNU5UTTEKTURreU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdHJ6N1daQ1cyQk42QmFjTQo0NXV6bGJOOWc5T0o1d3FKSWZKeDVoZ1RPQ3FCWW9tdmJVTWdGQ1JXUXFMcUlobXRyMzIzSktFdHBaTjc1dk9aCkVQMzZ4VzZ5NzFGam9GM1BsMThMcmtzNEEza1F5ejU1VkVYbnFPWm9ET0NHVS8wTEI0Ulh6ZEhaZU05VzdJWlAKM3lLeGVKcHNkMXBWRGgyNjhXdGhiS3dUMWRYenFBTWtjVHVrTW1EQmtsL3VoY3g0VHpxVjlRcWhKM1JTaUpMaApEY3lpem4vYkpYU0swNmpaYUtoL21zV2pSQ1FkMFplbkVKWWFyOVRJQ3Vkbms4eXo0YUZxWHAwOVkyb1c3SGlDCmQ3cmlPMTR0RnVLUllCNUU2WEtucHVVZzdadVVuVmtESFdSS0tONEp5aXU5N0tEZmJuZ2M1cGk5SzM0bFNJN1kKNGxaWFB3SURBUUFCb3lNd0lUQU9CZ05WSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTgpCZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFOMnlpZmIxM0VpMisydFRoWEkvWWtPelBERE5DeCtEVVNLWUxpVTRGCnVuUE5ZMVEvMCtwWUxPQW1DNysrekxmS1U3a2xuT2VCWUxiUHlmdW8wQzl3QjI4SFVQWVZkb2hKY241bExVU0MKYVFaRm9qTTgrYzAzN2ZuNVlCTFoyelBJSWhmKy9vaVhkbis2TDR0aHR1YUVVdmtBZm54Nkx2MUt1Ryt2dWJIcQpQZjJoZ1Vob3VrRnFWN3M5OVcvN1ZjT0djRWYybkxQdisvSTNqWjlJSkFrUm8vaFFtUHlWeHgzVUQ4LzlTUlV6CmhYc21NdTRPQUxVMnJ0aVRLejlhaDV3TEN4Q0dNTEhRRFFkbWRJUC94MG51ZmkrOU4rc0R6M1hSYSt6c3F2VGIKQmVVN21sajJleE9RZnAvM2dKbGVPRk5mT3BsNW1FT1FKK2hBbzZmdWs4TVBFUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.44.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.47.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-19T05:58:02+00:00\nEVICTION_HARD: memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-canary-west-69bb2963\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: e9c52530a14612c91f45e017743925a0dba6dcc8\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: qj61a229MxXzLhQ5LDHaDFU_rc8q7AcI41OGzPI1MyE=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDakNDQWZLZ0F3SUJBZ0lSQUxZb1dwWmord3VLdS9VVFV6WnM0b0F3RFFZSktvWklodmNOQVFFTEJRQXcKT0RFMk1EUUdBMVVFQXd3dGRYTXRkMlZ6ZERFdFlpMDVOREl5TmpNME1EUTNOaTFqWVc1aGNua3RkMlZ6ZEVBeApORGM1TlRNMU1Ea3lNQjRYRFRFMk1URXhPVEExTlRneE0xb1hEVEl4TVRFeE9EQTFOVGd4TTFvd0VqRVFNQTRHCkExVUVBeE1IYTNWaVpXeGxkRENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFPQzYKUktnZU5YeGZJYzQ1MjZUMjBzWWF6YkdwNU9JM0FIWjFyTlZsQnQ3YUE3OFFmQ1JOTzdBVGtkb25BMDRHZjlMdgpZb2RsamhxMVBTcVN3WWFyV1lrNHdOL205R1kxQ0RpS1NSQkQ0cERhcWJTK0VsK09JYlVudmo4c1gxMHh0ODFQCkZ1SWtOdW5iNGtpb2tJTXZSTU9IS3VKMktOa0VyVW5tb3EzREZoa3BPT09ET3VUQTVzNW9OQlp0bjhFa0JWU3kKRE5BV1A0SWs4WEladSt1RDRyekNodUhLVlNLV3dwdW5ERFNZMkZ5b3BXQXhCQkJERVZ4YkJpbWlidFVURG00VgppVGdKVXMvbnUyK0trYXN4a0haTUV4N1RxZVJ5ekRieFBkU1lkbXRkS0hjSG5JRFd4WWhWR3dkYkRzanZMcjJSClQ5cm9CSDRNdmErKzZaTlhPNDBDQXdFQUFhTTFNRE13RGdZRFZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU0KTUFvR0NDc0dBUVVGQndNQ01Bd0dBMVVkRXdFQi93UUNNQUF3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUE5dgpDT0d2V0IxMWZPMmc5aTFLK0srMHh2SWNtUUlRTFY5NUZZd2dVcDJNOGdSZTEvWGdqVE1CbkNpNFFRU216M3ZsCmd3Y1RseUJLY0Vxc3ZoZFZ2S1VWVmJ4YUtsRlV0ZXJFUTlDc1JwMjlZbjJtQk9NUFBpRGFVd3cyUU9GUkwvYTEKNEVES2JwREFWbGt3UFVqaXd4Z3ZmWFV6SVVZb254RE0raGw1ZkxhdURTNnhETXhIbVgvZ3dOSlYwVWJqMFVYZApwVXJqR0hxN2V2Q2lCTTRaM3hFWjNjQ0hmb0Z6WVNWS0RiWVBMQ2tVQ2hvdmhQMU55SVRBL2FuYUgxQzk5K0ZLCnpKaW5DNXo2UVZSUUJLUlcweCtHV0F3UUNkSWEzVEdMU2RJYVN1YzZXT1E1UzFFdTlGdjFDQ2kvME5oM3JHOWgKWFlVNTN0bnJRQWppM3RQUkQ0cz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNExwRXFCNDFmRjhoempuYnBQYlN4aHJOc2FuazRqY0FkbldzMVdVRzN0b0R2eEI4CkpFMDdzQk9SMmljRFRnWi8wdTlpaDJXT0dyVTlLcExCaHF0WmlUakEzK2IwWmpVSU9JcEpFRVBpa05xcHRMNFMKWDQ0aHRTZStQeXhmWFRHM3pVOFc0aVEyNmR2aVNLaVFneTlFdzRjcTRuWW8yUVN0U2VhaXJjTVdHU2s0NDRNNgo1TURtem1nMEZtMmZ3U1FGVkxJTTBCWS9naVR4Y2htNzY0UGl2TUtHNGNwVklwYkNtNmNNTkpqWVhLaWxZREVFCkVFTVJYRnNHS2FKdTFSTU9iaFdKT0FsU3orZTdiNHFScXpHUWRrd1RIdE9wNUhMTU52RTkxSmgyYTEwb2R3ZWMKZ05iRmlGVWJCMXNPeU84dXZaRlAydWdFZmd5OXI3N3BrMWM3alFJREFRQUJBb0lCQVFDRzJKNXI5cnlIWlpvbQpZZWRmWkUveldaQUZ4SGs0R0dMcHNoREVkM3VZNjE4R0hnRXYwencybW5lUlhJbUtIekpDUXl4dkxFd0owS2prClMrMWVQcUZhU3JqSllZOVRhUTBHeUV1eE85ck9xcmJjWXBVcHkyS0VqbFdGR0w0Y2NNSG1xMGVDNk5JZW43ZDMKZTlaRE1YRGtsczN2MTVFSkw5by9sdW9VdEJRbGdjdWtiZkRnRjhQQUhsV1JWT1BzTmdnT0puNEl1cDdaWnJOMgp5WlVJaEJ3UU9iZk5uQXpOanI4SFVtYzBUSlBWTjd2cDdpWmFvcm91d2U1UkFabDlLNWNvQk8vaDBEMkl4Z3hyCjNZMEVSWnhrUXdqR2lHaUdTcnQ4ZkJtajFmQ3hQMkVxQWV6UUlibGg5SzNyNWFhMHZwMWpvMDZMY3h0NzY0TlAKQVFUZ003aGhBb0dCQU9WOWJDYllFcGk4ZjN0RDI3YklndVRIOFlpdTFiMGNWZThnbEFzQnNia2NwNS80QUNxVgprcXZLNDY0eHNuclYwMlBFdnZ6UkhCOGU4VTNHTlQvT3ZYblFuODhJRnFtSUVVNzkwN2JvVXcwSlRleElsT2FECmRtN0RadG5PbGwyQUNIeUxUL25OQ1ZNNUhOZzF4TXJUYlNHL201eVFJNG1MalAzY2s0cFVrbWFaQW9HQkFQcXcKQXlMN29KMmlWN2VPSjZrN2liajFFMHRTenFlZTh0UEFFb0FZWjQ5YVMzcDArbFIydmdBT2ZKMWQvbUVid3dQSwp0T0JMQ2VHRStaMFVlQkpLcis5bmJ4blU2YzQ2L3hIaTNMckpOS2tVWHhIMmJiNlRsM3U0Z2poVWFtVVFWUkRrCmdQcmd3WTVoekdtK2JtYldFNHVNWjJNalIrOGw0WjN4dVh1aUd2a1ZBb0dCQU1RR09sZUR3WDdOcEdiNk03Y1IKMXh6czNSZlBuNnNGaFRIWk5odWd1dHBQNjY3cys5ZGtKQUN5TVlFZDJrS3FXd0toa0RJTHZHV28zSjErYlFXdgo1cEVpN3g2ODNmNjV4MjhkeWJZM0JKbmlGTGw3MWhTQXZxMG1JN2h3aW1nYmNTUlJLMk5KREdvV0l0bGNORmk3CitFQVhseWhJeHRJNmJaaDZ6VndmbVY0aEFvR0JBTENNZ3prQTg2WHdya3dVYm5RdC9SbG9aL1UxVlZzUmd6eUQKMmNPaTdGUTJLRkFPMERucUFuZXh2Q3RzQmZuSC9uak9Lc0tIdG1iQUtyZG9zZ05YM0Q0RG4yZ1czYTZqTi80Vgp3cFE5bmJ1eUlCNWJhZ0M4bXdQRDl0bkxBYjg1V0Y5MFBpM3hXZjkzZXVuQjlxaXYvY1hhMVBrcDRNQlk4bU0wCjJRZHNMQWpkQW9HQWRXcXcweHNrbnh1Vk9yajhjSTJSclNWcnc5c3VieUYvQXpoR3g2UEFnd2taakc0MGVNVTcKZlZCL203bXIrOHREYmF6V0Jxa3hwUWxBUkk4Q3VGeVduSjJ0cUZaVlE0a1B3bzRkem1aRW8xSE51MzN3czM0Zgp0YUJhalFiMWh0czVlZTYxcXIwYWNVd2I5RDE2VUJmM0VNc2Y0ZndwRG1tSHRsa1lHdjNIYTRrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.229.72\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 95e855d893e4549b935aed8736f3a2372ae7ccd3\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 5df19e3745bbc8c7d1a5bf6d61d9e1b0d189db64\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.6/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.47.240.0/20\nZONE: us-west1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "instance-template", "value": "projects/94226340476/global/instanceTemplates/gke-canary-west-default-pool-496ebc1d"}, {"key": "created-by", "value": "projects/94226340476/zones/us-west1-b/instanceGroupManagers/gke-canary-west-default-pool-496ebc1d-grp"}], "kind": "compute#metadata"}, "name": "gke-canary-west-default-pool-496ebc1d-v8i8", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.198.2.114", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "AnzSlJW9e_k=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.18", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/gke-canary-west-default-pool-496ebc1d-v8i8", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "cireh9PCZXs=", "items": ["gke-canary-west-69bb2963-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
organization/660570133860/project/joe-project-p2/instance/843680348234147300/,instance/843680348234147300,project/joe-project-p2,843680348234147300,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-16T10:19:08.784-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/disks/forseti-security-20180416101139-vm", "type": "PERSISTENT"}], "id": "843680348234147300", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "obYhE4yM79g=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=joe-project-p2:us-central1:forseti-security-20180416101139=tcp:3306 &\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio==1.4.0 grpcio-tools==1.4.0 google-apputils\n\n# Download Forseti src; see DOWNLOAD_FORSETI.\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch v1.1.11 --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules\n\n# Build protos.\n\n# Build protos separately.\npython build_protos.py --clean\n\n\npython setup.py install\n\n# Create the startup run script.\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n\n# Put the config files in place.\ngsutil cp gs://joe-project-p2-data-101139/configs/forseti_conf.yaml $USER_HOME/forseti-security/configs/forseti_conf.yaml\ngsutil cp -r gs://joe-project-p2-data-101139/rules $USER_HOME/forseti-security/\n\nif [ ! -f $USER_HOME/forseti-security/configs/forseti_conf.yaml ]; then\n    echo Forseti conf not found, exiting.\n    exit 1\nfi\n\n# inventory command\n/usr/local/bin/forseti_inventory --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# scanner command\n/usr/local/bin/forseti_scanner --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n# notifier command\n/usr/local/bin/forseti_notifier --forseti_config $USER_HOME/forseti-security/configs/forseti_conf.yaml \n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\nsudo su $USER -c $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -u $USER -\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180416101139-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.192.159.229", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "JfYyg8ZDgcg=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c/instances/forseti-security-20180416101139-vm", "serviceAccounts": [{"email": "forseti-gcp-reader-101139@joe-project-p2.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/joe-project-p2/zones/us-central1-c"}"
organization/660570133860/project/cicd-prod/instance/8498040332985492144/,instance/8498040332985492144,project/cicd-prod,8498040332985492144,instance,0,,,"{"canIpForward": true, "cpuPlatform": "Intel Haswell", "creationTimestamp": "2016-11-12T10:15:59.839-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/google-containers/global/licenses/gci-public", "https://www.googleapis.com/compute/v1/projects/gke-node-images/global/licenses/gke-node"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/disks/gke-redditmobile-canary--default-pool-275d4b28-f3f9", "type": "PERSISTENT"}], "id": "8498040332985492144", "kind": "compute#instance", "labelFingerprint": "3e1MlB0crYY=", "labels": {"gke-redditmobile-canary-east-d3566425-node": "", "goog-gke-node": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "0SbGHL4pwAY=", "items": [{"key": "gci-update-strategy", "value": "update_disabled"}, {"key": "gci-ensure-gke-docker", "value": "true"}, {"key": "configure-sh", "value": "#!/bin/bash\n\n# Copyright 2016 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Due to the GCE custom metadata size limit, we split the entire script into two\n# files configure.sh and configure-helper.sh. The functionality of downloading\n# kubernetes configuration, manifests, docker images, and binary files are\n# put in configure.sh, which is uploaded via GCE custom metadata.\n\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction set-broken-motd {\n  cat > /etc/motd <<EOF\nBroken (or in progress) Kubernetes node setup! Check the cluster initialization status\nusing the following commands.\n\nMaster instance:\n  - sudo systemctl status kube-master-installation\n  - sudo systemctl status kube-master-configuration\n\nNode instance:\n  - sudo systemctl status kube-node-installation\n  - sudo systemctl status kube-node-configuration\nEOF\n}\n\nfunction download-kube-env {\n  # Fetch kube-env from GCE metadata server.\n  local -r tmp_kube_env=\"/tmp/kube-env.yaml\"\n  curl --fail --retry 5 --retry-delay 3 --silent --show-error \\\n    -H \"X-Google-Metadata-Request: True\" \\\n    -o \"${tmp_kube_env}\" \\\n    http://metadata.google.internal/computeMetadata/v1/instance/attributes/kube-env\n  # Convert the yaml format file into a shell-style file.\n  eval $(python -c '''\nimport pipes,sys,yaml\nfor k,v in yaml.load(sys.stdin).iteritems():\n  print(\"readonly {var}={value}\".format(var = k, value = pipes.quote(str(v))))\n''' < \"${tmp_kube_env}\" > \"${KUBE_HOME}/kube-env\")\n  rm -f \"${tmp_kube_env}\"\n}\n\nfunction validate-hash {\n  local -r file=\"$1\"\n  local -r expected=\"$2\"\n\n  actual=$(sha1sum ${file} | awk '{ print $1 }') || true\n  if [[ \"${actual}\" != \"${expected}\" ]]; then\n    echo \"== ${file} corrupted, sha1 ${actual} doesn't match expected ${expected} ==\"\n    return 1\n  fi\n}\n\n# Retry a download until we get it. Takes a hash and a set of URLs.\n#\n# $1 is the sha1 of the URL. Can be \"\" if the sha1 is unknown.\n# $2+ are the URLs to download.\nfunction download-or-bust {\n  local -r hash=\"$1\"\n  shift 1\n\n  local -r urls=( $* )\n  while true; do\n    for url in \"${urls[@]}\"; do\n      local file=\"${url##*/}\"\n      rm -f \"${file}\"\n      if ! curl -f --ipv4 -Lo \"${file}\" --connect-timeout 20 --max-time 300 --retry 6 --retry-delay 10 \"${url}\"; then\n        echo \"== Failed to download ${url}. Retrying. ==\"\n      elif [[ -n \"${hash}\" ]] && ! validate-hash \"${file}\" \"${hash}\"; then\n        echo \"== Hash validation of ${url} failed. Retrying. ==\"\n      else\n        if [[ -n \"${hash}\" ]]; then\n          echo \"== Downloaded ${url} (SHA1 = ${hash}) ==\"\n        else\n          echo \"== Downloaded ${url} ==\"\n        fi\n        return\n      fi\n    done\n  done\n}\n\nfunction split-commas {\n  echo $1 | tr \",\" \"\\n\"\n}\n\nfunction install-rkt {\n    local -r rkt_binary=\"rkt-v1.18.0\"\n    local -r rkt_sha1=\"75fc8f29c79bc9e505f3e7f6e8fadf2425c21967\"\n    download-or-bust \"${rkt_sha1}\" \"https://storage.googleapis.com/kubernetes-release/rkt/${rkt_binary}\"\n    local -r rkt_dst=\"${KUBE_HOME}/bin/rkt\"\n    mv \"${KUBE_HOME}/${rkt_binary}\" \"${rkt_dst}\"\n    chmod a+x \"${rkt_dst}\"\n}\n\n# Downloads kubernetes binaries and kube-system manifest tarball, unpacks them,\n# and places them into suitable directories. Files are placed in /home/kubernetes.\nfunction install-kube-binary-config {\n  cd \"${KUBE_HOME}\"\n  local -r server_binary_tar_urls=( $(split-commas \"${SERVER_BINARY_TAR_URL}\") )\n  local -r server_binary_tar=\"${server_binary_tar_urls[0]##*/}\"\n  if [[ -n \"${SERVER_BINARY_TAR_HASH:-}\" ]]; then\n    local -r server_binary_tar_hash=\"${SERVER_BINARY_TAR_HASH}\"\n  else\n    echo \"Downloading binary release sha1 (not found in env)\"\n    download-or-bust \"\" \"${server_binary_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r server_binary_tar_hash=$(cat \"${server_binary_tar}.sha1\")\n  fi\n  echo \"Downloading binary release tar\"\n  download-or-bust \"${server_binary_tar_hash}\" \"${server_binary_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${server_binary_tar}\" -C \"${KUBE_HOME}\" --overwrite\n  # Copy docker_tag and image files to ${KUBE_HOME}/kube-docker-files.\n  src_dir=\"${KUBE_HOME}/kubernetes/server/bin\"\n  dst_dir=\"${KUBE_HOME}/kube-docker-files\"\n  mkdir -p \"${dst_dir}\"\n  cp \"${src_dir}/\"*.docker_tag \"${dst_dir}\"\n  if [[ \"${KUBERNETES_MASTER:-}\" == \"false\" ]]; then\n    cp \"${src_dir}/kube-proxy.tar\" \"${dst_dir}\"\n  else\n    cp \"${src_dir}/kube-apiserver.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-controller-manager.tar\" \"${dst_dir}\"\n    cp \"${src_dir}/kube-scheduler.tar\" \"${dst_dir}\"\n    cp -r \"${KUBE_HOME}/kubernetes/addons\" \"${dst_dir}\"\n  fi\n  local -r kube_bin=\"${KUBE_HOME}/bin\"\n  mv \"${src_dir}/kubelet\" \"${kube_bin}\"\n  mv \"${src_dir}/kubectl\" \"${kube_bin}\"\n\n  if [[ \"${NETWORK_PROVIDER:-}\" == \"kubenet\" ]] || \\\n     [[ \"${NETWORK_PROVIDER:-}\" == \"cni\" ]]; then\n    #TODO(andyzheng0831): We should make the cni version number as a k8s env variable.\n    local -r cni_tar=\"cni-07a8a28637e97b22eb8dfe710eeae1344f69d16e.tar.gz\"\n    local -r cni_sha1=\"19d49f7b2b99cd2493d5ae0ace896c64e289ccbb\"\n    download-or-bust \"${cni_sha1}\" \"https://storage.googleapis.com/kubernetes-release/network-plugins/${cni_tar}\"\n    local -r cni_dir=\"${KUBE_HOME}/cni\"\n    mkdir -p \"${cni_dir}\"\n    tar xzf \"${KUBE_HOME}/${cni_tar}\" -C \"${cni_dir}\" --overwrite\n    mv \"${cni_dir}/bin\"/* \"${kube_bin}\"\n    rmdir \"${cni_dir}/bin\"\n    rm -f \"${KUBE_HOME}/${cni_tar}\"\n  fi\n\n  mv \"${KUBE_HOME}/kubernetes/LICENSES\" \"${KUBE_HOME}\"\n  mv \"${KUBE_HOME}/kubernetes/kubernetes-src.tar.gz\" \"${KUBE_HOME}\"\n\n  # Put kube-system pods manifests in ${KUBE_HOME}/kube-manifests/.\n  dst_dir=\"${KUBE_HOME}/kube-manifests\"\n  mkdir -p \"${dst_dir}\"\n  local -r manifests_tar_urls=( $(split-commas \"${KUBE_MANIFESTS_TAR_URL}\") )\n  local -r manifests_tar=\"${manifests_tar_urls[0]##*/}\"\n  if [ -n \"${KUBE_MANIFESTS_TAR_HASH:-}\" ]; then\n    local -r manifests_tar_hash=\"${KUBE_MANIFESTS_TAR_HASH}\"\n  else\n    echo \"Downloading k8s manifests sha1 (not found in env)\"\n    download-or-bust \"\" \"${manifests_tar_urls[@]/.tar.gz/.tar.gz.sha1}\"\n    local -r manifests_tar_hash=$(cat \"${manifests_tar}.sha1\")\n  fi\n  echo \"Downloading k8s manifests tar\"\n  download-or-bust \"${manifests_tar_hash}\" \"${manifests_tar_urls[@]}\"\n  tar xzf \"${KUBE_HOME}/${manifests_tar}\" -C \"${dst_dir}\" --overwrite\n  local -r kube_addon_registry=\"${KUBE_ADDON_REGISTRY:-gcr.io/google_containers}\"\n  if [[ \"${kube_addon_registry}\" != \"gcr.io/google_containers\" ]]; then\n    find \"${dst_dir}\" -name \\*.yaml -or -name \\*.yaml.in | \\\n      xargs sed -ri \"s@(image:\\s.*)gcr.io/google_containers@\\1${kube_addon_registry}@\"\n    find \"${dst_dir}\" -name \\*.manifest -or -name \\*.json | \\\n      xargs sed -ri \"s@(image\\\":\\s+\\\")gcr.io/google_containers@\\1${kube_addon_registry}@\"\n  fi\n  cp \"${dst_dir}/kubernetes/gci-trusty/gci-configure-helper.sh\" \"${KUBE_HOME}/bin/configure-helper.sh\"\n  cp \"${dst_dir}/kubernetes/gci-trusty/health-monitor.sh\" \"${KUBE_HOME}/bin/health-monitor.sh\"\n  chmod -R 755 \"${kube_bin}\"\n\n  # Install rkt binary to allow mounting storage volumes in GCI\n  install-rkt\n\n  # Clean up.\n  rm -rf \"${KUBE_HOME}/kubernetes\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}\"\n  rm -f \"${KUBE_HOME}/${server_binary_tar}.sha1\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}\"\n  rm -f \"${KUBE_HOME}/${manifests_tar}.sha1\"\n}\n\n\n######### Main Function ##########\necho \"Start to install kubernetes files\"\nset-broken-motd\nKUBE_HOME=\"/home/kubernetes\"\ndownload-kube-env\nsource \"${KUBE_HOME}/kube-env\"\ninstall-kube-binary-config\necho \"Done for installing kubernetes files\"\n"}, {"key": "cluster-name", "value": "redditmobile-canary-east"}, {"key": "kube-env", "value": "ADMISSION_CONTROL: NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota\nALLOCATE_NODE_CIDRS: \"true\"\nCA_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPRENDQWlDZ0F3SUJBZ0lSQUtKTUZjcU1hZ0t4UmZaUUt5OGM5bGt3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxXVmhjM1JBTVRRM09EazNORFUxTWpBZUZ3MHhOakV4TVRJeE9ERTFOVEphRncweU1URXhNVEV4Ck9ERTFOVEphTUVVeFF6QkJCZ05WQkFNTU9uVnpMV1ZoYzNReExXSXRNalUyTWpFNU5ETTJPVFF0Y21Wa1pHbDAKYlc5aWFXeGxMV05oYm1GeWVTMWxZWE4wUURFME56ZzVOelExTlRJd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQQpBNElCRHdBd2dnRUtBb0lCQVFERnczeU9JY2J6ZGVaK2Q0SnJnNjhNdVYvUWtpZ2Y4WDMvVmdLbVFVYWg1bHhBCklQckJ5VTgwNlRkYUhIVjlhQUJ5WjNMNlNQdnZyQTlIV1hMZkRUQVJBOTV6dW42cG9qb0ZUaHBXdzhteXZMWWQKK3krYXhMSW9CN2xxeHFzMmFYZFJIYzUySlhCbXN2NjJITUQvbGF4TitQUlZSNERSTElWUTJjTVNvRk9VQjFaSQpJZWQzbGJEN1JQSkYwdGFscGxVNi9rNzdsc2Y0NFBOKzhldnAwQ3RhRkhZQUM4TkVWSUoyekQvYmQyYS9rTkVVCmNRbFRyVkpOSkp0ZVpYK2FOUzRoclg3RFY3K0hMQzFQVlo0OUdNc0hyOU5WRXRLeEFkV3g4czgyZDFjR1VHYzkKclMvTDlBSXlUUTVIenAzTXRRdlRmMjFBUW13cGJpYVNPMk1pZWEzTEFnTUJBQUdqSXpBaE1BNEdBMVVkRHdFQgovd1FFQXdJQ0JEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQVlNQjJvCmdXTUZFR3J2b1ZLdEZ3bHFIb1RHbzJuTllDajd5ZSsrMjlnWUdWMHpMSS83L291aGVwR0I3djFBUjFZbG9BMDIKNmc1c0x0cE9Sc1dMY1g2SDArcG5DaG5WbUZWZk8yZ2FOOXVRcFpvR1doL1N1aUdoTjd1SGFZb1JhSk5oaVJ5QgpUdFZhRGM5SmsvdGpwRmVwV0tpMkNMTXdwVnRQTWtiZXpiNnM0Q2t6bWNMS1MvWGFzS3hqU082UFJ2cmFPdWovClBWckZMcjc4VVlta2Z4K3VOVVJjd0YwS0Q4RHNLYWh5WWd5YkpkUHV4Z1l3YUxPa1BPK2UyeUU0U2UralB1NkQKcGNZYkpmUkdaaGxpMkRWT3dhS0kvdkgzVWVGQlJMajhtUEtLNUlDdG03WkpXYlAvSCs3Nk1Kd1Bldy83T1lTdwovSGhPdjZOMEVIbHV2UUxWCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nCLUSTER_IP_RANGE: 10.116.0.0/14\nDNS_DOMAIN: cluster.local\nDNS_REPLICAS: \"2\"\nDNS_SERVER_IP: 10.119.240.10\nELASTICSEARCH_LOGGING_REPLICAS: \"1\"\nENABLE_CLUSTER_DNS: \"true\"\nENABLE_CLUSTER_LOGGING: \"false\"\nENABLE_CLUSTER_MONITORING: standalone\nENABLE_CLUSTER_REGISTRY: \"false\"\nENABLE_CLUSTER_UI: \"true\"\nENABLE_L7_LOADBALANCING: glbc\nENABLE_NODE_LOGGING: \"true\"\nENV_TIMESTAMP: 2016-11-12T18:15:39+00:00\nEVICTION_HARD: memory.available<100Mi,imagefs.available<10%,imagefs.inodesFree<5%\nEXTRA_DOCKER_OPTS: --insecure-registry 10.0.0.0/8\nINSTANCE_PREFIX: gke-redditmobile-canary-east-d3566425\nKUBE_ADDON_REGISTRY: gcr.io/google_containers\nKUBE_MANIFESTS_TAR_HASH: 9cf944ba7a9a8a2de97ad916ce43a7e57dfc8876\nKUBE_MANIFESTS_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-manifests.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-manifests.tar.gz\nKUBE_PROXY_TOKEN: jUKkii-e88ZVqeluYnbNapLpq-BSS-Q5JNhFEZCUXb4=\nKUBELET_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGekNDQWYrZ0F3SUJBZ0lSQUpkdDlhbDFyNFd1MmpDV3dJRnVUQlV3RFFZSktvWklodmNOQVFFTEJRQXcKUlRGRE1FRUdBMVVFQXd3NmRYTXRaV0Z6ZERFdFlpMHlOVFl5TVRrME16WTVOQzF5WldSa2FYUnRiMkpwYkdVdApZMkZ1WVhKNUxXVmhjM1JBTVRRM09EazNORFUxTWpBZUZ3MHhOakV4TVRJeE9ERTFOVEphRncweU1URXhNVEV4Ck9ERTFOVEphTUJJeEVEQU9CZ05WQkFNVEIydDFZbVZzWlhRd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDeThpK2hYZHZjdTRHaGN1WnZDcjNsc3VoZTA2b0VTaDBSS01waVFFWGcvaDNRNGZqZgpCbFBxLzZtZWRZSGcvVG5OQ0NxL1NwRVlxck9SMTlIOWR2ZE5xQ2xJRnNRTEhWSHVvM0h2bFYvMHdHVURyelZvCkRSOUZuVjFEQ0doMThBS0pyemhNc2ppcHJyR3FCTVhHVkh2aldvTnhiL0lmYUxPK2pCTnA1T2FBZE9oeCtRR0cKVmdPRGhEL29ZdzlpaGloZDNLSWZjUDBNWTJTbXQ4bEFlOHlmWm5JN3BseHhuWTFaSTdUTkNibElIN016WTZHagp3OG1nc2dBMUlNSk8rSVQ3d3NYMTNZQWhpRDhnMW1tU21Qcjg0ak9LQkphd3kvcFR5NGt2SHZZWXpGVGE4U2tNCjBjMFFpUGRDYlAvU2ZtdXpkWXZqTEtVUWhLSFJHeEVUZzFVREFnTUJBQUdqTlRBek1BNEdBMVVkRHdFQi93UUUKQXdJRm9EQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1BMEdDU3FHU0liMwpEUUVCQ3dVQUE0SUJBUUNyZ2ZHbXphdVBNVEc2b2xQbjcwYllyVFYvYnM5Yi9ST0t1eU9DMjQ2SHIyUHVrcldLCnZyTGRqK0NranE5bHk0SW5YM1BPY3BBVkFKSU1SZklaa21vajdLSUthZnpvcCs0RGpaUnZLUUZVdDI5RFYvY0QKdEFlTkZyYmY4Q3VtOVVQMDA2QksyaUdXWnNQNk9pdXNlQ2lXSUo1YkZjeXp0NFIybW9qR0dxU2RTOG5PYnM4TQpmQ05jQWptY3FlWTRqUFhRVUp3K0pMSmlpZ04wSnRtQ1hSVWVHQUdBZ3BhY3lpTXVkWHI3NlovSTdOaU1FQkhUCnJoenVGSFpEdGFoRFJ1M3Njck00WHJiYm1yVzJ0VUFXZU1xc3d6YStrYlZvcTlNUW9FSWhwWWdxY1NnYTdOZkEKNmwzU2poOEZoRDhTcHhkME5hUjM4Q2cvMnJzWnFQWmkxTzU1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\nKUBELET_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc3ZJdm9WM2IzTHVCb1hMbWJ3cTk1YkxvWHRPcUJFb2RFU2pLWWtCRjRQNGQwT0g0CjN3WlQ2ditwbm5XQjRQMDV6UWdxdjBxUkdLcXprZGZSL1hiM1RhZ3BTQmJFQ3gxUjdxTng3NVZmOU1CbEE2ODEKYUEwZlJaMWRRd2hvZGZBQ2lhODRUTEk0cWE2eHFnVEZ4bFI3NDFxRGNXL3lIMml6dm93VGFlVG1nSFRvY2ZrQgpobFlEZzRRLzZHTVBZb1lvWGR5aUgzRDlER05rcHJmSlFIdk1uMlp5TzZaY2NaMk5XU08welFtNVNCK3pNMk9oCm84UEpvTElBTlNEQ1R2aUUrOExGOWQyQUlZZy9JTlpwa3BqNi9PSXppZ1NXc012NlU4dUpMeDcyR014VTJ2RXAKRE5ITkVJajNRbXovMG41cnMzV0w0eXlsRUlTaDBSc1JFNE5WQXdJREFRQUJBb0lCQUVLZGIrZkZkZ3lVN092NgpSeGc5U25ZUkJQb1FGN0dqR1hFQzIxeDZDc2w0TUFkTHFBYjJaeFVMZWN4WWVESVdjb2NHTEV1cjZabmlLaGozCjI5OWNnekd3a1RXWjYvOHJPZzM1WUhmTkJyeXBSckY1YndzK0gwOGVCdExtZFdTNkpXZTJCK0pkVWtTd21NanYKSCtUMkhHeUZqSHNWTG5CTTNPVHBabXk4WHFhZ3ZzYTRKaEtTYXUvd2lvSFd4eTl2SWJhMzEvNWMyRG5qeDMvRgpocUdLOHRSK0FZU3ZlNnMyVDgybzFUVXliekczdnBQd0xLU2diYVdHNi9OZ3NhVHVqdjlrTFNnQldvMEN3SHBtCm5aT2lBTXVmZkZsbWZTV21CeEVPenQreGdTYmFkeG9KeGg1T1BMYXlOaFpUa2tZcWVnWlhKbTBHMkxhVWdmUDAKVXVSbTE3a0NnWUVBNm5jOWZHd3h5Rko1bkJkZldjL0tTa3NIQ2lveU5tL01wclBITjR0L1AxVDlGRGZhdTdWZwp3SXNjK1Z4cUdqRTRwZGxLTVhKV1FhekRKZGlWSFRUWXVVS0gxTk45czliditRWTl2VmsxZVdNRFNNSzBMWS9kClVZZDhuakU1TFVqZWh1VGpCbVdLeFBWM0RMWUF4TW9aUEFkRUtGd0xnVm1lSGIvUEMrTTdjZWNDZ1lFQXcyR1EKeTFNbjVnRkFRVUxuVGVEUjlESFFpZmZ4a212OEdlZVlyMjdscHU1ZzNpT0VHbTFKcExZQzdMRzNSMzNVZHoyMwoyS3pGL3RjUGdLSEZxK2ZPeE5TQ3JXNVJYK28yYTYyVktHV1hDempPaEVYU0RyMWNpUmo0M1dNeHBxOVhaYUl2CmF2WGpVM3B6OTBnUVdNWGgxT2pIT054dmVTSmVUMWh0UGpZQW1JVUNnWUVBNktNN1RMTUZpaC9iTGZjNjBxQUwKdFQ5UVV0T2ZVc2dISlBpSUdDSy9OUldjcm16bENRNWtXMmNzYm5jMWg1dUMrM3ZuMDd3QXZkVXZJK1FMd0JqcApXSmdjc2h6T1FweG5Lb3o0d1dFOFg1N1FhV2RXNDBZMWNHbWdTazNJejVmWHc3eGpUYnQrdndKWEJ6T20rNXNUCkFxNnEvK2lrT2Ntenl3eS80S21zRjgwQ2dZQlBTZlRjenE1T1pRdVNjSGcxM3ByVm9yR2lqQUI1RDJHTGtiVWcKM0x4TjlrZFJYdEJwZVJoOXcyK0Vac3FlTks1WWhhOXFPeE5PekMvNlg2dzhpeUlhTnJPaGRqZUgyU0NrcWhqeAovK2hBSVptTmpGZ21xeW8yYU8vMXlCK0tLWFlxUkp0QnFPL01ITkdhOUovTnB1Qnk2dFNPZXNheVBnUlA1dTdPClpGUHhrUUtCZ0YzZ3RCYjdtR3FYSVIrZlJkYVFBTGVXQkxFWmprZFpNWnZwVndBOWlaN1JSd2NnM3J6YVpNMHIKOGZOZm9mZDgyc2VYYStxOXdsTFdsKy8zVkFIOGxvQ3R1OUx2UllMVGlFNjl1L01vcnYrM0I2V08wSVVtNHpwTgpFckg4dWpnVWg4cGZMM3h3aTZKUjN6VGRwRGxZWkhkcFhyY1J0NUtNWkJacjY4WGhsTi9QCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==\nKUBERNETES_MASTER: \"false\"\nKUBERNETES_MASTER_NAME: 104.196.47.104\nLOGGING_DESTINATION: gcp\nNETWORK_PROVIDER: kubenet\nNODE_LABELS: cloud.google.com/gke-nodepool=default-pool\nSALT_TAR_HASH: 21763610b8d1842573f0beb421ad74c15082c98c\nSALT_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-salt.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-salt.tar.gz\nSERVER_BINARY_TAR_HASH: 7af50af04e00bf8a6d84726907cfa60a8c47cd51\nSERVER_BINARY_TAR_URL: https://storage.googleapis.com/kubernetes-release/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-eu/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz,https://storage.googleapis.com/kubernetes-release-asia/release/v1.4.5/kubernetes-server-linux-amd64.tar.gz\nSERVICE_CLUSTER_IP_RANGE: 10.119.240.0/20\nZONE: us-east1-b\n"}, {"key": "user-data", "value": "#cloud-config\n\nwrite_files:\n  - path: /etc/systemd/system/kube-node-installation.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Download and install k8s binaries and configurations\n      After=network-online.target\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/mkdir -p /home/kubernetes/bin\n      ExecStartPre=/bin/mount --bind /home/kubernetes/bin /home/kubernetes/bin\n      ExecStartPre=/bin/mount -o remount,exec /home/kubernetes/bin\n      ExecStartPre=/usr/bin/curl --fail --retry 5 --retry-delay 3 --silent --show-error\t-H \"X-Google-Metadata-Request: True\" -o /home/kubernetes/bin/configure.sh http://metadata.google.internal/computeMetadata/v1/instance/attributes/configure-sh\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure.sh\n      ExecStart=/home/kubernetes/bin/configure.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-node-configuration.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Configure kubernetes node\n      After=kube-node-installation.service\n\n      [Service]\n      Type=oneshot\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/configure-helper.sh\n      ExecStart=/home/kubernetes/bin/configure-helper.sh\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-docker-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for docker\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh docker\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubelet-monitor.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes health monitoring for kubelet\n      After=kube-node-configuration.service\n\n      [Service]\n      Restart=always\n      RestartSec=10\n      RemainAfterExit=yes\n      RemainAfterExit=yes\n      ExecStartPre=/bin/chmod 544 /home/kubernetes/bin/health-monitor.sh\n      ExecStart=/home/kubernetes/bin/health-monitor.sh kubelet\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.timer\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Hourly kube-logrotate invocation\n\n      [Timer]\n      OnCalendar=hourly\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kube-logrotate.service\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes log rotation\n      After=kube-node-configuration.service\n\n      [Service]\n      Type=oneshot\n      ExecStart=-/usr/sbin/logrotate /etc/logrotate.conf\n\n      [Install]\n      WantedBy=kubernetes.target\n\n  - path: /etc/systemd/system/kubernetes.target\n    permissions: 0644\n    owner: root\n    content: |\n      [Unit]\n      Description=Kubernetes\n\nruncmd:\n - systemctl daemon-reload\n - systemctl enable kube-node-installation.service\n - systemctl enable kube-node-configuration.service\n - systemctl enable kube-docker-monitor.service\n - systemctl enable kubelet-monitor.service\n - systemctl enable kube-logrotate.timer\n - systemctl enable kube-logrotate.service\n - systemctl start kubernetes.target\n"}, {"key": "instance-template", "value": "projects/25621943694/global/instanceTemplates/gke-redditmobile-canary--default-pool-275d4b28"}, {"key": "created-by", "value": "projects/25621943694/zones/us-east1-b/instanceGroupManagers/gke-redditmobile-canary--default-pool-275d4b28-grp"}], "kind": "compute#metadata"}, "name": "gke-redditmobile-canary--default-pool-275d4b28-f3f9", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "external-nat", "natIP": "104.196.217.171", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "zhLY7t2161g=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/cicd-prod/global/networks/default", "networkIP": "10.142.0.8", "subnetwork": "https://www.googleapis.com/compute/v1/projects/cicd-prod/regions/us-east1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b/instances/gke-redditmobile-canary--default-pool-275d4b28-f3f9", "serviceAccounts": [{"email": "25621943694-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/compute", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/servicecontrol", "https://www.googleapis.com/auth/service.management.readonly", "https://www.googleapis.com/auth/trace.append"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "3e1MlB0crYY=", "items": ["gke-redditmobile-canary-east-d3566425-node", "goog-gke-node"]}, "zone": "https://www.googleapis.com/compute/v1/projects/cicd-prod/zones/us-east1-b"}"
organization/660570133860/project/inventory-db-cleanup/instance/8545577365988416147/,instance/8545577365988416147,project/inventory-db-cleanup,8545577365988416147,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-05-11T16:17:17.315-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1804-lts"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/disks/forseti-server-vm-0753", "type": "PERSISTENT"}], "id": "8545577365988416147", "kind": "compute#instance", "labelFingerprint": "5HuLj34PBKw=", "labels": {"goog-dm": "forseti-server-0753"}, "machineType": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "UeKk5dfpAO0=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\nsudo apt-get update && sudo apt-get --assume-yes install google-cloud-sdk\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-inventory-db --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install --upgrade pip==9.0.3\npip install -q --upgrade setuptools wheel\npip install -q --upgrade -r requirements.txt\n\n# Setup Forseti logging\ntouch /var/log/forseti.log\nchown ubuntu:root /var/log/forseti.log \ncp $USER_HOME/forseti-security/configs/logging/fluentd/forseti.conf /etc/google-fluentd/config.d/forseti.conf\ncp $USER_HOME/forseti-security/configs/logging/logrotate/forseti /etc/logrotate.d/forseti\nchmod 644 /etc/logrotate.d/forseti\nservice google-fluentd restart\nlogrotate /etc/logrotate.conf\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"inventory-db-cleanup:us-central1:forseti-server-db-0753\"\nexport FORSETI_DB_NAME=\"forseti_security\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-0753/configs/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-0753/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-0753\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n\n# Use flock to prevent rerun of the same cron job when the previous job is still running.\n# If the lock file does not exist under the tmp directory, it will create the file and put a lock on top of the file.\n# When the previous cron job is not finished and the new one is trying to run, it will attempt to acquire the lock\n# to the lock file and fail because the file is already locked by the previous process.\n# The -n flag in flock will fail the process right away when the process is not able to acquire the lock so we won't\n# queue up the jobs.\n# If the cron job failed the acquire lock on the process, it will log a warning message to syslog.\n\n(echo \"59 */12 * * * (/usr/bin/flock -n /tmp/forseti_cron_runner.lock $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh || echo '[forseti-security] Warning: New Forseti cron job will not be started, because previous Forseti job is still running.') 2>&1 | logger\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-0753", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.174.210", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "XhraQqBQ6lw=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c/instances/forseti-server-vm-0753", "serviceAccounts": [{"email": "forseti-server-gcp-0753@inventory-db-cleanup.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/inventory-db-cleanup/zones/us-central1-c"}"
organization/660570133860/project/steady-circuit-182208/instance/8672214085873300446/,instance/8672214085873300446,project/steady-circuit-182208,8672214085873300446,instance,0,,,"{"cpuPlatform": "Unknown CPU Platform", "creationTimestamp": "2017-12-12T13:42:10.563-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/disks/forseti-security-20171212132835-vm", "type": "PERSISTENT"}], "id": "8672214085873300446", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "btraYyTkGuE=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"steady-circuit-182208:us-central1:forseti-security-20171212132835\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"carise@henrychang.mygbiz.com\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-132835@steady-circuit-182208.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=steady-circuit-182208-data-132835\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"36 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20171212132835-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "vBkhDC-ygwA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/global/networks/default", "networkIP": "10.128.0.9", "subnetwork": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c/instances/forseti-security-20171212132835-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-132835@steady-circuit-182208.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "TERMINATED", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/steady-circuit-182208/zones/us-central1-c"}"
organization/660570133860/project/henry-rc2ddd2/instance/8683883748236229363/,instance/8683883748236229363,project/henry-rc2ddd2,8683883748236229363,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T23:37:16.935-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/disks/forseti-client-vm-2025", "type": "PERSISTENT"}], "id": "8683883748236229363", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "wPx4q0htOs0=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-2025/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-2025/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-2025", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.193.182.39", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "qlDWa84z3MM=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/global/networks/default", "networkIP": "10.128.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c/instances/forseti-client-vm-2025", "serviceAccounts": [{"email": "forseti-client-gcp-2025@henry-rc2ddd2.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ddd2/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd4/instance/8706360338629563759/,instance/8706360338629563759,project/pso-cicd4,8706360338629563759,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:17:20.055-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/disks/deploygce-hellogce-v000-gi8a", "type": "PERSISTENT"}], "id": "8706360338629563759", "kind": "compute#instance", "labelFingerprint": "R2WSA1njhrs=", "labels": {"deploygce-1479579484872": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "KWvVDGbzQtI=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.46,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/502446248852/global/instanceTemplates/deploygce-hellogce-v000-1479581033906"}, {"key": "created-by", "value": "projects/502446248852/zones/us-west1-b/instanceGroupManagers/deploygce-hellogce-v000"}], "kind": "compute#metadata"}, "name": "deploygce-hellogce-v000-gi8a", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.199.125.241", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "qS6xviHiH2Y=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/instances/deploygce-hellogce-v000-gi8a", "serviceAccounts": [{"email": "502446248852-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "R2WSA1njhrs=", "items": ["deploygce-1479579484872"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd2/instance/8826931499536258382/,instance/8826931499536258382,project/pso-cicd2,8826931499536258382,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:17:53.501-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/zones/us-west1-b/disks/deploygce-hellogce-v001-2ub9", "type": "PERSISTENT"}], "id": "8826931499536258382", "kind": "compute#instance", "labelFingerprint": "RPaMqqDte5U=", "labels": {"deploygce-1479494001686": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "1QnNnAuCJpI=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":1.0,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/777906875026/global/instanceTemplates/deploygce-hellogce-v001-1479546036278"}, {"key": "created-by", "value": "projects/777906875026/zones/us-west1-b/instanceGroupManagers/deploygce-hellogce-v001"}], "kind": "compute#metadata"}, "name": "deploygce-hellogce-v001-2ub9", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.198.100.220", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "UuuUvNEGSxQ=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/zones/us-west1-b/instances/deploygce-hellogce-v001-2ub9", "serviceAccounts": [{"email": "777906875026-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "RPaMqqDte5U=", "items": ["deploygce-1479494001686"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd2/zones/us-west1-b"}"
organization/660570133860/project/pso-cicd4/instance/8887436713879704939/,instance/8887436713879704939,project/pso-cicd4,8887436713879704939,instance,0,,,"{"cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-28T23:17:24.762-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "persistent-disk-0", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1404-trusty"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/disks/deploygce-hellogce-v001-3u7w", "type": "PERSISTENT"}], "id": "8887436713879704939", "kind": "compute#instance", "labelFingerprint": "R2WSA1njhrs=", "labels": {"deploygce-1479579484872": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/machineTypes/f1-micro", "metadata": {"fingerprint": "Bjv1Bx5b3tI=", "items": [{"key": "backend-service-names", "value": "deploygce"}, {"key": "global-load-balancer-names", "value": "deploygce"}, {"key": "load-balancing-policy", "value": "{\"balancingMode\":\"RATE\",\"capacityScaler\":0.46,\"listeningPort\":8080,\"maxConnectionsPerInstance\":null,\"maxRatePerInstance\":80.0,\"maxUtilization\":null}"}, {"key": "instance-template", "value": "projects/502446248852/global/instanceTemplates/deploygce-hellogce-v001-1479581362947"}, {"key": "created-by", "value": "projects/502446248852/zones/us-west1-b/instanceGroupManagers/deploygce-hellogce-v001"}], "kind": "compute#metadata"}, "name": "deploygce-hellogce-v001-3u7w", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.229.205", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "E6JY-fVGuAk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/global/networks/default", "networkIP": "10.138.0.3", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b/instances/deploygce-hellogce-v001-3u7w", "serviceAccounts": [{"email": "502446248852-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "R2WSA1njhrs=", "items": ["deploygce-1479579484872"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd4/zones/us-west1-b"}"
organization/660570133860/project/iam-explain-henry/instance/8940751001934298454/,instance/8940751001934298454,project/iam-explain-henry,8940751001934298454,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2017-05-31T15:29:14.099-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/disks/forseti-securityeee-vm", "type": "PERSISTENT"}], "id": "8940751001934298454", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/machineTypes/g1-small", "metadata": {"fingerprint": "NKFTroink58=", "items": [{"key": "startup-script", "value": "#!/bin/bash\n# Forseti setup\nsudo apt-get install -y git unzip\n# Forseti dependencies\nsudo apt-get install -y libmysqlclient-dev python-pip python-dev\n\nUSER_HOME=/home/ubuntu\nFORSETI_PROTOC_URL=https://raw.githubusercontent.com/GoogleCloudPlatform/forseti-security/master/scripts/data/protoc_url.txt\n\n# Install fluentd if necessary\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed\nCLOUD_SQL_PROXY=$(ls $USER_HOME/cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        mv cloud_sql_proxy.linux.amd64 cloud_sql_proxy\n        chmod +x cloud_sql_proxy\nfi\n\n$USER_HOME/cloud_sql_proxy -instances=iam-explain-henry:us-central1:mergeiamexplain=tcp:3306 &\n\n# Check if rules.yaml exists\nRULES_FILE=$(gsutil ls gs://mergeiamexplain/rules/rules.yaml)\nif [ $? -eq 1 ]; then\n        cd $USER_HOME\n        read -d '' RULES_YAML << EOF\nrules:\n  - name: sample whitelist\n    mode: whitelist\n    resource:\n      - type: organization\n        applies_to: self_and_children\n        resource_ids:\n          - 660570133860\n    inherit_from_parents: true\n    bindings:\n      - role: roles/*\n        members:\n          - serviceAccount:*@*.gserviceaccount.com\nEOF\n        echo \"$RULES_YAML\" > $USER_HOME/rules.yaml\n        gsutil cp $USER_HOME/rules.yaml gs://mergeiamexplain/rules/rules.yaml\nfi\n\n# Check whether protoc is installed\nPROTOC_PATH=$(which protoc)\nif [ -z \"$PROTOC_PATH\" ]; then\n\n        cd $USER_HOME\n        PROTOC_DOWNLOAD_URL=$(curl -s $FORSETI_PROTOC_URL)\n\n        if [ -z \"$PROTOC_DOWNLOAD_URL\" ]; then\n            echo \"No PROTOC_DOWNLOAD_URL set: $PROTOC_DOWNLOAD_URL\"\n            exit 1\n        else\n            wget $PROTOC_DOWNLOAD_URL\n            unzip -o $(basename $PROTOC_DOWNLOAD_URL)\n            sudo cp bin/protoc /usr/local/bin\n        fi\nfi\n\n# Install Forseti Security\ncd $USER_HOME\nrm -rf forseti-*\npip install --upgrade pip\npip install --upgrade setuptools\npip install google-apputils grpcio grpcio-tools protobuf\n\ncd $USER_HOME\n\n# Download Forseti src; see DOWNLOAD_FORSETI\n\n            wget -qO- https://github.com/GoogleCloudPlatform/forseti-security/archive/vexplain-merge.tar.gz | tar xvz\n            cd forseti-security-explain-merge\n        \n\n# Don't build protos in setup.py.\n# Yes, this adds extra steps. However, this removes the step of having to download protoc.\n# Otherise, the pip package and the setuptools clobber each other's path\npython build_protos.py -- clean\npip uninstall protobuf\npython setup.py install\n\n# Create the startup run script\nread -d '' RUN_FORSETI << EOF\n#!/bin/bash\n# inventory command\n/usr/local/bin/forseti_inventory --db_name forseti_security --sendgrid_api_key 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 --email_sender silverspin+mergeiamexplain@goldspin@gmail.com --email_recipient henryc@google.com --inventory_groups --domain_super_admin_email henry@henrychang.mygbiz.com --groups_service_account_key_file /home/ubuntu/service-account-key.json\n# scanner command\n/usr/local/bin/forseti_scanner --rules gs://mergeiamexplain/rules/rules.yaml --output_path gs://mergeiamexplain/scanner_violations --engine_name IamRulesEngine --db_name forseti_security --sendgrid_api_key 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 --email_sender silverspin+mergeiamexplain@goldspin@gmail.com --email_recipient henryc@google.com\n\nEOF\necho \"$RUN_FORSETI\" > $USER_HOME/run_forseti.sh\nchmod +x $USER_HOME/run_forseti.sh\n/bin/sh $USER_HOME/run_forseti.sh\n\n(echo \"0 * * * * $USER_HOME/run_forseti.sh\") | crontab -\n"}], "kind": "compute#metadata"}, "name": "forseti-securityeee-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.198.232.144", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "e6I18WFpgHE=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c/instances/forseti-securityeee-vm", "serviceAccounts": [{"email": "forseti@iam-explain-henry.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-henry/zones/us-central1-c"}"
organization/660570133860/project/iam-explain-deployment-test/instance/9049700303416254478/,instance/9049700303416254478,project/iam-explain-deployment-test,9049700303416254478,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-02-01T10:39:29.979-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/disks/forseti-security-20180201103320-vm", "type": "PERSISTENT"}], "id": "9049700303416254478", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "CX6zlWhjQok=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\npip install --upgrade pip\npip install --upgrade setuptools\npip install grpcio grpcio-tools google-apputils\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-dev --single-branch forseti-security\n        \ncd forseti-security\n\n# Set ownership of config and rules to $USER\nchown -R $USER $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/scripts/gcp_setup/bash_sripts/run_forseti.sh\n\n# Build protos.\npython build_protos.py --clean\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"iam-explain-deployment-test:us-central1:forseti-security-20180201103320\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_EMAIL=\"None\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\nexport ROOT_RESOURCE_ID=\"organizations/660570133860\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CONF=$USER_HOME/forseti-security/configs/forseti_conf.yaml\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\nsudo su $USER -c \"python $FORSETI_HOME/scripts/rotate_gsuite_key.py forseti-gsuite-reader-103320@iam-explain-deployment-test.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\"\n\n# Start Forseti service depends on vars defined above.\nbash ./scripts/gcp_setup/bash_scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_CONF=$FORSETI_HOME/configs/forseti_conf.yaml\nexport SCANNER_BUCKET=iam-explain-deployment-test-data-103320\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nsudo su $USER -c \"$FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\"\n(echo \"30 */2 * * * $FORSETI_HOME/scripts/gcp_setup/bash_scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-security-20180201103320-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.191.150", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ZeNTwEQTRVU=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c/instances/forseti-security-20180201103320-vm", "serviceAccounts": [{"email": "forseti-gcp-readwrite-103320@iam-explain-deployment-test.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/iam-explain-deployment-test/zones/us-central1-c"}"
organization/660570133860/project/forseti-v2-brown-bag/instance/944927132720245678/,instance/944927132720245678,project/forseti-v2-brown-bag,944927132720245678,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-05T14:29:38.431-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/disks/forseti-server-vm-1922", "type": "PERSISTENT"}], "id": "944927132720245678", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "s_u28D8q6zs=", "items": [{"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Check whether Cloud SQL proxy is installed.\nCLOUD_SQL_PROXY=$(which cloud_sql_proxy)\nif [ -z \"$CLOUD_SQL_PROXY\" ]; then\n        cd $USER_HOME\n        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64\n        sudo mv cloud_sql_proxy.linux.amd64 /usr/local/bin/cloud_sql_proxy\n        chmod +x /usr/local/bin/cloud_sql_proxy\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\n\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\n        \ncd forseti-security\n\n# Forseti Host Setup\nsudo apt-get install -y git unzip\n\n# Forseti host dependencies\nsudo apt-get install -y $(cat setup/dependencies/apt_packages.txt | grep -v \"#\" | xargs)\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Change the access level of configs/ rules/ and run_forseti.sh\nchmod -R ug+rwx $USER_HOME/forseti-security/configs $USER_HOME/forseti-security/rules $USER_HOME/forseti-security/setup/gcp/scripts/run_forseti.sh\n\n# Install Forseti\npython setup.py install\n\n# Export variables required by initialize_forseti_services.sh.\nexport SQL_PORT=3306\nexport SQL_INSTANCE_CONN_STRING=\"forseti-v2-brown-bag:us-central1:forseti-server-1922\"\nexport FORSETI_DB_NAME=\"forseti_security\"\nexport GSUITE_ADMIN_CREDENTIAL_PATH=\"/home/ubuntu/gsuite_key.json\"\n\n\n# Export variables required by run_forseti.sh\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_SERVER_CONF=$USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\n\n# Rotate gsuite key\n# TODO: consider moving this to the forseti_server\npython $FORSETI_HOME/setup/gcp/util/rotate_gsuite_key.py forseti-server-gsuite-1922@forseti-v2-brown-bag.iam.gserviceaccount.com $GSUITE_ADMIN_CREDENTIAL_PATH\nchown ubuntu:root $GSUITE_ADMIN_CREDENTIAL_PATH\n\n# Download server configuration from GCS\ngsutil cp gs://forseti-server-1922/configs/server/forseti_conf_server.yaml $USER_HOME/forseti-security/configs/server/forseti_conf_server.yaml\ngsutil cp -r gs://forseti-server-1922/rules $USER_HOME/forseti-security/\n\n# Start Forseti service depends on vars defined above.\nbash ./setup/gcp/scripts/initialize_forseti_services.sh\n\necho \"Starting services.\"\nsystemctl start cloudsqlproxy\nsleep 5\nsystemctl start forseti\necho \"Success! The Forseti API server has been started.\"\n\n# Create a Forseti env script\nFORSETI_ENV=\"$(cat <<EOF\n#!/bin/bash\n\nexport PATH=$PATH:/usr/local/bin\n\n# Forseti environment variables\nexport FORSETI_HOME=/home/ubuntu/forseti-security\nexport FORSETI_SERVER_CONF=$FORSETI_HOME/configs/server/forseti_conf_server.yaml\nexport SCANNER_BUCKET=forseti-server-1922\nEOF\n)\"\necho \"$FORSETI_ENV\" > $USER_HOME/forseti_env.sh\n\nUSER=ubuntu\n(echo \"15 */2 * * * $FORSETI_HOME/setup/gcp/scripts/run_forseti.sh\") | crontab -u $USER -\necho \"Added the run_forseti.sh to crontab under user $USER\"\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-server-vm-1922", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.184.197.25", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "nxHgEIxe7QU=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/global/networks/default", "networkIP": "10.128.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c/instances/forseti-server-vm-1922", "serviceAccounts": [{"email": "forseti-server-gcp-1922@forseti-v2-brown-bag.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/forseti-v2-brown-bag/zones/us-central1-c"}"
organization/660570133860/project/inventoryscanner-henry/instance/958029991343811437/,instance/958029991343811437,project/inventoryscanner-henry,958029991343811437,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2017-02-07T15:17:22.483-08:00", "deletionProtection": false, "description": "", "disks": [{"autoDelete": true, "boot": true, "deviceName": "inventory-loader", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/debian-cloud/global/licenses/debian-8-jessie"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-west1-b/disks/inventory-loader", "type": "PERSISTENT"}], "id": "958029991343811437", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-west1-b/machineTypes/n1-standard-1", "metadata": {"fingerprint": "lnZRlXJPC6M=", "kind": "compute#metadata"}, "name": "inventory-loader", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.249.86", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "_iwrZpefyfA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/global/networks/default", "networkIP": "10.138.0.2", "subnetwork": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-west1-b/instances/inventory-loader", "serviceAccounts": [{"email": "688852854129-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/inventoryscanner-henry/zones/us-west1-b"}"
organization/660570133860/project/henry-rc2ccc/instance/978554613523809154/,instance/978554613523809154,project/henry-rc2ccc,978554613523809154,instance,0,,,"{"cpuPlatform": "Intel Haswell", "creationTimestamp": "2018-04-04T23:08:46.081-07:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "boot", "guestOsFeatures": [{"type": "VIRTIO_SCSI_MULTIQUEUE"}], "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-1604-xenial"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/disks/forseti-client-vm-5102", "type": "PERSISTENT"}], "id": "978554613523809154", "kind": "compute#instance", "labelFingerprint": "42WmSpB8rSM=", "machineType": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/machineTypes/n1-standard-2", "metadata": {"fingerprint": "RNFZUWZLNZA=", "items": [{"key": "enable-oslogin", "value": "TRUE"}, {"key": "startup-script", "value": "#!/bin/bash\nexec > /tmp/deployment.log\nexec 2>&1\n\n# Ubuntu update.\nsudo apt-get update -y\nsudo apt-get upgrade -y\n\n# Forseti setup.\nsudo apt-get install -y git unzip\n\n# Forseti dependencies\nsudo apt-get install -y libffi-dev libssl-dev libmysqlclient-dev python-pip python-dev build-essential\n\nUSER=ubuntu\nUSER_HOME=/home/ubuntu\n\n# Install fluentd if necessary.\nFLUENTD=$(ls /usr/sbin/google-fluentd)\nif [ -z \"$FLUENTD\" ]; then\n      cd $USER_HOME\n      curl -sSO https://dl.google.com/cloudagents/install-logging-agent.sh\n      bash install-logging-agent.sh\nfi\n\n# Install Forseti Security.\ncd $USER_HOME\nrm -rf *forseti*\n\n# Download Forseti source code\ngit clone https://github.com/GoogleCloudPlatform/forseti-security.git --branch 2.0-rc2 --single-branch forseti-security\ncd forseti-security\n\n# Forseti dependencies\npip install -q --upgrade setuptools pip wheel\npip install -q --upgrade -r requirements.txt\n\n# Install Forseti\npython setup.py install\n\n# Set ownership of the forseti project to $USER\nchown -R $USER $USER_HOME/forseti-security\n\n# Export variables\nexport FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-5102/configs/client/forseti_conf_client.yaml\n\n\n# Store the variables in /etc/profile.d/forseti_environment.sh \n# so all the users will have access to them\necho \"echo 'export FORSETI_HOME=$USER_HOME/forseti-security\nexport FORSETI_CLIENT_CONFIG=gs://forseti-client-5102/configs/client/forseti_conf_client.yaml\n' >> /etc/profile.d/forseti_environment.sh\" | sudo sh\n\necho \"Execution of startup script finished\"\n"}], "kind": "compute#metadata"}, "name": "forseti-client-vm-5102", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "35.224.83.195", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "AUO9kxj5aVk=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/global/networks/default", "networkIP": "10.128.0.5", "subnetwork": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/regions/us-central1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c/instances/forseti-client-vm-5102", "serviceAccounts": [{"email": "forseti-client-gcp-5102@henry-rc2ccc.iam.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud-platform"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "42WmSpB8rSM="}, "zone": "https://www.googleapis.com/compute/v1/projects/henry-rc2ccc/zones/us-central1-c"}"
organization/660570133860/project/pso-cicd8/instance/984464303876608675/,instance/984464303876608675,project/pso-cicd8,984464303876608675,instance,0,,,"{"canIpForward": false, "cpuPlatform": "Intel Broadwell", "creationTimestamp": "2016-11-21T18:24:12.594-08:00", "deletionProtection": false, "disks": [{"autoDelete": true, "boot": true, "deviceName": "jenkins-vm-tmpl-boot-disk", "index": 0, "interface": "SCSI", "kind": "compute#attachedDisk", "licenses": ["https://www.googleapis.com/compute/v1/projects/bitnami-launchpad/global/licenses/bitnami-jenkins"], "mode": "READ_WRITE", "source": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/disks/jenkins-1-vm", "type": "PERSISTENT"}], "id": "984464303876608675", "kind": "compute#instance", "labelFingerprint": "wRzmHaQUpDk=", "labels": {"jenkins-1-tcp-443": "", "jenkins-1-tcp-80": "", "nginx": ""}, "machineType": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/machineTypes/n1-standard-2", "metadata": {"fingerprint": "i0JvmjqvCUQ=", "items": [{"key": "bitnami-base-password", "value": "cshr448C"}, {"key": "status-config-url", "value": "https://runtimeconfig.googleapis.com/v1beta1/projects/pso-cicd8/configs/jenkins-1-config"}, {"key": "status-variable-path", "value": "status"}, {"key": "status-uptime-deadline", "value": "420"}, {"key": "startup-script", "value": "#!/bin/bash\n\nset -e\n\nDEFAULT_UPTIME_DEADLINE=\"300\"  # 5 minutes\n\nmetadata_value() {\n  curl --retry 5 -sfH \"Metadata-Flavor: Google\" \\\n       \"http://metadata/computeMetadata/v1/$1\"\n}\n\naccess_token() {\n  metadata_value \"instance/service-accounts/default/token\" \\\n  | python -c \"import sys, json; print json.load(sys.stdin)['access_token']\"\n}\n\nuptime_seconds() {\n  seconds=\"$(cat /proc/uptime | cut -d' ' -f1)\"\n  echo ${seconds%%.*}  # delete floating point.\n}\n\nconfig_url() { metadata_value \"instance/attributes/status-config-url\"; }\ninstance_id() { metadata_value \"instance/id\"; }\nvariable_path() { metadata_value \"instance/attributes/status-variable-path\"; }\nproject_name() { metadata_value \"project/project-id\"; }\nuptime_deadline() {\n  metadata_value \"instance/attributes/status-uptime-deadline\" \\\n      || echo $DEFAULT_UPTIME_DEADLINE\n}\n\nconfig_name() {\n  python - $(config_url) <<EOF\nimport sys, urlparse\nparsed = urlparse.urlparse(sys.argv[1])\nprint '/'.join(parsed.path.rstrip('/').split('/')[-4:])\nEOF\n}\n\nvariable_body() {\n  encoded_value=$(echo \"$2\" | base64)\n  printf '{\"name\":\"%s\", \"value\":\"%s\"}\\n' \"$1\" \"$encoded_value\"\n}\n\npost_result() {\n  var_subpath=$1\n  var_value=$2\n  var_path=\"$(config_name)/variables/$var_subpath/$(instance_id)\"\n\n  curl --retry 5 -sH \"Authorization: Bearer $(access_token)\" \\\n      -H \"Content-Type: application/json\" \\\n      -X POST -d \"$(variable_body \"$var_path\" \"$var_value\")\" \\\n      \"$(config_url)/variables\"\n}\n\npost_success() {\n  post_result \"$(variable_path)/success\" \"${1:-Success}\"\n}\n\npost_failure() {\n  post_result \"$(variable_path)/failure\" \"${1:-Failure}\"\n}\n\n# The contents of initScript are contained within this function.\ncustom_init() (\n  return 0\n)\n\n# The contents of checkScript are contained within this function.\ncheck_success() (\n  failed=$(/etc/init.d/bitnami status \\\n      | grep \"not running\" | cut -d\" \" -f1 | tr \"\\n\" \" \")\n  if [ ! -z \"$failed\" ]; then\n    echo \"Processes failed to start: $failed\"\n    exit 1\n  fi\n)\n\ncheck_success_with_retries() {\n  deadline=\"$(uptime_deadline)\"\n  while [ \"$(uptime_seconds)\" -lt \"$deadline\" ]; do\n    message=$(check_success)\n    case $? in\n    0)\n      # Success.\n      return 0\n      ;;\n    1)\n      # Not ready; continue loop\n      ;;\n    *)\n      # Failure; abort.\n      echo $message\n      return 1\n      ;;\n    esac\n\n    sleep 5\n  done\n\n  # The check was not successful within the required deadline.\n  echo \"status check timeout\"\n  return 1\n}\n\ndo_init() {\n  # Run the init script first. If no init script was specified, this\n  # is a no-op.\n  echo \"software-status: initializing...\"\n\n  set +e\n  message=\"$(custom_init)\"\n  result=$?\n  set -e\n\n  if [ $result -ne 0 ]; then\n    echo \"software-status: init failure\"\n    post_failure \"$message\"\n    return 1\n  fi\n}\n\ndo_check() {\n  # Poll for success.\n  echo \"software-status: waiting for software to become ready...\"\n  set +e\n  message=\"$(check_success_with_retries)\"\n  result=$?\n  set -e\n\n  if [ $result -eq 0 ]; then\n    echo \"software-status: success\"\n    post_success\n  else\n    echo \"software-status: failed with message: $message\"\n    post_failure \"$message\"\n  fi\n}\n\n# Run the initialization script synchronously.\ndo_init || exit $?\n\n# The actual software initialization might come after google's init.d\n# script that executes our startup script. Thus, launch this script\n# into the background so that it does not block init and eventually\n# timeout while waiting for software to start.\ndo_check & disown"}], "kind": "compute#metadata"}, "name": "jenkins-1-vm", "networkInterfaces": [{"accessConfigs": [{"kind": "compute#accessConfig", "name": "External NAT", "natIP": "104.196.235.239", "type": "ONE_TO_ONE_NAT"}], "fingerprint": "ybz8uZORUGA=", "kind": "compute#networkInterface", "name": "nic0", "network": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/global/networks/default", "networkIP": "10.138.0.12", "subnetwork": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/regions/us-west1/subnetworks/default"}], "scheduling": {"automaticRestart": true, "onHostMaintenance": "MIGRATE", "preemptible": false}, "selfLink": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b/instances/jenkins-1-vm", "serviceAccounts": [{"email": "94226340476-compute@developer.gserviceaccount.com", "scopes": ["https://www.googleapis.com/auth/cloud.useraccounts.readonly", "https://www.googleapis.com/auth/devstorage.read_only", "https://www.googleapis.com/auth/logging.write", "https://www.googleapis.com/auth/monitoring.write", "https://www.googleapis.com/auth/cloudruntimeconfig"]}], "startRestricted": false, "status": "RUNNING", "tags": {"fingerprint": "wRzmHaQUpDk=", "items": ["jenkins-1-tcp-80", "jenkins-1-tcp-443", "nginx"]}, "zone": "https://www.googleapis.com/compute/v1/projects/pso-cicd8/zones/us-west1-b"}"
